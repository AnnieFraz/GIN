Date,Repetitions,Patch,Output,Time,Compiled,Passed Unit Tests?,Opacitor measurement 1,Opacitor measurement 2
Tue Jan 22 13:12:25 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.34211498,13.67682662
Tue Jan 22 13:12:27 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.1615603,13.58640062
Tue Jan 22 13:12:29 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.59634517,13.70058121
Tue Jan 22 13:12:32 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.51011498,13.26946355
Tue Jan 22 13:12:34 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.11114376,13.88767748
Tue Jan 22 13:12:36 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.42282769,13.76583198
Tue Jan 22 13:12:38 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.20490657,13.77623914
Tue Jan 22 13:12:40 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.61342596,13.72013991
Tue Jan 22 13:12:43 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.36226833,13.47003954
Tue Jan 22 13:12:45 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.45989671,13.71349919
Tue Jan 22 13:12:47 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.38793916,13.96449171
Tue Jan 22 13:12:49 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.24643582,13.79047862
Tue Jan 22 13:12:52 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.47786956,13.47687845
Tue Jan 22 13:12:54 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.35424003,13.77987328
Tue Jan 22 13:12:56 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.21765935,13.54771267
Tue Jan 22 13:12:58 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.83610463,13.4667687
Tue Jan 22 13:13:00 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.43472147,13.65452576
Tue Jan 22 13:13:03 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.37062703,13.56353801
Tue Jan 22 13:13:05 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.66116649,13.49594155
Tue Jan 22 13:13:07 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.11682628,13.92002202
Tue Jan 22 13:13:09 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.63301774,14.01652709
Tue Jan 22 13:13:12 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.31829433,13.6140207
Tue Jan 22 13:13:14 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.27151192,13.7778249
Tue Jan 22 13:13:16 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.32939519,13.7898509
Tue Jan 22 13:13:18 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.71382959,13.36610082
Tue Jan 22 13:13:20 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.43792625,13.70077949
Tue Jan 22 13:13:23 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.56125838,13.57252452
Tue Jan 22 13:13:25 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.03195605,13.37809375
Tue Jan 22 13:13:27 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.26460695,13.61236879
Tue Jan 22 13:13:29 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.3897232,13.43855389
Tue Jan 22 13:14:54 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.59971506,13.56469441
Tue Jan 22 13:14:56 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,17.57102585,13.70454584
Tue Jan 22 13:14:59 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.3466081,13.77118418
Tue Jan 22 13:15:01 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.63714756,13.65082539
Tue Jan 22 13:15:03 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.81581906,13.34472492
Tue Jan 22 13:15:05 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.39315915,13.80696476
Tue Jan 22 13:15:08 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.36970198,13.88899899
Tue Jan 22 13:15:10 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.34135504,13.560036
Tue Jan 22 13:15:12 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.22403574,13.71168207
Tue Jan 22 13:15:14 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.1563733,13.79824259
Tue Jan 22 13:15:16 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.644449,13.76252815
Tue Jan 22 13:15:19 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.64580359,14.11752545
Tue Jan 22 13:15:21 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.27210666,13.71634057
Tue Jan 22 13:15:23 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.37330313,13.43396154
Tue Jan 22 13:15:25 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.3502754,13.47433448
Tue Jan 22 13:15:27 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.92768694,13.60810684
Tue Jan 22 13:15:30 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.37072608,13.39078037
Tue Jan 22 13:15:32 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.29209481,13.83108274
Tue Jan 22 13:15:34 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5886142,13.78879364
Tue Jan 22 13:15:36 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5774142,13.54176582
Tue Jan 22 13:15:38 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.38010905,13.64074871
Tue Jan 22 13:15:41 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5145752,13.52359461
Tue Jan 22 13:15:43 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.32810666,13.58170914
Tue Jan 22 13:15:45 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.43118639,13.40267425
Tue Jan 22 13:15:47 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.60272156,13.81869335
Tue Jan 22 13:15:49 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.62399833,13.63737883
Tue Jan 22 13:15:52 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.11623154,14.30392784
Tue Jan 22 13:15:54 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53509202,13.52785665
Tue Jan 22 13:15:56 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.07642035,13.89038656
Tue Jan 22 13:15:58 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.1425301,13.42817989
Tue Jan 22 13:16:18 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.43207845,13.68161716
Tue Jan 22 13:16:20 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.25948592,13.92610118
Tue Jan 22 13:16:23 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.40951325,14.10863816
Tue Jan 22 13:16:25 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.20110715,13.55782243
Tue Jan 22 13:16:27 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.14322397,13.63694938
Tue Jan 22 13:16:29 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.04351414,13.76090922
Tue Jan 22 13:16:32 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.37204767,13.36795092
Tue Jan 22 13:16:34 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53984958,13.68779536
Tue Jan 22 13:16:36 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.54163361,13.38919461
Tue Jan 22 13:16:38 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.50657997,13.67187089
Tue Jan 22 13:16:40 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.11907293,13.51926669
Tue Jan 22 13:16:43 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.35390962,13.67609976
Tue Jan 22 13:16:45 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48662473,13.61990149
Tue Jan 22 13:16:47 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.4092819,13.66579183
Tue Jan 22 13:16:49 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.07024215,13.43690206
Tue Jan 22 13:16:51 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.87119134,13.53608314
Tue Jan 22 13:16:54 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.75272103,16.53286128
Tue Jan 22 13:16:56 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.36249959,13.41420465
Tue Jan 22 13:16:58 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.06931719,13.78172338
Tue Jan 22 13:17:00 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.35414089,13.88790882
Tue Jan 22 13:17:03 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.25178803,13.83930931
Tue Jan 22 13:17:05 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.56330684,13.49432271
Tue Jan 22 13:17:07 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.13496432,13.85883494
Tue Jan 22 13:17:09 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.52197578,13.69978829
Tue Jan 22 13:17:11 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.40313678,13.36088075
Tue Jan 22 13:17:14 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.57681946,13.69503074
Tue Jan 22 13:17:16 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.59842662,13.50862826
Tue Jan 22 13:17:18 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.50747195,13.41285006
Tue Jan 22 13:17:20 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.44598754,13.54404546
Tue Jan 22 13:17:23 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.34350785,14.0144788
Tue Jan 22 13:17:44 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.41096689,13.8619075
Tue Jan 22 13:17:47 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.31221526,14.30508415
Tue Jan 22 13:17:49 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.33170781,13.47793562
Tue Jan 22 13:17:51 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.29483706,13.640088
Tue Jan 22 13:17:53 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.95837957,13.73137299
Tue Jan 22 13:17:56 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.58408791,13.69552634
Tue Jan 22 13:17:58 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.48474685,13.36002168
Tue Jan 22 13:18:00 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53274632,13.21904701
Tue Jan 22 13:18:02 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.38304949,13.8216008
Tue Jan 22 13:18:05 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.35774213,15.819629
Tue Jan 22 13:18:07 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.2063603,13.58679709
Tue Jan 22 13:18:09 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.56846076,13.44777157
Tue Jan 22 13:18:11 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.8289683,13.30943994
Tue Jan 22 13:18:13 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.25965121,13.77875004
Tue Jan 22 13:18:16 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48556746,13.64900836
Tue Jan 22 13:18:18 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48827673,13.71227681
Tue Jan 22 13:18:20 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48629433,13.6265752
Tue Jan 22 13:18:22 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.76821596,14.41292142
Tue Jan 22 13:18:25 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.32715384,14.42620288
Tue Jan 22 13:18:27 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.8438409,14.03998435
Tue Jan 22 13:18:30 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.08411834,13.45728667
Tue Jan 22 13:18:32 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.46405953,13.58742481
Tue Jan 22 13:18:34 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.39600045,13.59502358
Tue Jan 22 13:18:36 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.56383542,13.25823056
Tue Jan 22 13:18:38 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.36299519,13.70253045
Tue Jan 22 13:18:41 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.21329835,13.47506134
Tue Jan 22 13:18:43 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.63044077,13.73338829
Tue Jan 22 13:18:45 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.49805599,13.51768075
Tue Jan 22 13:18:47 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48847491,13.58210569
Tue Jan 22 13:18:49 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.75122901,13.64097998
Tue Jan 22 13:19:52 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.60794164,14.53344541
Tue Jan 22 13:19:54 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.37056096,13.5346295
Tue Jan 22 13:19:57 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.21650304,13.37518639
Tue Jan 22 13:19:59 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,15.2423166,13.45986364
Tue Jan 22 13:20:02 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.01976494,15.49159106
Tue Jan 22 13:20:04 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,15.0171602,14.51398585
Tue Jan 22 13:20:07 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.99961141,14.20372249
Tue Jan 22 13:20:09 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.55471687,13.6227098
Tue Jan 22 13:20:11 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.23893611,13.6957576
Tue Jan 22 13:20:13 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.37389778,13.7024314
Tue Jan 22 13:20:16 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53502596,13.53519116
Tue Jan 22 13:20:18 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.02260085,13.47952147
Tue Jan 22 13:20:20 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.50932214,13.65270865
Tue Jan 22 13:20:22 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.25112723,14.3439373
Tue Jan 22 13:20:24 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.2175603,14.03575539
Tue Jan 22 13:20:26 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53106142,13.52177759
Tue Jan 22 13:20:29 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.52567606,13.65581429
Tue Jan 22 13:20:31 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,15.94960194,13.84337299
Tue Jan 22 13:20:33 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.45864126,13.46861889
Tue Jan 22 13:20:35 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.184654,13.76953226
Tue Jan 22 13:20:37 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.27191369,14.2932895
Tue Jan 22 13:20:40 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.43729844,13.48804537
Tue Jan 22 13:20:42 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,16.15189581,14.02227575
Tue Jan 22 13:20:44 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.50294566,13.4209775
Tue Jan 22 13:20:46 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.69813637,13.49666841
Tue Jan 22 13:20:49 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.65003255,13.33243468
Tue Jan 22 13:20:51 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53188725,13.56799824
Tue Jan 22 13:20:53 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.9309247,13.54384719
Tue Jan 22 13:20:55 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.419623,13.19912484
Tue Jan 22 13:20:57 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.54222826,13.35275322
Tue Jan 22 13:21:18 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.60407606,13.88820615
Tue Jan 22 13:21:21 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.29906594,13.4388513
Tue Jan 22 13:21:23 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.39966784,15.39604413
Tue Jan 22 13:21:25 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.58679709,13.57196286
Tue Jan 22 13:21:27 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53132568,13.07106815
Tue Jan 22 13:21:29 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.50155809,13.67533991
Tue Jan 22 13:21:32 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.31026594,13.58914279
Tue Jan 22 13:21:34 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.54107195,13.68247615
Tue Jan 22 13:21:36 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.3021385,13.72975415
Tue Jan 22 13:21:38 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53073094,13.5199274
Tue Jan 22 13:21:40 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.17893841,13.91364564
Tue Jan 22 13:21:43 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.77372815,13.58385665
Tue Jan 22 13:21:45 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.36117807,13.62115694
Tue Jan 22 13:21:47 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5021859,13.63265426
Tue Jan 22 13:21:49 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.55996994,13.53585196
Tue Jan 22 13:21:52 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.25760275,14.30141694
Tue Jan 22 13:21:54 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.21898095,13.33154261
Tue Jan 22 13:21:56 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.11808181,13.89233589
Tue Jan 22 13:21:58 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.52207491,14.73362494
Tue Jan 22 13:22:00 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48285838,13.5767534
Tue Jan 22 13:22:03 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.62634394,13.46673563
Tue Jan 22 13:22:05 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.50918992,13.52957462
Tue Jan 22 13:22:07 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.13060333,13.73381774
Tue Jan 22 13:22:09 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.27217272,13.4525622
Tue Jan 22 13:22:12 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.39804891,13.73243016
Tue Jan 22 13:22:14 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.628062,13.41146249
Tue Jan 22 13:22:16 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.73718771,13.62835933
Tue Jan 22 13:22:18 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.94050577,13.71571276
Tue Jan 22 13:22:20 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.33643229,13.49045722
Tue Jan 22 13:22:23 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.29840522,13.39986602
Tue Jan 22 13:23:03 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.47070025,13.38714624
Tue Jan 22 13:23:05 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.68634173,13.35638754
Tue Jan 22 13:23:07 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.42669839,13.64484546
Tue Jan 22 13:23:09 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.55220589,13.98001973
Tue Jan 22 13:23:12 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.52498228,13.6990945
Tue Jan 22 13:23:14 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.2352689,13.7582662
Tue Jan 22 13:23:16 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.77283609,13.30207244
Tue Jan 22 13:23:18 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.37439346,14.85837771
Tue Jan 22 13:23:20 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.40670494,13.49541296
Tue Jan 22 13:23:23 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.85817422,13.74544727
Tue Jan 22 13:23:25 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.35982349,13.72542605
Tue Jan 22 13:23:27 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.15088889,13.68630865
Tue Jan 22 13:23:29 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.61141066,13.91602441
Tue Jan 22 13:23:32 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.30831661,13.29123583
Tue Jan 22 13:23:34 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.3471037,13.42854328
Tue Jan 22 13:23:36 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.58897768,13.69298236
Tue Jan 22 13:23:38 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.85808039,14.71707265
Tue Jan 22 13:23:40 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.65505435,13.6203641
Tue Jan 22 13:23:43 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.34099165,13.71852099
Tue Jan 22 13:23:45 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.44602061,13.60936229
Tue Jan 22 13:23:47 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.55887969,13.41133028
Tue Jan 22 13:23:49 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.69027858,16.43252371
Tue Jan 22 13:23:52 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.26516861,13.62799594
Tue Jan 22 13:23:54 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.19866231,13.69420483
Tue Jan 22 13:23:56 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.42705656,13.54487146
Tue Jan 22 13:23:58 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.50321,13.53261411
Tue Jan 22 13:24:00 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.07559444,14.11739324
Tue Jan 22 13:24:03 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53353925,13.46604193
Tue Jan 22 13:24:05 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.28783286,13.56746965
Tue Jan 22 13:24:07 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.44948955,13.62786372
Tue Jan 22 13:25:05 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.70758541,13.32632262
Tue Jan 22 13:25:08 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.51602892,13.28654443
Tue Jan 22 13:25:10 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.88655415,13.62776467
Tue Jan 22 13:25:12 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.49656928,13.50400293
Tue Jan 22 13:25:14 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.18260571,13.42319107
Tue Jan 22 13:25:17 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.65013169,13.47605254
Tue Jan 22 13:25:19 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.58081716,13.44925837
Tue Jan 22 13:25:21 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.0440758,13.68683724
Tue Jan 22 13:25:23 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.72995234,13.68174929
Tue Jan 22 13:25:25 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.20741756,13.77273695
Tue Jan 22 13:25:28 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.33197215,13.70831219
Tue Jan 22 13:25:30 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.17001805,13.79090807
Tue Jan 22 13:25:32 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.11966766,13.78753819
Tue Jan 22 13:25:34 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.43138457,13.67378714
Tue Jan 22 13:25:36 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.88873465,13.60559585
Tue Jan 22 13:25:39 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.32116861,13.6365859
Tue Jan 22 13:25:41 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.39035101,13.54503658
Tue Jan 22 13:25:43 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.46994031,13.49237347
Tue Jan 22 13:25:45 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.69694699,13.3651427
Tue Jan 22 13:25:47 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.55276755,13.29642291
Tue Jan 22 13:25:50 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.69873102,13.65317109
Tue Jan 22 13:25:52 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.47516048,13.73391687
Tue Jan 22 13:25:54 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.14322397,13.66965731
Tue Jan 22 13:25:56 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.12723344,13.88814
Tue Jan 22 13:25:59 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.57847138,13.63100235
Tue Jan 22 13:26:01 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.59271095,13.55630264
Tue Jan 22 13:26:03 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.34072731,13.785688
Tue Jan 22 13:26:05 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.87489162,13.7499075
Tue Jan 22 13:26:07 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.26414434,13.92329286
Tue Jan 22 13:26:10 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.41298219,13.53644661
Tue Jan 22 13:26:35 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.07893125,14.19589238
Tue Jan 22 13:26:37 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.21881575,13.49253867
Tue Jan 22 13:26:39 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.71584489,13.509223
Tue Jan 22 13:26:41 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.46307363,13.65442663
Tue Jan 22 13:26:44 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.41552616,13.21498334
Tue Jan 22 13:26:46 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.54886899,13.59099297
Tue Jan 22 13:26:48 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.29966068,13.62512156
Tue Jan 22 13:26:50 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.10955791,13.6352314
Tue Jan 22 13:26:53 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.21987301,13.27759108
Tue Jan 22 13:26:55 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.27184232,13.61438409
Tue Jan 22 13:26:57 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.2844299,13.58230388
Tue Jan 22 13:26:59 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.77875004,13.50935512
Tue Jan 22 13:27:01 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.24101756,13.47350856
Tue Jan 22 13:27:03 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.43789309,13.51774681
Tue Jan 22 13:27:06 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.80389211,13.76814469
Tue Jan 22 13:27:08 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.32936211,13.42322415
Tue Jan 22 13:27:10 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5500253,13.49607376
Tue Jan 22 13:27:12 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.54044423,13.2748819
Tue Jan 22 13:27:15 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.4395121,13.51768084
Tue Jan 22 13:27:17 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.43026134,13.22955323
Tue Jan 22 13:27:19 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.52712979,13.46514986
Tue Jan 22 13:27:21 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,12.93970764,13.55233801
Tue Jan 22 13:27:23 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.26242636,13.26189778
Tue Jan 22 13:27:26 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.25152377,13.59287615
Tue Jan 22 13:27:28 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.09574787,13.76804555
Tue Jan 22 13:27:30 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.82533407,13.41318046
Tue Jan 22 13:27:32 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.61864613,13.38156269
Tue Jan 22 13:27:34 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.36861173,13.7044467
Tue Jan 22 13:27:37 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.20123936,13.85824029
Tue Jan 22 13:27:39 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.19915791,13.64986735
Tue Jan 22 13:28:23 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.33008897,13.78981782
Tue Jan 22 13:28:25 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.38846775,13.47387195
Tue Jan 22 13:28:27 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.26543286,13.45494089
Tue Jan 22 13:28:29 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48404776,13.55709565
Tue Jan 22 13:28:32 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.33309539,14.30442344
Tue Jan 22 13:28:34 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.10625939,14.43119169
Tue Jan 22 13:28:37 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.99614239,15.01458306
Tue Jan 22 13:28:40 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.90228574,15.13837789
Tue Jan 22 13:28:43 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.21350184,14.62069971
Tue Jan 22 13:28:46 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.16906522,15.59724775
Tue Jan 22 13:28:48 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.28684705,14.07632651
Tue Jan 22 13:28:50 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.30875145,14.11025691
Tue Jan 22 13:28:53 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,15.61194985,13.48897051
Tue Jan 22 13:28:55 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.39924351,14.81199186
Tue Jan 22 13:28:58 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.12172125,15.50916745
Tue Jan 22 13:29:00 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,15.02499022,14.62017104
Tue Jan 22 13:29:03 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.82853885,13.38608897
Tue Jan 22 13:29:05 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.44089959,13.20794615
Tue Jan 22 13:29:07 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.452397,13.29857034
Tue Jan 22 13:29:10 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,16.77291805,13.62865674
Tue Jan 22 13:29:12 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.18544701,13.59056344
Tue Jan 22 13:29:14 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,15.04887694,13.82176591
Tue Jan 22 13:29:16 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.46131736,13.73698952
Tue Jan 22 13:29:18 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.11533956,13.81380367
Tue Jan 22 13:29:21 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.49561124,13.58075101
Tue Jan 22 13:29:23 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.05441681,13.78535769
Tue Jan 22 13:29:25 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.40340102,13.65085846
Tue Jan 22 13:29:27 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.75582657,13.64382136
Tue Jan 22 13:29:29 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.60093753,13.76130577
Tue Jan 22 13:29:32 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.39517454,13.64319355
Tue Jan 22 13:29:53 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.16767235,13.82467336
Tue Jan 22 13:29:55 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,12.99901146,13.47162539
Tue Jan 22 13:29:57 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53192032,13.28684175
Tue Jan 22 13:29:59 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.38975628,13.43690206
Tue Jan 22 13:30:02 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.38030724,13.60325015
Tue Jan 22 13:30:04 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48071086,13.64035225
Tue Jan 22 13:30:06 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.30362521,13.86544267
Tue Jan 22 13:30:08 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.34251135,13.66935999
Tue Jan 22 13:30:10 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.46557931,13.8480314
Tue Jan 22 13:30:13 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.12644051,13.65736697
Tue Jan 22 13:30:15 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.25965113,13.91585921
Tue Jan 22 13:30:17 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.47578811,13.68115464
Tue Jan 22 13:30:19 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.38093505,13.47383887
Tue Jan 22 13:30:21 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.44985303,13.64699297
Tue Jan 22 13:30:24 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.51417874,13.55887969
Tue Jan 22 13:30:26 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.78502729,13.3927297
Tue Jan 22 13:30:28 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.55157816,14.82884147
Tue Jan 22 13:30:30 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.11662809,13.74481964
Tue Jan 22 13:30:33 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5060513,13.36560523
Tue Jan 22 13:30:35 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.16331135,13.56733753
Tue Jan 22 13:30:37 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.38552731,13.66437118
Tue Jan 22 13:30:39 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.32642167,13.80736123
Tue Jan 22 13:30:42 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.16856971,13.55864843
Tue Jan 22 13:30:44 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.16948946,13.54767969
Tue Jan 22 13:30:46 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.66810445,13.41242061
Tue Jan 22 13:30:48 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.63737883,13.30673085
Tue Jan 22 13:30:50 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5478448,13.67497653
Tue Jan 22 13:30:53 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.26298802,13.317997
Tue Jan 22 13:30:55 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.37855628,13.83673226
Tue Jan 22 13:30:57 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.64022012,13.48738457
Tue Jan 22 13:31:42 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48695513,13.6955924
Tue Jan 22 13:31:44 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.64385435,13.68680416
Tue Jan 22 13:31:46 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.6365859,13.54513571
Tue Jan 22 13:31:48 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.25495973,14.92316595
Tue Jan 22 13:31:51 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.37773028,13.70091161
Tue Jan 22 13:31:53 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.13942455,13.975031
Tue Jan 22 13:31:55 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.14897264,13.70269565
Tue Jan 22 13:31:57 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.84902251,14.27468893
Tue Jan 22 13:31:59 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.39676039,13.45332205
Tue Jan 22 13:32:02 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5675687,13.62353571
Tue Jan 22 13:32:04 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.54331851,13.57761239
Tue Jan 22 13:32:06 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.52065426,13.83567509
Tue Jan 22 13:32:08 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.49078754,13.55174336
Tue Jan 22 13:32:11 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.30184109,13.70831219
Tue Jan 22 13:32:13 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.36702588,13.81588512
Tue Jan 22 13:32:15 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.94357843,13.62135521
Tue Jan 22 13:32:17 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.40914977,13.33157569
Tue Jan 22 13:32:19 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.38559876,13.39140819
Tue Jan 22 13:32:22 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.70860951,13.30560752
Tue Jan 22 13:32:24 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.2030234,13.53955216
Tue Jan 22 13:32:26 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.65198179,13.49075455
Tue Jan 22 13:32:28 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.24019677,13.57212806
Tue Jan 22 13:32:31 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.25040036,13.5785706
Tue Jan 22 13:32:33 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.73807978,13.40383065
Tue Jan 22 13:32:35 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.44747434,13.27778917
Tue Jan 22 13:32:37 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.4213079,13.39979988
Tue Jan 22 13:32:40 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.29586125,13.5177469
Tue Jan 22 13:32:42 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.30108124,13.74316764
Tue Jan 22 13:32:44 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.26870361,13.68746496
Tue Jan 22 13:32:46 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.49164653,13.45246306
Tue Jan 22 13:33:09 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.85047624,13.8774356
Tue Jan 22 13:33:11 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.50813275,13.71802548
Tue Jan 22 13:33:13 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.2652016,13.34908601
Tue Jan 22 13:33:15 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.62280894,13.30276623
Tue Jan 22 13:33:18 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5770838,13.60245722
Tue Jan 22 13:33:20 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.16119683,14.95924386
Tue Jan 22 13:33:22 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.62528676,13.61220359
Tue Jan 22 13:33:25 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.8107641,13.37697043
Tue Jan 22 13:33:27 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.30494672,13.44674739
Tue Jan 22 13:33:29 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.69539421,13.40772913
Tue Jan 22 13:33:31 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.55778935,13.53429919
Tue Jan 22 13:33:33 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.31129013,13.10750945
Tue Jan 22 13:33:36 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.21181164,13.60229211
Tue Jan 22 13:33:38 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.58365838,13.57777759
Tue Jan 22 13:33:40 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.54876985,13.78373876
Tue Jan 22 13:33:42 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.2204016,14.01930232
Tue Jan 22 13:33:45 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.52940942,13.57536582
Tue Jan 22 13:33:47 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.31036499,13.76375061
Tue Jan 22 13:33:49 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.7241706,13.35252205
Tue Jan 22 13:33:51 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.29705064,13.81515826
Tue Jan 22 13:33:54 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.74875119,13.90119019
Tue Jan 22 13:33:56 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.3360689,13.67752041
Tue Jan 22 13:33:58 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.43135159,13.95335778
Tue Jan 22 13:34:00 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.27009127,13.74627327
Tue Jan 22 13:34:03 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.6472903,13.33643238
Tue Jan 22 13:34:05 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.58742481,13.65769737
Tue Jan 22 13:34:07 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.24075323,13.54163361
Tue Jan 22 13:34:09 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.8413247,13.53723954
Tue Jan 22 13:34:12 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53301058,13.50641469
Tue Jan 22 13:34:14 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.3893928,13.61260005
Tue Jan 22 13:35:13 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.60179643,15.75986265
Tue Jan 22 13:35:15 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,15.18476374,13.55408906
Tue Jan 22 13:35:17 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.45570091,13.56601592
Tue Jan 22 13:35:20 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.71003016,13.41331259
Tue Jan 22 13:35:22 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,15.21859509,13.67008676
Tue Jan 22 13:35:24 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.63823781,13.71204546
Tue Jan 22 13:35:27 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.70124201,13.53377051
Tue Jan 22 13:35:29 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.58240301,13.41152855
Tue Jan 22 13:35:31 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.52987195,14.01817909
Tue Jan 22 13:35:33 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.66245492,13.34297387
Tue Jan 22 13:35:36 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.42778343,13.48272616
Tue Jan 22 13:35:38 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.52564299,13.51057759
Tue Jan 22 13:35:40 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.41030609,13.53218466
Tue Jan 22 13:35:42 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.85665444,13.62753341
Tue Jan 22 13:35:44 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.68796056,13.5938012
Tue Jan 22 13:35:47 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.80375999,13.67391926
Tue Jan 22 13:35:49 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,15.30710492,13.32592608
Tue Jan 22 13:35:51 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.96194765,13.46405961
Tue Jan 22 13:35:53 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.7051075,13.55273456
Tue Jan 22 13:35:56 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.21181164,13.7779901
Tue Jan 22 13:35:58 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.27395676,13.7094685
Tue Jan 22 13:36:00 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.36259872,13.5580207
Tue Jan 22 13:36:02 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.82612709,15.73019411
Tue Jan 22 13:36:05 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.66999292,13.76213169
Tue Jan 22 13:36:07 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.21841929,13.64580368
Tue Jan 22 13:36:09 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,16.50861109,16.18004456
Tue Jan 22 13:36:12 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.8593966,13.54417759
Tue Jan 22 13:36:14 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.45695627,13.62416344
Tue Jan 22 13:36:16 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.61256706,13.7895205
Tue Jan 22 13:36:18 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5058861,13.84380253
Tue Jan 22 13:37:01 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.66810445,16.2246133
Tue Jan 22 13:37:03 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.57196286,13.72608676
Tue Jan 22 13:37:06 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.56882424,13.85090578
Tue Jan 22 13:37:08 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.76124492,13.49432271
Tue Jan 22 13:37:10 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.17672484,13.84482671
Tue Jan 22 13:37:13 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.33507779,13.68683724
Tue Jan 22 13:37:15 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.24504825,13.38850083
Tue Jan 22 13:37:17 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.49445484,13.60546373
Tue Jan 22 13:37:19 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.43858696,13.47056804
Tue Jan 22 13:37:21 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.9132161,13.68026257
Tue Jan 22 13:37:24 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.35714739,13.64279709
Tue Jan 22 13:37:26 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.87561849,13.18472015
Tue Jan 22 13:37:28 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.29348778,13.28469424
Tue Jan 22 13:37:30 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.20431193,13.93915127
Tue Jan 22 13:37:32 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.62865665,13.46775981
Tue Jan 22 13:37:35 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.41664949,14.04966456
Tue Jan 22 13:37:37 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.4320123,13.9315855
Tue Jan 22 13:37:39 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.56601592,13.32443936
Tue Jan 22 13:37:41 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,16.09437611,13.55461765
Tue Jan 22 13:37:44 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.31684051,13.52584126
Tue Jan 22 13:37:46 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.49590856,13.76497299
Tue Jan 22 13:37:48 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.12835668,13.64927261
Tue Jan 22 13:37:50 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.32876746,13.86570701
Tue Jan 22 13:37:52 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.39398524,13.6059924
Tue Jan 22 13:37:55 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.3614754,13.82837356
Tue Jan 22 13:37:57 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.22727359,13.83567509
Tue Jan 22 13:37:59 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.09267522,13.83752527
Tue Jan 22 13:38:01 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.61045254,14.05485165
Tue Jan 22 13:38:04 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.36342472,13.91106868
Tue Jan 22 13:38:06 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.3345492,13.4099427
Tue Jan 22 13:38:24 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.92008809,13.52058811
Tue Jan 22 13:38:27 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.32110255,13.2656972
Tue Jan 22 13:38:29 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.09462976,13.80864966
Tue Jan 22 13:38:31 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.6507924,13.44281584
Tue Jan 22 13:38:34 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.3643167,13.72053646
Tue Jan 22 13:38:36 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.57880177,14.04745107
Tue Jan 22 13:38:38 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.6153423,13.84793235
Tue Jan 22 13:38:40 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53700827,13.49643715
Tue Jan 22 13:38:43 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.40353324,13.47416928
Tue Jan 22 13:38:45 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.09181624,14.12637966
Tue Jan 22 13:38:47 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5289469,13.4386861
Tue Jan 22 13:38:49 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.62925139,13.5632077
Tue Jan 22 13:38:51 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.55283361,13.78294584
Tue Jan 22 13:38:54 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.05094779,15.62120061
Tue Jan 22 13:38:56 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.60325015,13.35609021
Tue Jan 22 13:38:58 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.03760566,14.66556586
Tue Jan 22 13:39:01 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,18.94512463,14.16496848
Tue Jan 22 13:39:03 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.78010984,13.52554403
Tue Jan 22 13:39:05 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.18043042,14.02713244
Tue Jan 22 13:39:08 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.68935344,15.29752376
Tue Jan 22 13:39:10 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.67282901,13.54999231
Tue Jan 22 13:39:12 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.47304595,13.68459059
Tue Jan 22 13:39:15 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.08508176,14.28833376
Tue Jan 22 13:39:17 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.39372081,13.73546974
Tue Jan 22 13:39:19 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.22482875,13.8622379
Tue Jan 22 13:39:21 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.55501411,13.43984241
Tue Jan 22 13:39:23 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.93429467,13.70256353
Tue Jan 22 13:39:26 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.18287005,13.9825637
Tue Jan 22 13:39:28 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.39613266,17.06639786
Tue Jan 22 13:39:30 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.43112032,13.76123971
Tue Jan 22 13:39:48 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.94106744,13.92428397
Tue Jan 22 13:39:51 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.26708486,13.19169127
Tue Jan 22 13:39:53 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.38922769,13.49584241
Tue Jan 22 13:39:55 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.4442035,13.72387327
Tue Jan 22 13:39:57 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.6086685,13.35651966
Tue Jan 22 13:40:00 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5149056,14.02643865
Tue Jan 22 13:40:02 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.33299634,13.69565846
Tue Jan 22 13:40:04 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.38542826,13.74016114
Tue Jan 22 13:40:06 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5006991,13.47919116
Tue Jan 22 13:40:09 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.73705559,13.42718869
Tue Jan 22 13:40:11 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.1196345,13.61263304
Tue Jan 22 13:40:13 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,15.58608083,13.36709194
Tue Jan 22 13:40:15 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53918886,13.44132921
Tue Jan 22 13:40:18 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.85510166,13.34624471
Tue Jan 22 13:40:20 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.34918515,13.61557356
Tue Jan 22 13:40:22 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.42801469,13.70642901
Tue Jan 22 13:40:24 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.55947434,13.5550142
Tue Jan 22 13:40:26 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.67748734,13.94909582
Tue Jan 22 13:40:29 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.17739094,13.5234295
Tue Jan 22 13:40:31 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.12934788,13.82113828
Tue Jan 22 13:40:33 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.55792156,13.87188512
Tue Jan 22 13:40:35 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.36729021,13.67458006
Tue Jan 22 13:40:38 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.6606708,13.83237126
Tue Jan 22 13:40:40 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53945311,13.61679594
Tue Jan 22 13:40:42 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48976344,13.67794995
Tue Jan 22 13:40:44 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,12.99640143,13.83276773
Tue Jan 22 13:40:46 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.43637339,13.84334
Tue Jan 22 13:40:49 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.51794509,13.52722893
Tue Jan 22 13:40:51 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.6776857,13.72737529
Tue Jan 22 13:40:53 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48890436,13.86663206
Tue Jan 22 13:41:12 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5744077,13.72572346
Tue Jan 22 13:41:14 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.65165139,14.01586638
Tue Jan 22 13:41:17 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.73857538,13.41744241
Tue Jan 22 13:41:19 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.41347787,13.76642671
Tue Jan 22 13:41:21 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.32807359,13.49045722
Tue Jan 22 13:41:23 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.34802875,14.75939474
Tue Jan 22 13:41:26 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.78218599,13.2997928
Tue Jan 22 13:41:28 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.3248689,13.54774566
Tue Jan 22 13:41:30 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.00849879,14.84707866
Tue Jan 22 13:41:33 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.61580474,15.0013017
Tue Jan 22 13:41:35 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.13585648,14.89128393
Tue Jan 22 13:41:37 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.47833209,13.3474341
Tue Jan 22 13:41:40 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.50145904,13.57602654
Tue Jan 22 13:41:42 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.59320646,13.66113341
Tue Jan 22 13:41:44 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.39685953,13.55058705
Tue Jan 22 13:41:46 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5294425,13.40548248
Tue Jan 22 13:41:49 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.27702941,13.51156879
Tue Jan 22 13:41:51 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.40422711,13.51626019
Tue Jan 22 13:41:53 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.65878771,13.36719108
Tue Jan 22 13:41:55 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.70147328,13.6081729
Tue Jan 22 13:41:57 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.39788371,13.60939536
Tue Jan 22 13:42:00 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.83088446,13.48659174
Tue Jan 22 13:42:02 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.11573602,13.86118072
Tue Jan 22 13:42:04 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.80527978,14.45957161
Tue Jan 22 13:42:06 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.18676861,13.60589326
Tue Jan 22 13:42:09 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.64144259,13.78975176
Tue Jan 22 13:42:11 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.47056813,13.46287014
Tue Jan 22 13:42:13 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.34274261,13.57282185
Tue Jan 22 13:42:15 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53393571,13.57543189
Tue Jan 22 13:42:17 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.17556853,13.76368455
Tue Jan 22 13:43:07 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.29817388,13.64745559
Tue Jan 22 13:43:10 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.09379855,13.46429079
Tue Jan 22 13:43:12 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.47017166,13.60999001
Tue Jan 22 13:43:14 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.06049596,13.62551802
Tue Jan 22 13:43:16 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.2764016,13.77491754
Tue Jan 22 13:43:19 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.28234845,13.38252081
Tue Jan 22 13:43:21 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.83527862,13.65399709
Tue Jan 22 13:43:23 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.29652196,13.77058953
Tue Jan 22 13:43:25 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.59634517,13.46035924
Tue Jan 22 13:43:27 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.34707071,13.65551688
Tue Jan 22 13:43:30 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.45167014,13.73966562
Tue Jan 22 13:43:32 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.23226231,13.63929508
Tue Jan 22 13:43:34 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.45900465,13.37505426
Tue Jan 22 13:43:36 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.45470963,13.49832032
Tue Jan 22 13:43:39 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.66219067,13.40984356
Tue Jan 22 13:43:41 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.54698581,13.88113589
Tue Jan 22 13:43:43 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.46260589,13.77594172
Tue Jan 22 13:43:45 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.17606412,14.05270414
Tue Jan 22 13:43:48 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.38261995,14.67144674
Tue Jan 22 13:43:50 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.15062985,13.22813257
Tue Jan 22 13:43:52 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.56789919,13.4679251
Tue Jan 22 13:43:54 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.42606545,13.8610486
Tue Jan 22 13:43:57 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.21921751,14.81750926
Tue Jan 22 13:43:59 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.36911254,14.46419704
Tue Jan 22 13:44:02 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.8204497,14.53400707
Tue Jan 22 13:44:04 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.51982826,13.72232041
Tue Jan 22 13:44:06 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.3397362,13.7672857
Tue Jan 22 13:44:08 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.39203591,13.6304077
Tue Jan 22 13:44:11 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48824356,13.75889393
Tue Jan 22 13:44:13 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.35675093,13.58739183
Tue Jan 22 13:44:45 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.3872123,14.38265833
Tue Jan 22 13:44:48 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.54460704,13.44413735
Tue Jan 22 13:44:50 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.4251404,13.88814
Tue Jan 22 13:44:52 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.22691011,13.37660695
Tue Jan 22 13:44:54 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.87605324,13.40657281
Tue Jan 22 13:44:57 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.34753324,13.44331144
Tue Jan 22 13:44:59 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.71161601,13.66347911
Tue Jan 22 13:45:01 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.51418404,14.30270546
Tue Jan 22 13:45:03 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.74630635,13.77154765
Tue Jan 22 13:45:06 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48408075,13.45130675
Tue Jan 22 13:45:08 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.55716162,14.18304046
Tue Jan 22 13:45:10 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.79206447,13.4844773
Tue Jan 22 13:45:12 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.82857184,13.47208791
Tue Jan 22 13:45:14 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.5013599,13.10919444
Tue Jan 22 13:45:17 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.45765015,13.94166218
Tue Jan 22 13:45:19 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.80148035,13.5035404
Tue Jan 22 13:45:21 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.88619597,13.39467894
Tue Jan 22 13:45:23 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.72678064,13.81737184
Tue Jan 22 13:45:26 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.44998515,13.49884891
Tue Jan 22 13:45:28 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.47568906,13.28829547
Tue Jan 22 13:45:30 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.6235358,13.35476861
Tue Jan 22 13:45:32 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.51371621,13.85318541
Tue Jan 22 13:45:35 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.57364785,13.8670616
Tue Jan 22 13:45:37 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.26493726,13.50357339
Tue Jan 22 13:45:39 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.50443246,14.05101924
Tue Jan 22 13:45:41 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.24914491,13.78258245
Tue Jan 22 13:45:44 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.57282185,13.43442406
Tue Jan 22 13:45:46 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.45150502,13.49356286
Tue Jan 22 13:45:48 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.60149919,13.49613983
Tue Jan 22 13:45:50 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53248199,14.0425614
Tue Jan 22 13:46:49 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.75304612,13.87221552
Tue Jan 22 13:46:52 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.53291144,13.58184135
Tue Jan 22 13:46:54 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.62085961,13.24250428
Tue Jan 22 13:46:56 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.73074526,13.46227549
Tue Jan 22 13:46:58 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48540235,13.5459947
Tue Jan 22 13:47:01 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.389558,14.51051674
Tue Jan 22 13:47:03 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.57860359,13.38113324
Tue Jan 22 13:47:05 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.0952192,13.56281124
Tue Jan 22 13:47:07 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.46184604,13.49085369
Tue Jan 22 13:47:10 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.52983896,13.27854911
Tue Jan 22 13:47:12 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.72489746,13.84320788
Tue Jan 22 13:47:14 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.40848906,13.82074181
Tue Jan 22 13:47:16 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.34981288,13.75020483
Tue Jan 22 13:47:18 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.77696591,15.35365589
Tue Jan 22 13:47:21 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.51312156,13.86464975
Tue Jan 22 13:47:23 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.3557928,13.57113686
Tue Jan 22 13:47:25 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.48914093,13.82919956
Tue Jan 22 13:47:27 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.35638754,13.53215159
Tue Jan 22 13:47:30 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.59036525,13.4189622
Tue Jan 22 13:47:32 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.96789459,13.6934119
Tue Jan 22 13:47:34 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.28304232,13.74445616
Tue Jan 22 13:47:36 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.30286536,13.63685024
Tue Jan 22 13:47:38 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.40720045,13.60913102
Tue Jan 22 13:47:41 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.20441098,14.04989583
Tue Jan 22 13:47:43 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.60800779,13.50971851
Tue Jan 22 13:47:45 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.6120054,13.53410091
Tue Jan 22 13:47:47 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.54824135,13.43842176
Tue Jan 22 13:47:50 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.54127023,13.27980456
Tue Jan 22 13:47:52 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.7226509,13.13579033
Tue Jan 22 13:47:54 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.39114385,13.5240903
Tue Jan 22 13:48:54 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48071086,14.07688818
Tue Jan 22 13:48:56 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.77772585,13.70200186
Tue Jan 22 13:48:59 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.20916852,13.50740589
Tue Jan 22 13:49:01 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.4398425,13.60235809
Tue Jan 22 13:49:03 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.15333364,13.77068866
Tue Jan 22 13:49:06 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,15.40255264,14.52198108
Tue Jan 22 13:49:08 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.15803042,14.83670458
Tue Jan 22 13:49:10 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.18610781,13.54952979
Tue Jan 22 13:49:13 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.0947236,13.61276525
Tue Jan 22 13:49:15 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48289136,14.01193474
Tue Jan 22 13:49:17 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.58953925,13.2140582
Tue Jan 22 13:49:19 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.61785311,13.58382366
Tue Jan 22 13:49:21 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.0193354,13.4204819
Tue Jan 22 13:49:24 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.43505188,13.34882168
Tue Jan 22 13:49:26 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.60662013,13.35846899
Tue Jan 22 13:49:28 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.22370542,13.78588628
Tue Jan 22 13:49:30 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,14.08012594,13.56687491
Tue Jan 22 13:49:33 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.74994058,13.82189812
Tue Jan 22 13:49:35 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.40297157,13.60070626
Tue Jan 22 13:49:37 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.57047615,13.38143056
Tue Jan 22 13:49:39 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.4383557,13.41929251
Tue Jan 22 13:49:42 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.50783543,13.41582358
Tue Jan 22 13:49:44 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.25334089,13.25172196
Tue Jan 22 13:49:46 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.6927511,13.41760761
Tue Jan 22 13:49:48 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.3878731,13.69512988
Tue Jan 22 13:49:51 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48530321,13.55240416
Tue Jan 22 13:49:53 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.48292444,13.21937733
Tue Jan 22 13:49:55 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.55025665,13.55570799
Tue Jan 22 13:49:57 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.22406881,13.72248561
Tue Jan 22 13:49:59 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};
        bubbleSort(array, array.length);



    }
}",1.54816E+12,TRUE,FALSE,13.58468265,13.49029194
Tue Jan 22 13:51:45 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,14.54094512,16.09024629
Tue Jan 22 13:51:48 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.36190494,13.71207854
Tue Jan 22 13:51:50 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.28552024,13.66037356
Tue Jan 22 13:51:52 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.45517224,13.46118515
Tue Jan 22 13:51:54 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.30455026,13.65042901
Tue Jan 22 13:51:57 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.69546028,13.60972576
Tue Jan 22 13:51:59 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.70398417,14.30980871
Tue Jan 22 13:52:01 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.25261394,13.79345205
Tue Jan 22 13:52:04 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.56661057,13.46921345
Tue Jan 22 13:52:06 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.96336839,13.56476048
Tue Jan 22 13:52:08 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.17153784,13.55693045
Tue Jan 22 13:52:10 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,15.06196011,14.58002945
Tue Jan 22 13:52:13 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.2785821,13.8771052
Tue Jan 22 13:52:15 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.74752873,13.50753801
Tue Jan 22 13:52:17 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,12.94634836,13.49686669
Tue Jan 22 13:52:19 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.65333637,13.38080284
Tue Jan 22 13:52:22 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.32063994,13.88721495
Tue Jan 22 13:52:24 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.89527633,13.4117928
Tue Jan 22 13:52:26 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.84208455,13.34905302
Tue Jan 22 13:52:28 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.26896795,13.66453637
Tue Jan 22 13:52:30 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.4341928,13.53932099
Tue Jan 22 13:52:33 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.45622941,13.83240434
Tue Jan 22 13:52:35 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.09868823,13.72625205
Tue Jan 22 13:52:37 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.72159364,13.71343313
Tue Jan 22 13:52:39 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.417145,13.74567854
Tue Jan 22 13:52:42 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,14.79081433,13.50955331
Tue Jan 22 13:52:44 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.44225426,13.64190511
Tue Jan 22 13:52:46 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.62703781,13.23883698
Tue Jan 22 13:52:48 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,16.94385857,13.56651152
Tue Jan 22 13:52:51 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.32728075,13.66456936
Tue Jan 22 13:53:20 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.29265648,14.31760575
Tue Jan 22 13:53:23 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,14.36577564,13.59687376
Tue Jan 22 13:53:25 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.76193341,15.32259986
Tue Jan 22 13:53:27 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.42543772,13.34637684
Tue Jan 22 13:53:29 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.57952864,13.46967606
Tue Jan 22 13:53:31 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.07417379,13.69664966
Tue Jan 22 13:53:34 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,14.63837524,15.44940101
Tue Jan 22 13:53:36 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.73500721,13.09227885
Tue Jan 22 13:53:38 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.19727474,13.6549882
Tue Jan 22 13:53:40 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.58088323,13.06231299
Tue Jan 22 13:53:43 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.39639691,13.62152041
Tue Jan 22 13:53:45 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.43148371,13.594462
Tue Jan 22 13:53:47 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.2855863,13.70705674
Tue Jan 22 13:53:49 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.21091958,13.82407871
Tue Jan 22 13:53:51 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.48718639,13.49815513
Tue Jan 22 13:53:54 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.60612453,13.33887713
Tue Jan 22 13:53:56 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.54160054,13.49822119
Tue Jan 22 13:53:58 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.548836,13.4743014
Tue Jan 22 13:54:00 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.41754155,13.58223781
Tue Jan 22 13:54:03 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.57946257,13.35248898
Tue Jan 22 13:54:05 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.54117109,13.63919594
Tue Jan 22 13:54:07 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.47060111,13.55755809
Tue Jan 22 13:54:09 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.36210321,13.65287385
Tue Jan 22 13:54:11 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.06918497,13.4169469
Tue Jan 22 13:54:14 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.293945,13.59879001
Tue Jan 22 13:54:16 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.34621164,13.61045254
Tue Jan 22 13:54:18 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.81757003,13.82923264
Tue Jan 22 13:54:20 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.6524773,13.54259174
Tue Jan 22 13:54:22 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.55048791,13.49224126
Tue Jan 22 13:54:25 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,14.36052257,13.57275579
Tue Jan 22 13:55:18 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.70907204,14.60018289
Tue Jan 22 13:55:21 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.28145647,13.34819404
Tue Jan 22 13:55:23 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.62743427,13.49240646
Tue Jan 22 13:55:25 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.7398968,13.43525015
Tue Jan 22 13:55:27 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,15.25457386,13.60087137
Tue Jan 22 13:55:30 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.70950158,13.73342136
Tue Jan 22 13:55:32 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.43277215,13.9127205
Tue Jan 22 13:55:34 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.30960514,13.60493514
Tue Jan 22 13:55:36 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,14.2508352,13.43455628
Tue Jan 22 13:55:39 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,26.13648677,13.57824011
Tue Jan 22 13:55:41 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.39553801,13.46049136
Tue Jan 22 13:55:43 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.66552749,13.54378112
Tue Jan 22 13:55:45 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.8884704,13.30339404
Tue Jan 22 13:55:48 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,14.06591944,14.31734141
Tue Jan 22 13:55:50 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.764114,13.43303657
Tue Jan 22 13:55:52 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.46951086,13.7104597
Tue Jan 22 13:55:54 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.54873686,13.52438763
Tue Jan 22 13:55:57 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.82758072,13.4468796
Tue Jan 22 13:55:59 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.6136903,13.38176096
Tue Jan 22 13:56:01 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.39249852,13.69648437
Tue Jan 22 13:56:03 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.51279116,13.6843924
Tue Jan 22 13:56:06 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.26543286,13.84737069
Tue Jan 22 13:56:08 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,16.43457218,13.74554641
Tue Jan 22 13:56:10 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.55570799,14.03198904
Tue Jan 22 13:56:12 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.45414805,13.35232377
Tue Jan 22 13:56:15 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.47083237,13.25036738
Tue Jan 22 13:56:17 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.64742251,13.69486563
Tue Jan 22 13:56:19 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.57107089,13.57866965
Tue Jan 22 13:56:21 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,14.01758435,13.64074871
Tue Jan 22 13:56:24 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.21326528,13.13658325
Tue Jan 22 13:57:09 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.62769853,13.61795225
Tue Jan 22 13:57:11 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.2168995,13.8007205
Tue Jan 22 13:57:14 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.51080885,13.46984126
Tue Jan 22 13:57:16 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.68971153,13.43432501
Tue Jan 22 13:57:18 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.51652453,13.5550142
Tue Jan 22 13:57:20 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.53852798,13.67246554
Tue Jan 22 13:57:23 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.52451975,13.37237808
Tue Jan 22 13:57:25 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.37247721,13.69519594
Tue Jan 22 13:57:27 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.25419979,13.84994765
Tue Jan 22 13:57:29 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.76137184,13.44060226
Tue Jan 22 13:57:31 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.43990856,13.93436074
Tue Jan 22 13:57:34 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.81152404,13.55554279
Tue Jan 22 13:57:36 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.9262333,13.55891267
Tue Jan 22 13:57:38 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.45302472,13.51441009
Tue Jan 22 13:57:40 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.26206297,13.77795703
Tue Jan 22 13:57:42 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.42652797,13.60424135
Tue Jan 22 13:57:45 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.9541507,13.3831817
Tue Jan 22 13:57:47 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.40756401,13.66113341
Tue Jan 22 13:57:49 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,15.92839133,13.66909565
Tue Jan 22 13:57:51 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.66096821,13.42286067
Tue Jan 22 13:57:54 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.97876419,13.42771727
Tue Jan 22 13:57:56 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.32671909,14.09945338
Tue Jan 22 13:57:58 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.61299651,13.76553465
Tue Jan 22 13:58:00 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.48811144,13.63519833
Tue Jan 22 13:58:03 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.18987416,13.78145921
Tue Jan 22 13:58:05 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.41199108,13.48854098
Tue Jan 22 13:58:07 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.33583764,13.48622835
Tue Jan 22 13:58:09 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.39117693,13.80461898
Tue Jan 22 13:58:11 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.58973752,13.75469804
Tue Jan 22 13:58:14 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.83841725,13.73206678
Tue Jan 22 13:59:04 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.76586505,13.48761584
Tue Jan 22 13:59:07 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.53406784,13.32830494
Tue Jan 22 13:59:09 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.84654469,14.37644705
Tue Jan 22 13:59:12 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,14.50374389,13.80703082
Tue Jan 22 13:59:14 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.74141667,13.41648429
Tue Jan 22 13:59:16 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.50344135,13.52243839
Tue Jan 22 13:59:19 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.56667672,13.29463887
Tue Jan 22 13:59:21 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.44027195,13.5065469
Tue Jan 22 13:59:23 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.537636,13.4375297
Tue Jan 22 13:59:25 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.55124776,13.64520894
Tue Jan 22 13:59:28 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.33818334,13.6758685
Tue Jan 22 13:59:30 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.3370601,13.92577078
Tue Jan 22 13:59:32 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.33821641,13.53188734
Tue Jan 22 13:59:34 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.39127606,13.80980606
Tue Jan 22 13:59:36 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.27412196,13.60698351
Tue Jan 22 13:59:39 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.58336105,13.28155561
Tue Jan 22 13:59:41 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.07638736,13.56218351
Tue Jan 22 13:59:43 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.43072378,13.49022596
Tue Jan 22 13:59:45 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.77818829,13.3220276
Tue Jan 22 13:59:48 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.71376353,13.59842654
Tue Jan 22 13:59:50 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.49884891,13.49547903
Tue Jan 22 13:59:52 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.50793456,13.43865311
Tue Jan 22 13:59:54 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.41142941,13.6649989
Tue Jan 22 13:59:56 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.26374796,13.47856335
Tue Jan 22 13:59:59 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.27696326,13.54169967
Tue Jan 22 14:00:01 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.46561239,13.5149056
Tue Jan 22 14:00:03 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.74528216,13.37739996
Tue Jan 22 14:00:05 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.2937798,13.71551449
Tue Jan 22 14:00:08 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.71868627,13.52736105
Tue Jan 22 14:00:10 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.15339979,13.5189362
Tue Jan 22 14:00:29 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.6305729,14.07589706
Tue Jan 22 14:00:31 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.21775849,13.32761115
Tue Jan 22 14:00:33 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.3549339,13.72671457
Tue Jan 22 14:00:35 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.17447828,13.61692806
Tue Jan 22 14:00:38 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.84254707,13.86990281
Tue Jan 22 14:00:40 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.41351086,13.52369384
Tue Jan 22 14:00:43 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.293945,13.69787204
Tue Jan 22 14:00:45 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.44932444,13.26890197
Tue Jan 22 14:00:47 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.4885079,13.28984825
Tue Jan 22 14:00:49 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.34545179,13.3220276
Tue Jan 22 14:00:51 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.70705665,13.66413991
Tue Jan 22 14:00:54 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.47962061,14.85266212
Tue Jan 22 14:00:56 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.31069548,13.509223
Tue Jan 22 14:00:58 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.66278533,13.58838294
Tue Jan 22 14:01:00 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.17781509,13.95758665
Tue Jan 22 14:01:02 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.61263304,13.67966793
Tue Jan 22 14:01:05 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.53201946,13.77201017
Tue Jan 22 14:01:07 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.63205961,13.65416229
Tue Jan 22 14:01:09 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.77607394,13.66248791
Tue Jan 22 14:01:11 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.34984586,13.62779766
Tue Jan 22 14:01:14 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.5230991,13.633249
Tue Jan 22 14:01:16 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.55504719,13.60328322
Tue Jan 22 14:01:18 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.3298907,13.79774707
Tue Jan 22 14:01:20 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.44423658,13.4607557
Tue Jan 22 14:01:22 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.80983914,13.65023074
Tue Jan 22 14:01:25 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.5461599,13.23335265
Tue Jan 22 14:01:27 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.4430471,13.38978935
Tue Jan 22 14:01:29 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.55128084,13.46263888
Tue Jan 22 14:01:32 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.69939183,16.31513844
Tue Jan 22 14:01:34 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.35242291,14.04477489
Tue Jan 22 14:02:21 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.32665303,13.5571947
Tue Jan 22 14:02:23 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.34984595,13.53370436
Tue Jan 22 14:02:25 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.42874146,13.59089384
Tue Jan 22 14:02:28 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.21366174,13.50410198
Tue Jan 22 14:02:30 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.15567942,13.9354509
Tue Jan 22 14:02:32 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.89316189,13.56697405
Tue Jan 22 14:02:34 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.54553209,13.4773079
Tue Jan 22 14:02:36 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.60341544,13.5889446
Tue Jan 22 14:02:39 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.37815973,13.76824374
Tue Jan 22 14:02:41 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.73989689,13.34974673
Tue Jan 22 14:02:43 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.28198506,13.33765475
Tue Jan 22 14:02:45 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.40412789,13.50849614
Tue Jan 22 14:02:48 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.60004546,13.38080293
Tue Jan 22 14:02:50 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.4729469,13.50634863
Tue Jan 22 14:02:52 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.25928774,13.87637834
Tue Jan 22 14:02:54 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.6201989,13.62452691
Tue Jan 22 14:02:56 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.10096786,13.52874871
Tue Jan 22 14:02:59 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.79163494,13.74448924
Tue Jan 22 14:03:01 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.43931383,13.68323609
Tue Jan 22 14:03:03 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.68591219,13.89312881
Tue Jan 22 14:03:05 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.62155349,13.7022662
Tue Jan 22 14:03:07 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.37621049,13.72380712
Tue Jan 22 14:03:10 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.31565121,13.76629459
Tue Jan 22 14:03:12 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.23074261,13.80561018
Tue Jan 22 14:03:14 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.33689481,13.61573868
Tue Jan 22 14:03:16 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.54318639,13.61521009
Tue Jan 22 14:03:18 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.40198046,13.4836513
Tue Jan 22 14:03:21 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.66919479,13.86435243
Tue Jan 22 14:03:23 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.4948513,13.61874517
Tue Jan 22 14:03:25 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.73824497,13.51325369
Tue Jan 22 14:03:52 GMT 2019,1,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.89035357,13.7432337
Tue Jan 22 14:03:55 GMT 2019,2,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.49564422,13.57989202
Tue Jan 22 14:03:57 GMT 2019,3,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.42573505,13.50281354
Tue Jan 22 14:04:00 GMT 2019,4,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.54450799,14.71152218
Tue Jan 22 14:04:02 GMT 2019,5,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,14.02961035,13.31449481
Tue Jan 22 14:04:04 GMT 2019,6,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.28370312,13.59370206
Tue Jan 22 14:04:07 GMT 2019,7,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.62657529,13.40872032
Tue Jan 22 14:04:09 GMT 2019,8,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.46673563,13.4903251
Tue Jan 22 14:04:11 GMT 2019,9,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.07969119,13.74386151
Tue Jan 22 14:04:13 GMT 2019,10,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.63883255,13.24491604
Tue Jan 22 14:04:16 GMT 2019,11,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.62376706,13.65673934
Tue Jan 22 14:04:18 GMT 2019,12,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.79262614,13.89190635
Tue Jan 22 14:04:21 GMT 2019,13,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.27309778,13.6593163
Tue Jan 22 14:04:23 GMT 2019,14,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,14.0678027,13.96386399
Tue Jan 22 14:04:25 GMT 2019,15,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.63020942,13.54860474
Tue Jan 22 14:04:27 GMT 2019,16,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,13.75245147,13.53522415
Tue Jan 22 14:04:30 GMT 2019,17,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,14.00165988,13.74316764
Tue Jan 22 14:04:33 GMT 2019,18,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,26.99340289,32.21828846
Tue Jan 22 14:04:35 GMT 2019,19,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,16.07894715,17.19455369
Tue Jan 22 14:04:38 GMT 2019,20,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,20.30997255,22.30043506
Tue Jan 22 14:04:46 GMT 2019,21,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,59.8054569,58.02231015
Tue Jan 22 14:04:50 GMT 2019,22,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,22.28893774,28.42756534
Tue Jan 22 14:04:53 GMT 2019,23,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,15.73766084,16.45614618
Tue Jan 22 14:04:55 GMT 2019,24,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,15.96235471,14.94113889
Tue Jan 22 14:04:58 GMT 2019,25,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,14.67726137,14.075831
Tue Jan 22 14:05:01 GMT 2019,26,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,17.8925222,16.32676798
Tue Jan 22 14:05:05 GMT 2019,27,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,44.65961238,32.5775807
Tue Jan 22 14:05:09 GMT 2019,28,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,22.22150647,21.69150489
Tue Jan 22 14:05:12 GMT 2019,29,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,14.24406235,14.36921168
Tue Jan 22 14:05:15 GMT 2019,30,[NoEditEdit{}],"import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}",1.54817E+12,TRUE,FALSE,15.27865876,15.54699641
