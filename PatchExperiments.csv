Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:07:28 GMT 2018,1,[RemoveLineEdit{lineNumber=0}],"
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:07:55 GMT 2018,1,"[InsertLineEdit{lineNumber=33, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
//this is a comment
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:08:39 GMT 2018,1,"[RemoveBlockEdit{startBlockInt=5, endBlockInt=1}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:08:39 GMT 2018,2,"[IfStatementEdit{lineIndex=0, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:08 GMT 2018,1,"[InsertLineEdit{lineNumber=39, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
//this is a comment
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:08 GMT 2018,2,"[IfStatementEdit{lineIndex=32, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:08 GMT 2018,3,"[InsertLineEdit{lineNumber=35, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
//this is a comment
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:08 GMT 2018,4,"[IfStatementEdit{lineIndex=10, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:41 GMT 2018,1,"[IfStatementEdit{lineIndex=1, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:41 GMT 2018,2,"[InsertLineEdit{lineNumber=26, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
//this is a comment
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:42 GMT 2018,3,"[InsertLineEdit{lineNumber=15, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
//this is a comment
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:42 GMT 2018,4,"[RemoveBlockEdit{startBlockInt=35, endBlockInt=32}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 12:26:55 GMT 2018,1,"[MoveLineEdit{sourceLineIndex=17, destinationLineIndex=27}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            a = c;
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 12:26:55 GMT 2018,2,"[InsertLineEdit{lineNumber=31, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
//this is a comment
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 13:04:43 GMT 2018,1,"[InsertLineEdit{lineNumber=27, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
//this is a comment
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 13:04:44 GMT 2018,2,"[IfStatementEdit{lineIndex=3, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 13:10:15 GMT 2018,1,"[RemoveBlockEdit{startBlockInt=22, endBlockInt=11}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,FALSE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 13:10:15 GMT 2018,2,"[InsertLineEdit{lineNumber=11, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
//this is a comment
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,FALSE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 13:11:16 GMT 2018,1,[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@2d710f1a],"package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 13:11:16 GMT 2018,2,"[IfStatementEdit{lineIndex=24, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Tue Dec 04 21:22:14 GMT 2018,1,"[InsertLineEdit{lineNumber=42, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
//this is a comment
}",1.54396E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Tue Dec 04 21:22:15 GMT 2018,2,"[IfStatementEdit{lineIndex=22, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54396E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Tue Dec 04 21:23:14 GMT 2018,1,"[IfStatementEdit{lineIndex=10, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54396E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Tue Dec 04 21:23:14 GMT 2018,2,[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@74bf1791],"package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54396E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Tue Dec 04 21:23:14 GMT 2018,3,"[SwapLineEdit{firstLineIndex=30, secondLineIndex=29}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return ISOCELES;
        } else if (a == b || b == c) {
            return EQUALATERAL;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54396E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,Passed Unit Tests?,Opacitor measurement 1,Opacitor measurement 2
Thu Dec 06 18:02:48 GMT 2018,1,"[SwapLineEdit{firstLineIndex=5, secondLineIndex=36}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
        } catch (InterruptedException e) {
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
    static final int ISOCELES = 3;
            Thread.sleep(100);
            // do nothing
        }
    }
}",1.54412E+12,FALSE,FALSE,0,0
Date,Repetitions,Patch,Output,Time,Compiled,Passed Unit Tests?,Opacitor measurement 1,Opacitor measurement 2
Thu Dec 06 18:02:48 GMT 2018,2,"[MoveLineEdit{sourceLineIndex=13, destinationLineIndex=2}]","
public class Triangle {
        }
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54412E+12,FALSE,FALSE,0,0
Date,Repetitions,Patch,Output,Time,Compiled,Passed Unit Tests?,Opacitor measurement 1,Opacitor measurement 2
Thu Dec 06 18:02:48 GMT 2018,3,"[MoveLineEdit{sourceLineIndex=37, destinationLineIndex=29}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
        } catch (InterruptedException e) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
            // do nothing
        }
    }
}",1.54412E+12,FALSE,FALSE,0,0
Date,Repetitions,Patch,Output,Time,Compiled,Passed Unit Tests?,Opacitor measurement 1,Opacitor measurement 2
Thu Dec 06 18:02:50 GMT 2018,4,"[IfStatementEdit{lineIndex=25, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54412E+12,TRUE,TRUE,0,0
Date,Repetitions,Patch,"
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",Time,Compiled,Passed Unit Tests?,Opacitor measurement 1,Opacitor measurement 2
Thu Dec 06 18:02:50 GMT 2018,5,[RemoveLineEdit{lineNumber=15}],"
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54412E+12,FALSE,FALSE,0,0
Date,Repetitions,Patch,"
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",Time,Compiled,Passed Unit Tests?,Opacitor measurement 1,Opacitor measurement 2
Thu Dec 06 18:02:52 GMT 2018,6,"[InsertLineEdit{lineNumber=23, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54412E+12,TRUE,TRUE,0,0
,,,"
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",,,,,
,,,"
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",,,,,
,,,"
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",,,,,"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:49 GMT 2018","1","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@26e356f0]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120027472","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:49 GMT 2018","2","[SwapLineEdit{firstLineIndex=6, secondLineIndex=27}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        } else if (a == b || b == c) {
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
    public static int classifyTriangle(int a, int b, int c) {
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120029278","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:51 GMT 2018","3","[IfStatementEdit{lineIndex=40, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120029326","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:51 GMT 2018","4","[SwapLineEdit{firstLineIndex=26, secondLineIndex=4}]","
public class Triangle {
    static final int INVALID = 0;
        } else if (a == b && b == c) {
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
    static final int EQUALATERAL = 2;
            return INVALID;
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120031051","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:52 GMT 2018","5","[IfStatementEdit{lineIndex=32, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120031096","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:54 GMT 2018","6","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@3d3f761a]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120032841","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:56 GMT 2018","7","[InsertLineEdit{lineNumber=38, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
//this is a comment
            // do nothing
        }
    }
}","1544120034651","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:58 GMT 2018","8","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@2873d672]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120036376","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:58 GMT 2018","9","[SwapLineEdit{firstLineIndex=21, secondLineIndex=14}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
            b = c;
        }
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
        if (a > c) {
            int tmp = b;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120038067","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:58 GMT 2018","10","[RemoveLineEdit{lineNumber=12}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
null
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120038072","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:58 GMT 2018","11","[SwapLineEdit{firstLineIndex=3, secondLineIndex=27}]","
public class Triangle {
        } else if (a == b || b == c) {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
    static final int SCALENE = 1;
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120038076","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:59 GMT 2018","12","[IfStatementEdit{lineIndex=32, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120038104","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:59 GMT 2018","13","[RemoveLineEdit{lineNumber=17}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
null
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120039802","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:59 GMT 2018","14","[RemoveLineEdit{lineNumber=8}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
null
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120039806","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:59 GMT 2018","15","[SwapLineEdit{firstLineIndex=33, secondLineIndex=26}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
    }
            return INVALID;
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        } else if (a == b && b == c) {
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120039814","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:59 GMT 2018","16","[RemoveLineEdit{lineNumber=18}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
null
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120039824","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:20:43 GMT 2018","1","[RemoveLineEdit{lineNumber=1}]","
null
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120442994","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:20:43 GMT 2018","2","[MoveLineEdit{sourceLineIndex=26, destinationLineIndex=7}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        } else if (a == b && b == c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120443011","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:20:43 GMT 2018","3","[RemoveLineEdit{lineNumber=35}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
null
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120443015","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:20:45 GMT 2018","4","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120443367","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:20:45 GMT 2018","5","[RemoveBlockEdit{startBlockInt=3, endBlockInt=23}]","
public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
            int tmp = a;
            b = tmp;
        if (a > c) {
            a = c;
        }
            int tmp = b;
            c = tmp;
        if (a + b <= c) {
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
        } else {
        }
    private static void delay() {
            Thread.sleep(100);
            // do nothing
    }","1544120445153","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:30:11 GMT 2018","1","[RemoveLineEdit{lineNumber=25}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
null
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544121011023","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:30:13 GMT 2018","2","[IfStatementEdit{lineIndex=32, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544121011529","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:30:13 GMT 2018","3","[SwapLineEdit{firstLineIndex=4, secondLineIndex=39}]","
public class Triangle {
    static final int INVALID = 0;
    }
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
    static final int EQUALATERAL = 2;
        }
}","1544121013346","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:30:15 GMT 2018","4","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@62452cc9]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544121013388","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:30:15 GMT 2018","5","[SwapLineEdit{firstLineIndex=31, secondLineIndex=3}]","
public class Triangle {
            return SCALENE;
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
    static final int SCALENE = 1;
        } else {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544121015093","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:30:15 GMT 2018","6","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@285d851a]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
    }
}","1544121015101","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:17 GMT 2018","1","[IfStatementEdit{lineIndex=12, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124256165","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:19 GMT 2018","2","[InsertLineEdit{lineNumber=27, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
//this is a comment
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124258041","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:19 GMT 2018","3","[RemoveBlockEdit{startBlockInt=3, endBlockInt=11}]","
public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
            int tmp = a;
            b = tmp;
        if (a > c) {
            a = c;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124259806","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:21 GMT 2018","4","[RemoveBlockEdit{startBlockInt=17, endBlockInt=9}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124259856","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:23 GMT 2018","5","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@3d4d3fe7]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124261629","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:23 GMT 2018","6","[RemoveLineEdit{lineNumber=39}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
null
    }
}","1544124263334","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:25 GMT 2018","7","[IfStatementEdit{lineIndex=22, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124263359","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:26 GMT 2018","8","[RemoveBlockEdit{startBlockInt=10, endBlockInt=8}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124265092","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:26 GMT 2018","9","[RemoveLineEdit{lineNumber=23}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
null
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124266775","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:28 GMT 2018","10","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@6cf31447]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124266814","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:30 GMT 2018","11","[InsertLineEdit{lineNumber=7, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
//this is a comment
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124268534","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:30 GMT 2018","12","[SwapLineEdit{firstLineIndex=19, secondLineIndex=12}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
        if (b > c) {
            a = b;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
            b = tmp;
        }
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124270263","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:31 GMT 2018","13","[MoveLineEdit{sourceLineIndex=0, destinationLineIndex=27}]","public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;

        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124270287","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:33 GMT 2018","14","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@69fe0ed4]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124272004","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:35 GMT 2018","15","[IfStatementEdit{lineIndex=40, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124273775","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:35 GMT 2018","16","[SwapLineEdit{firstLineIndex=2, secondLineIndex=6}]","
        delay();
public class Triangle {
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124275462","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:37 GMT 2018","17","[RemoveBlockEdit{startBlockInt=25, endBlockInt=4}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124275499","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:37 GMT 2018","18","[SwapLineEdit{firstLineIndex=32, secondLineIndex=13}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
        }
            b = tmp;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
        }
            return SCALENE;
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124277201","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:37 GMT 2018","19","[SwapLineEdit{firstLineIndex=16, secondLineIndex=6}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
            a = c;
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
    public static int classifyTriangle(int a, int b, int c) {
            int tmp = a;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124277205","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:37 GMT 2018","20","[SwapLineEdit{firstLineIndex=19, secondLineIndex=34}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        try {
        }
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
        if (b > c) {
    private static void delay() {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124277211","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:38 GMT 2018","21","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@17229821]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124277240","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:38 GMT 2018","22","[SwapLineEdit{firstLineIndex=2, secondLineIndex=15}]","
            a = c;
public class Triangle {
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
    static final int INVALID = 0;
            int tmp = a;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124278935","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:38 GMT 2018","23","[RemoveLineEdit{lineNumber=39}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
null
    }
}","1544124278938","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:40 GMT 2018","24","[InsertLineEdit{lineNumber=23, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
//this is a comment
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124278963","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:40 GMT 2018","25","[RemoveLineEdit{lineNumber=5}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
null
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124280678","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:42 GMT 2018","26","[RemoveBlockEdit{startBlockInt=32, endBlockInt=20}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124280711","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:44 GMT 2018","27","[IfStatementEdit{lineIndex=14, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124282425","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:27:56 GMT 2018","1","[MoveLineEdit{sourceLineIndex=11, destinationLineIndex=35}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            a = b;
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124476609","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:27:58 GMT 2018","2","[RemoveBlockEdit{startBlockInt=37, endBlockInt=34}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124476764","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:28:00 GMT 2018","3","[IfStatementEdit{lineIndex=29, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124478659","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:28:02 GMT 2018","4","[IfStatementEdit{lineIndex=34, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124480465","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:28:56 GMT 2018","1","[SwapLineEdit{firstLineIndex=37, secondLineIndex=12}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
        } catch (InterruptedException e) {
            a = b;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            b = tmp;
            Thread.sleep(100);
            // do nothing
        }
    }
}","1544124536871","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:28:56 GMT 2018","2","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@4ddbbdf8]","
public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
            int tmp = a;
            b = tmp;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
    static final int SCALENE = 1;
        }
    static final int EQUALATERAL = 2;
        if (a + b <= c) {
    static final int ISOCELES = 3;
            return INVALID;
    public static int classifyTriangle(int a, int b, int c) {
        } else if (a == b && b == c) {
        delay();
            return EQUALATERAL;
        // Sort the sides so that a <= b <= c
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124536891","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:28:59 GMT 2018","3","[MoveLineEdit{sourceLineIndex=19, destinationLineIndex=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124537220","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:28:59 GMT 2018","4","[SwapLineEdit{firstLineIndex=2, secondLineIndex=24}]","
            return INVALID;
public class Triangle {
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
    static final int INVALID = 0;
        if (a + b <= c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124539025","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:29:00 GMT 2018","5","[RemoveBlockEdit{startBlockInt=38, endBlockInt=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124539122","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:29:00 GMT 2018","6","[SwapLineEdit{firstLineIndex=33, secondLineIndex=4}]","
public class Triangle {
    static final int INVALID = 0;
    }
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
    static final int EQUALATERAL = 2;
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124540853","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:29:02 GMT 2018","7","[IfStatementEdit{lineIndex=12, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124540897","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:30:38 GMT 2018","1","[RemoveLineEdit{lineNumber=17}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
null
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124638510","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:30:40 GMT 2018","2","[RemoveBlockEdit{startBlockInt=23, endBlockInt=6}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124638863","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:20:56 GMT 2018","1","[SwapLineEdit{firstLineIndex=18, secondLineIndex=38}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
        }
            c = tmp;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
        }
            // do nothing
    }
}","1544174456621","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:20:58 GMT 2018","2","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@1e097d59]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544174456729","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:21:00 GMT 2018","3","[IfStatementEdit{lineIndex=7, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544174458709","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:21:02 GMT 2018","4","[InsertLineEdit{lineNumber=20, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
//this is a comment
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544174460472","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:21:03 GMT 2018","5","[InsertLineEdit{lineNumber=36, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
//this is a comment
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544174462235","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:21:05 GMT 2018","6","[InsertLineEdit{lineNumber=40, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
//this is a comment
    }
}","1544174463967","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:21:07 GMT 2018","7","[InsertLineEdit{lineNumber=29, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
//this is a comment
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544174465693","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:21:09 GMT 2018","8","[IfStatementEdit{lineIndex=6, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544174467437","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:21:09 GMT 2018","9","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@7f572c37]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            c = tmp;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
    private static void delay() {
            // do nothing
        try {
        }
    }
}","1544174469129","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:23 GMT 2018","1","[IfStatementEdit{lineIndex=6, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176881562","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:33 GMT 2018","1","[SwapLineEdit{firstLineIndex=1, secondLineIndex=10}]","            a = b;

    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
public class Triangle {
            int tmp = a;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176893768","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:36 GMT 2018","2","[IfStatementEdit{lineIndex=32, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176894186","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:36 GMT 2018","3","[SwapLineEdit{firstLineIndex=11, secondLineIndex=6}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
            a = b;
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
    public static int classifyTriangle(int a, int b, int c) {
            int tmp = a;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176896024","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:37 GMT 2018","4","[IfStatementEdit{lineIndex=33, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176896071","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:39 GMT 2018","5","[IfStatementEdit{lineIndex=35, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176897828","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:41 GMT 2018","6","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176899582","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:41 GMT 2018","7","[SwapLineEdit{firstLineIndex=1, secondLineIndex=27}]","        } else if (a == b || b == c) {

    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
public class Triangle {
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176901277","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:41 GMT 2018","8","[SwapLineEdit{firstLineIndex=35, secondLineIndex=1}]","        try {

    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
public class Triangle {
    private static void delay() {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176901282","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:43 GMT 2018","9","[InsertLineEdit{lineNumber=37, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
//this is a comment
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176901318","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:44 GMT 2018","10","[InsertLineEdit{lineNumber=31, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
//this is a comment
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176903031","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:46 GMT 2018","11","[RemoveBlockEdit{startBlockInt=25, endBlockInt=20}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176904771","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:48 GMT 2018","12","[RemoveBlockEdit{startBlockInt=37, endBlockInt=31}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176906475","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:48 GMT 2018","13","[RemoveLineEdit{lineNumber=1}]","
null
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176908166","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:49 GMT 2018","14","[IfStatementEdit{lineIndex=7, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176908192","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:49 GMT 2018","15","[SwapLineEdit{firstLineIndex=39, secondLineIndex=38}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        }
            // do nothing
        } catch (InterruptedException e) {
    }
}","1544176909871","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:49 GMT 2018","16","[RemoveLineEdit{lineNumber=22}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
null
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176909875","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:49 GMT 2018","17","[SwapLineEdit{firstLineIndex=30, secondLineIndex=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        } else {
        }
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
        if (b > c) {
            return ISOCELES;
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176909880","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:49 GMT 2018","18","[RemoveLineEdit{lineNumber=0}]","null
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176909883","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:49 GMT 2018","19","[RemoveLineEdit{lineNumber=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
null
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176909887","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:51 GMT 2018","20","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@3078cac]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176909912","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:51 GMT 2018","21","[RemoveLineEdit{lineNumber=18}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
null
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176911596","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:51 GMT 2018","22","[MoveLineEdit{sourceLineIndex=3, destinationLineIndex=27}]","
public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
    static final int SCALENE = 1;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176911600","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:53 GMT 2018","23","[InsertLineEdit{lineNumber=31, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
//this is a comment
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176911655","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:55 GMT 2018","24","[InsertLineEdit{lineNumber=35, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
//this is a comment
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176913359","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:56 GMT 2018","25","[IfStatementEdit{lineIndex=2, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176915069","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:58 GMT 2018","26","[RemoveBlockEdit{startBlockInt=39, endBlockInt=26}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176916770","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:58 GMT 2018","27","[SwapLineEdit{firstLineIndex=25, secondLineIndex=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
            return INVALID;
        }
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (b > c) {
        if (a + b <= c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176918445","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:58 GMT 2018","28","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@5b8572df]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
        }
            int tmp = b;
            c = tmp;
        }
        if (b > c) {
        if (a + b <= c) {
            int tmp = b;
            return INVALID;
            b = c;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176918450","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:00 GMT 2018","29","[InsertLineEdit{lineNumber=30, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
//this is a comment
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176918478","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:01 GMT 2018","30","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@73f6e07]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176920189","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:03 GMT 2018","31","[RemoveBlockEdit{startBlockInt=20, endBlockInt=9}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176921896","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:05 GMT 2018","32","[InsertLineEdit{lineNumber=12, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
//this is a comment
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176923622","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:05 GMT 2018","33","[MoveLineEdit{sourceLineIndex=20, destinationLineIndex=26}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            int tmp = b;
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176925321","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:07 GMT 2018","34","[RemoveBlockEdit{startBlockInt=28, endBlockInt=22}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176925340","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:07 GMT 2018","35","[SwapLineEdit{firstLineIndex=9, secondLineIndex=3}]","
public class Triangle {
        if (a > b) {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
    static final int SCALENE = 1;
        // Sort the sides so that a <= b <= c
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176927010","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:07 GMT 2018","36","[SwapLineEdit{firstLineIndex=9, secondLineIndex=35}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
            Thread.sleep(100);
        // Sort the sides so that a <= b <= c
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        if (a > b) {
        try {
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176927014","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:08 GMT 2018","37","[RemoveBlockEdit{startBlockInt=36, endBlockInt=36}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176927042","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:10 GMT 2018","38","[SwapLineEdit{firstLineIndex=36, secondLineIndex=37}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
            // do nothing
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
        }
    }
}","1544176928782","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:10 GMT 2018","39","[RemoveBlockEdit{startBlockInt=9, endBlockInt=25}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
            int tmp = a;
            b = tmp;
        if (a > c) {
            a = c;
        }
            int tmp = b;
            c = tmp;
        if (a + b <= c) {
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
        } else {
        }
    private static void delay() {
            Thread.sleep(100);
            // do nothing
    }
}","1544176930462","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:12 GMT 2018","40","[IfStatementEdit{lineIndex=0, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176930484","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:13 GMT 2018","41","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@30a01dd8]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176932167","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:13 GMT 2018","42","[MoveLineEdit{sourceLineIndex=10, destinationLineIndex=31}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
            int tmp = a;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176933861","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:15 GMT 2018","43","[InsertLineEdit{lineNumber=0, lineContents='//this is a comment'}]","//this is a comment

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176933884","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:17 GMT 2018","44","[RemoveBlockEdit{startBlockInt=26, endBlockInt=3}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176935575","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:17 GMT 2018","45","[MoveLineEdit{sourceLineIndex=14, destinationLineIndex=3}]","
public class Triangle {
    static final int INVALID = 0;
        if (a > c) {
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176937281","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:18 GMT 2018","46","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@37c74e4e]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        } else if (a == b || b == c) {
            return ISOCELES;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176937301","true","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:19 GMT 2018","47","[InsertLineEdit{lineNumber=15, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
//this is a comment
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176938182","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:21 GMT 2018","48","[MoveLineEdit{sourceLineIndex=24, destinationLineIndex=8}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        if (a + b <= c) {
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176939886","true","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:21 GMT 2018","49","[MoveLineEdit{sourceLineIndex=6, destinationLineIndex=26}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
    public static int classifyTriangle(int a, int b, int c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176941466","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:21 GMT 2018","50","[MoveLineEdit{sourceLineIndex=10, destinationLineIndex=20}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            int tmp = a;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176941488","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:23 GMT 2018","51","[IfStatementEdit{lineIndex=12, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176941517","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:23 GMT 2018","52","[RemoveLineEdit{lineNumber=3}]","
public class Triangle {
    static final int INVALID = 0;
null
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176943210","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:23 GMT 2018","53","[SwapLineEdit{firstLineIndex=15, secondLineIndex=7}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
            int tmp = a;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        delay();
        if (a > c) {
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176943232","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:23 GMT 2018","54","[RemoveBlockEdit{startBlockInt=25, endBlockInt=30}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
        } else {
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176943235","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:23 GMT 2018","55","[MoveLineEdit{sourceLineIndex=26, destinationLineIndex=0}]","        } else if (a == b && b == c) {

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176943238","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:23 GMT 2018","56","[RemoveBlockEdit{startBlockInt=15, endBlockInt=18}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            a = c;
        }
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176943241","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:24 GMT 2018","57","[IfStatementEdit{lineIndex=24, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176943258","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:24 GMT 2018","58","[MoveLineEdit{sourceLineIndex=24, destinationLineIndex=31}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        if (a + b <= c) {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176944946","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:24 GMT 2018","59","[RemoveLineEdit{lineNumber=20}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
null
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176944949","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:31 GMT 2018","1","[IfStatementEdit{lineIndex=27, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196211006","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:31 GMT 2018","2","[SwapLineEdit{firstLineIndex=35, secondLineIndex=25}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        try {
        if (a + b <= c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
            return INVALID;
    private static void delay() {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196211023","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:51 GMT 2018","1","[RemoveLineEdit{lineNumber=20}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
null
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196231463","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:51 GMT 2018","2","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@5454d35e]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196231480","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:51 GMT 2018","3","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@74589991]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
    static final int EQUALATERAL = 2;
        classifyTriangle(1,1,1)
    static final int ISOCELES = 3;
    }
}","1544196231503","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:51 GMT 2018","4","[MoveLineEdit{sourceLineIndex=29, destinationLineIndex=11}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            return ISOCELES;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196231512","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:51 GMT 2018","5","[InsertLineEdit{lineNumber=4, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
//this is a comment
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196231519","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:51 GMT 2018","6","[RemoveLineEdit{lineNumber=23}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
null
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196231528","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:51 GMT 2018","7","[RemoveLineEdit{lineNumber=5}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
null
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196231536","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:04 GMT 2018","1","[RemoveLineEdit{lineNumber=23}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
null
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196244281","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:04 GMT 2018","2","[RemoveLineEdit{lineNumber=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
null
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196244302","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:04 GMT 2018","3","[MoveLineEdit{sourceLineIndex=1, destinationLineIndex=29}]","
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
public class Triangle {
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196244322","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:04 GMT 2018","4","[RemoveLineEdit{lineNumber=3}]","
public class Triangle {
    static final int INVALID = 0;
null
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196244329","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","1","[MoveLineEdit{sourceLineIndex=41, destinationLineIndex=45}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}
","1544196280442","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","2","[MoveLineEdit{sourceLineIndex=41, destinationLineIndex=8}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();

        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280454","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","3","[SwapLineEdit{firstLineIndex=36, secondLineIndex=15}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
            Thread.sleep(100);
        if (a > c) {
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
            int tmp = a;
        try {
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280468","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","4","[MoveLineEdit{sourceLineIndex=24, destinationLineIndex=41}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

        if (a + b <= c) {
    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280476","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","5","[InsertLineEdit{lineNumber=15, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
//this is a comment
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280484","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","6","[IfStatementEdit{lineIndex=43, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280500","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","7","[RemoveBlockEdit{startBlockInt=44, endBlockInt=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280505","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","8","[MoveLineEdit{sourceLineIndex=1, destinationLineIndex=3}]","
    static final int INVALID = 0;
    static final int SCALENE = 1;
public class Triangle {
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280510","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","9","[RemoveLineEdit{lineNumber=3}]","
public class Triangle {
    static final int INVALID = 0;
null
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280515","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","10","[RemoveBlockEdit{startBlockInt=16, endBlockInt=27}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            c = tmp;
        if (b > c) {
            b = c;
        }
            return INVALID;
            return EQUALATERAL;
            return ISOCELES;
            return SCALENE;
    }
        try {
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280523","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","11","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@60d1a32f]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280528","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:13 GMT 2018","1","[IfStatementEdit{lineIndex=31, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196313400","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:13 GMT 2018","2","[RemoveBlockEdit{startBlockInt=35, endBlockInt=41}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
            Thread.sleep(100);
            // do nothing
    }
    public static void main(String[] args) {
    }","1544196313422","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:13 GMT 2018","3","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@492691d7]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196313441","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:13 GMT 2018","4","[MoveLineEdit{sourceLineIndex=37, destinationLineIndex=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        } catch (InterruptedException e) {
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196313449","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:13 GMT 2018","5","[IfStatementEdit{lineIndex=31, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196313455","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","1","[RemoveLineEdit{lineNumber=15}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
null
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324928","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","2","[IfStatementEdit{lineIndex=13, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324941","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","3","[RemoveBlockEdit{startBlockInt=28, endBlockInt=21}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324952","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","4","[RemoveBlockEdit{startBlockInt=38, endBlockInt=36}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324956","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","5","[RemoveBlockEdit{startBlockInt=14, endBlockInt=0}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324962","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","6","[IfStatementEdit{lineIndex=19, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324968","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","7","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@626c44e7]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324975","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","8","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@8c11eee]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324981","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","9","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@47a86fbb]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324987","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","1","[InsertLineEdit{lineNumber=30, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
//this is a comment
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355502","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","2","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355515","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","3","[SwapLineEdit{firstLineIndex=31, secondLineIndex=9}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
            return SCALENE;
        // Sort the sides so that a <= b <= c
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        if (a > b) {
        } else {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355536","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","4","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@76f4b65]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355543","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","5","[MoveLineEdit{sourceLineIndex=8, destinationLineIndex=43}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
        // Sort the sides so that a <= b <= c
    }
}","1544196355547","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","6","[SwapLineEdit{firstLineIndex=38, secondLineIndex=39}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
    }
        } catch (InterruptedException e) {
            // do nothing
        }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355553","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","7","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@1817f1eb]","
public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
            int tmp = a;
            b = tmp;
        if (a > c) {
            a = c;
        }
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            Thread.sleep(100);
            int tmp = b;
        } catch (InterruptedException e) {
            b = c;
            // do nothing
            c = tmp;
        }
        }
    }
        if (a + b <= c) {

            return INVALID;
    public static void main(String[] args) {
        } else if (a == b && b == c) {
        classifyTriangle(1,1,1)
            return EQUALATERAL;
    }
}","1544196355563","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","8","[InsertLineEdit{lineNumber=19, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
//this is a comment
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355572","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","9","[RemoveBlockEdit{startBlockInt=41, endBlockInt=4}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355577","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","10","[IfStatementEdit{lineIndex=23, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355581","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","11","[InsertLineEdit{lineNumber=25, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
//this is a comment
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355585","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","12","[IfStatementEdit{lineIndex=3, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355588","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","13","[InsertLineEdit{lineNumber=40, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
//this is a comment
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355593","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","14","[SwapLineEdit{firstLineIndex=27, secondLineIndex=43}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
    }
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
            return EQUALATERAL;
        classifyTriangle(1,1,1)
}","1544196355597","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","15","[RemoveBlockEdit{startBlockInt=43, endBlockInt=0}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355600","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","16","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@5ae76500]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355603","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","17","[InsertLineEdit{lineNumber=41, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
//this is a comment

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355610","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","18","[IfStatementEdit{lineIndex=4, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355616","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","19","[RemoveBlockEdit{startBlockInt=38, endBlockInt=13}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355619","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","20","[RemoveLineEdit{lineNumber=31}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
null
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355625","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","21","[RemoveLineEdit{lineNumber=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
null
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355629","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","22","[InsertLineEdit{lineNumber=0, lineContents='//this is a comment'}]","//this is a comment

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355634","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","23","[IfStatementEdit{lineIndex=7, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355639","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","24","[RemoveBlockEdit{startBlockInt=22, endBlockInt=2}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355645","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","25","[IfStatementEdit{lineIndex=22, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355650","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:16 GMT 2018","1","[SwapLineEdit{firstLineIndex=41, secondLineIndex=23}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;

            c = tmp;
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
        }
    }
    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196376010","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:16 GMT 2018","2","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@6f7923a5]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196376031","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:16 GMT 2018","3","[InsertLineEdit{lineNumber=12, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
//this is a comment
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196376046","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:16 GMT 2018","4","[IfStatementEdit{lineIndex=20, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196376051","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:16 GMT 2018","5","[InsertLineEdit{lineNumber=16, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
//this is a comment
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196376055","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:16 GMT 2018","6","[RemoveLineEdit{lineNumber=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
null
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196376062","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:16 GMT 2018","7","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196376070","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:25 GMT 2018","1","[InsertLineEdit{lineNumber=19, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
//this is a comment
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196385197","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","1","[SwapLineEdit{firstLineIndex=37, secondLineIndex=29}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } catch (InterruptedException e) {
        } else if (a == b || b == c) {
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            return ISOCELES;
            Thread.sleep(100);
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396332","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","2","[SwapLineEdit{firstLineIndex=25, secondLineIndex=15}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
            return INVALID;
        if (a > c) {
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
            int tmp = a;
        if (a + b <= c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396348","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","3","[InsertLineEdit{lineNumber=26, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
//this is a comment
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396368","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","4","[RemoveLineEdit{lineNumber=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
null
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396384","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","5","[MoveLineEdit{sourceLineIndex=15, destinationLineIndex=36}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
            int tmp = a;
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396412","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","6","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@2a76840c]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            b = tmp;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
        }
            c = tmp;
        if (b > c) {
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396425","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","7","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@613a8ee1]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396433","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","8","[InsertLineEdit{lineNumber=15, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
//this is a comment
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396437","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","9","[IfStatementEdit{lineIndex=26, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396442","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","10","[RemoveBlockEdit{startBlockInt=8, endBlockInt=9}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396450","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","11","[RemoveLineEdit{lineNumber=40}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
null

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396469","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","12","[RemoveBlockEdit{startBlockInt=33, endBlockInt=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396476","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:34 GMT 2018","1","[IfStatementEdit{lineIndex=35, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196512427","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:36 GMT 2018","2","[InsertLineEdit{lineNumber=36, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
//this is a comment
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196514470","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:38 GMT 2018","3","[InsertLineEdit{lineNumber=25, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
//this is a comment
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196516306","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:38 GMT 2018","4","[RemoveLineEdit{lineNumber=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
null
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196518038","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:39 GMT 2018","5","[SwapLineEdit{firstLineIndex=21, secondLineIndex=8}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
            b = c;
        delay();
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
        // Sort the sides so that a <= b <= c
            int tmp = b;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196518091","true","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:40 GMT 2018","6","[InsertLineEdit{lineNumber=24, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
//this is a comment
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196519132","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:42 GMT 2018","7","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@7fedfe27]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196520898","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:44 GMT 2018","8","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@1a35993f]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196522683","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:46 GMT 2018","9","[RemoveBlockEdit{startBlockInt=36, endBlockInt=11}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196524432","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:47 GMT 2018","10","[InsertLineEdit{lineNumber=28, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
//this is a comment
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196526190","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:39:47 GMT 2018","1","[MoveLineEdit{sourceLineIndex=17, destinationLineIndex=30}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            c = tmp;
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544197187545","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:16:40 GMT 2018","1","[MoveLineEdit{sourceLineIndex=12, destinationLineIndex=6}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
            b = tmp;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203000040","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:17:20 GMT 2018","1","[SwapLineEdit{firstLineIndex=43, secondLineIndex=14}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        classifyTriangle(1,1,1);
        }
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

        if (a > c) {
    public static void main(String[] args) {
    }
}","1544203040112","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:17:20 GMT 2018","2","[MoveLineEdit{sourceLineIndex=31, destinationLineIndex=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
            return SCALENE;
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203040546","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:17:20 GMT 2018","3","[SwapLineEdit{firstLineIndex=42, secondLineIndex=14}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
    public static void main(String[] args) {
        }
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
        if (a > c) {

        classifyTriangle(1,1,1);
    }
}","1544203040565","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:17:20 GMT 2018","4","[RemoveLineEdit{lineNumber=12}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
null
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203040583","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:17:20 GMT 2018","5","[MoveLineEdit{sourceLineIndex=30, destinationLineIndex=31}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
            return SCALENE;
        } else {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203040670","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:17:20 GMT 2018","6","[MoveLineEdit{sourceLineIndex=32, destinationLineIndex=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203040691","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:17:20 GMT 2018","7","[SwapLineEdit{firstLineIndex=8, secondLineIndex=43}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
    }
        delay();
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        // Sort the sides so that a <= b <= c
        classifyTriangle(1,1,1);
}","1544203040711","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:02 GMT 2018","1","[RemoveLineEdit{lineNumber=5}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
null
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203262529","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:02 GMT 2018","2","[RemoveLineEdit{lineNumber=43}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
null
    }
}","1544203262553","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:02 GMT 2018","3","[RemoveBlockEdit{startBlockInt=32, endBlockInt=37}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
    }
        try {
        } catch (InterruptedException e) {
        }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203262617","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:06 GMT 2018","4","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@64a40280]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203263066","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:07 GMT 2018","5","[SwapLineEdit{firstLineIndex=29, secondLineIndex=10}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
            return ISOCELES;
        if (a > b) {
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
            int tmp = a;
        } else if (a == b || b == c) {
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203267066","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:37 GMT 2018","1","[RemoveLineEdit{lineNumber=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
null
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203297955","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:38 GMT 2018","2","[RemoveLineEdit{lineNumber=44}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
null
}","1544203297992","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:42 GMT 2018","3","[InsertLineEdit{lineNumber=1, lineContents='//this is a comment'}]","
//this is a comment
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203298445","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:42 GMT 2018","4","[RemoveLineEdit{lineNumber=32}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
null
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203302358","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:46 GMT 2018","5","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203302456","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:57 GMT 2018","1","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@6892b3b6]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203314062","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:01 GMT 2018","2","[IfStatementEdit{lineIndex=38, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203317931","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:01 GMT 2018","3","[MoveLineEdit{sourceLineIndex=44, destinationLineIndex=37}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
    }
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
}","1544203321623","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:01 GMT 2018","4","[RemoveLineEdit{lineNumber=11}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
null
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203321640","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:05 GMT 2018","5","[IfStatementEdit{lineIndex=11, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203321715","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:05 GMT 2018","6","[RemoveLineEdit{lineNumber=25}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
null
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203325305","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:05 GMT 2018","7","[RemoveLineEdit{lineNumber=10}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
null
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203325320","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:09 GMT 2018","8","[InsertLineEdit{lineNumber=39, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
//this is a comment
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203325398","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:09 GMT 2018","9","[MoveLineEdit{sourceLineIndex=6, destinationLineIndex=25}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
    public static int classifyTriangle(int a, int b, int c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203329069","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:12 GMT 2018","10","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@2e1792e7]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203329131","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:16 GMT 2018","11","[InsertLineEdit{lineNumber=22, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
//this is a comment
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203332764","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:16 GMT 2018","12","[RemoveLineEdit{lineNumber=0}]","null
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203336394","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:20 GMT 2018","13","[InsertLineEdit{lineNumber=36, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
//this is a comment
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203336452","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:20 GMT 2018","14","[MoveLineEdit{sourceLineIndex=9, destinationLineIndex=1}]","
        if (a > b) {
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203340094","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:20 GMT 2018","15","[SwapLineEdit{firstLineIndex=31, secondLineIndex=35}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
            Thread.sleep(100);
        } else {
        }
    }
    private static void delay() {
            return SCALENE;
        try {
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203340200","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:20 GMT 2018","16","[SwapLineEdit{firstLineIndex=6, secondLineIndex=27}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        } else if (a == b || b == c) {
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
    public static int classifyTriangle(int a, int b, int c) {
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203340218","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:20 GMT 2018","17","[RemoveBlockEdit{startBlockInt=6, endBlockInt=22}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
        delay();
        if (a > b) {
            a = b;
        }
            int tmp = a;
            c = tmp;
        if (b > c) {
            b = c;
        }
            return INVALID;
            return EQUALATERAL;
            return ISOCELES;
            return SCALENE;
    }
        try {
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203340235","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:20 GMT 2018","18","[RemoveBlockEdit{startBlockInt=40, endBlockInt=43}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }

        classifyTriangle(1,1,1);
}","1544203340256","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:22 GMT 2018","19","[MoveLineEdit{sourceLineIndex=23, destinationLineIndex=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        if (a + b <= c) {
        }
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203340328","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:27 GMT 2018","20","[InsertLineEdit{lineNumber=24, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
//this is a comment
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203342941","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:32 GMT 2018","21","[InsertLineEdit{lineNumber=33, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
//this is a comment
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203347214","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:32 GMT 2018","22","[RemoveLineEdit{lineNumber=12}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
null
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203352226","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:32 GMT 2018","23","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@21eee94f]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            a = c;
        }
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
        try {
            return SCALENE;
            Thread.sleep(100);
        }
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203352257","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:38 GMT 2018","24","[IfStatementEdit{lineIndex=38, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203352349","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:42 GMT 2018","25","[RemoveBlockEdit{startBlockInt=37, endBlockInt=28}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203358602","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:42 GMT 2018","26","[RemoveLineEdit{lineNumber=38}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
null
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203362616","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:06 GMT 2018","1","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@6892b3b6]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203442549","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:10 GMT 2018","2","[IfStatementEdit{lineIndex=18, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203446545","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:10 GMT 2018","3","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@58bf8650]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
            return EQUALATERAL;
            return ISOCELES;
            return SCALENE;
    }
        try {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
    }
        } else {

            return SCALENE;
    public static void main(String[] args) {
        }
        classifyTriangle(1,1,1);
    }
    }
    private static void delay() {
}","1544203450229","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:10 GMT 2018","4","[SwapLineEdit{firstLineIndex=14, secondLineIndex=13}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
        if (a > c) {
        }
            b = tmp;
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203450308","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:10 GMT 2018","5","[MoveLineEdit{sourceLineIndex=39, destinationLineIndex=32}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203450336","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:14 GMT 2018","6","[IfStatementEdit{lineIndex=13, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203450411","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:14 GMT 2018","7","[MoveLineEdit{sourceLineIndex=30, destinationLineIndex=32}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
            return SCALENE;
        }
        } else {
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203454089","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:14 GMT 2018","8","[SwapLineEdit{firstLineIndex=29, secondLineIndex=7}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
            return ISOCELES;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        delay();
        } else if (a == b || b == c) {
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203454103","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:14 GMT 2018","9","[MoveLineEdit{sourceLineIndex=13, destinationLineIndex=25}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        }
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203454161","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:17 GMT 2018","10","[RemoveBlockEdit{startBlockInt=32, endBlockInt=28}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203454239","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:21 GMT 2018","11","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@614aeccc]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203458001","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:21 GMT 2018","12","[SwapLineEdit{firstLineIndex=36, secondLineIndex=14}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
            Thread.sleep(100);
        }
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        if (a > c) {
        try {
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203461633","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:21 GMT 2018","13","[MoveLineEdit{sourceLineIndex=18, destinationLineIndex=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203461697","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:29 GMT 2018","1","[IfStatementEdit{lineIndex=1, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542519358","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:29 GMT 2018","2","[MoveLineEdit{sourceLineIndex=28, destinationLineIndex=25}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
        } else if (a == b || b == c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542529680","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:34 GMT 2018","3","[InsertLineEdit{lineNumber=11, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
//this is a comment
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542529836","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:38 GMT 2018","4","[InsertLineEdit{lineNumber=2, lineContents='//this is a comment'}]","
public class Triangle {
//this is a comment
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542534573","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:38 GMT 2018","5","[RemoveLineEdit{lineNumber=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
null
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542538584","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:42 GMT 2018","6","[InsertLineEdit{lineNumber=4, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
//this is a comment
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542538724","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:47 GMT 2018","7","[IfStatementEdit{lineIndex=15, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542542798","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:52 GMT 2018","8","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@37095ded]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542547509","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:29 GMT 2018","1","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544624925","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:29 GMT 2018","2","[RemoveLineEdit{lineNumber=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
null
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544629608","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:33 GMT 2018","3","[IfStatementEdit{lineIndex=30, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544629749","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:33 GMT 2018","4","[MoveLineEdit{sourceLineIndex=33, destinationLineIndex=5}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    }
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544633856","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:38 GMT 2018","5","[IfStatementEdit{lineIndex=0, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544633950","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:42 GMT 2018","6","[RemoveBlockEdit{startBlockInt=37, endBlockInt=30}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544638196","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:46 GMT 2018","7","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@7ea4d397]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544642299","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:50 GMT 2018","8","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@7c211fd0]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544646503","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:53 GMT 2018","9","[IfStatementEdit{lineIndex=26, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544650295","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:53 GMT 2018","10","[RemoveLineEdit{lineNumber=40}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
null

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544653918","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:53 GMT 2018","11","[RemoveBlockEdit{startBlockInt=20, endBlockInt=31}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            b = c;
        }
            return INVALID;
            return EQUALATERAL;
            return ISOCELES;
            return SCALENE;
    }
        try {
        } catch (InterruptedException e) {
        }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544653949","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:53 GMT 2018","12","[RemoveLineEdit{lineNumber=5}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
null
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544653965","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:57 GMT 2018","13","[IfStatementEdit{lineIndex=7, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544654027","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:57 GMT 2018","14","[SwapLineEdit{firstLineIndex=36, secondLineIndex=8}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
            Thread.sleep(100);
        delay();
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        // Sort the sides so that a <= b <= c
        try {
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544657855","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:57 GMT 2018","15","[RemoveBlockEdit{startBlockInt=25, endBlockInt=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
        } else {
        }
    private static void delay() {
            Thread.sleep(100);
            // do nothing
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544657871","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:57 GMT 2018","16","[MoveLineEdit{sourceLineIndex=32, destinationLineIndex=36}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        }
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544657887","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:57 GMT 2018","17","[SwapLineEdit{firstLineIndex=28, secondLineIndex=15}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        } else if (a == b || b == c) {
        if (a > c) {
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            int tmp = a;
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544657918","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:11:01 GMT 2018","18","[RemoveBlockEdit{startBlockInt=39, endBlockInt=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544657996","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:11:01 GMT 2018","19","[RemoveLineEdit{lineNumber=2}]","
public class Triangle {
null
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544661827","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:11:05 GMT 2018","20","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@32b0876c]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544661889","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:11:05 GMT 2018","21","[RemoveLineEdit{lineNumber=15}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
null
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544665610","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:12:19 GMT 2018","1","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@6892b3b6]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544735976","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:12:23 GMT 2018","2","[SwapLineEdit{firstLineIndex=33, secondLineIndex=39}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
    }
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
    }
        }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544739855","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:12:27 GMT 2018","3","[IfStatementEdit{lineIndex=35, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544743526","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:12:31 GMT 2018","4","[IfStatementEdit{lineIndex=23, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544747211","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:12:31 GMT 2018","5","[SwapLineEdit{firstLineIndex=43, secondLineIndex=5}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
        classifyTriangle(1,1,1);
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    static final int ISOCELES = 3;
    public static void main(String[] args) {
    }
}","1544544751279","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:31 GMT 2018","1","[RemoveBlockEdit{startBlockInt=35, endBlockInt=38}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
            Thread.sleep(100);
            // do nothing
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544811283","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:31 GMT 2018","2","[RemoveLineEdit{lineNumber=32}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
null
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544811314","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:31 GMT 2018","3","[MoveLineEdit{sourceLineIndex=4, destinationLineIndex=32}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    static final int EQUALATERAL = 2;
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544811329","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:35 GMT 2018","4","[InsertLineEdit{lineNumber=42, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

//this is a comment
    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544811423","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:35 GMT 2018","5","[RemoveLineEdit{lineNumber=40}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
null

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544815251","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:35 GMT 2018","6","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@2a1edad4]","
public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
            int tmp = a;
            b = tmp;
        if (a > c) {
            a = c;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
        }
    private static void delay() {
        if (b > c) {
        try {
            int tmp = b;
            Thread.sleep(100);
            b = c;
        } catch (InterruptedException e) {
            c = tmp;
            // do nothing
        }
        }
        if (a + b <= c) {
    }
            return INVALID;

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544815282","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:39 GMT 2018","7","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544815360","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:42 GMT 2018","8","[InsertLineEdit{lineNumber=44, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
//this is a comment
    }
}","1544544819090","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:42 GMT 2018","9","[MoveLineEdit{sourceLineIndex=9, destinationLineIndex=10}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
            int tmp = a;
        if (a > b) {
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544822752","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:46 GMT 2018","10","[IfStatementEdit{lineIndex=36, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544822830","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:46 GMT 2018","11","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@5b022357]","public class Triangle {
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
        delay();
        if (a > b) {
            a = b;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
        }
            return EQUALATERAL;
    }
        } else if (a == b || b == c) {

            return ISOCELES;
    public static void main(String[] args) {
        } else {
        classifyTriangle(1,1,1);
            return SCALENE;
    }
        }
}","1544544826508","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:50 GMT 2018","12","[RemoveBlockEdit{startBlockInt=22, endBlockInt=20}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544826570","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:53 GMT 2018","13","[IfStatementEdit{lineIndex=33, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544830194","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:53 GMT 2018","14","[SwapLineEdit{firstLineIndex=28, secondLineIndex=29}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
        } else {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544833762","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:57 GMT 2018","15","[InsertLineEdit{lineNumber=26, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
//this is a comment
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544833841","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:01 GMT 2018","16","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@1702830d]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544837460","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:04 GMT 2018","17","[IfStatementEdit{lineIndex=15, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544841096","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:08 GMT 2018","18","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@4c86da0c]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544844980","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:12 GMT 2018","19","[IfStatementEdit{lineIndex=31, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544848610","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:12 GMT 2018","20","[RemoveLineEdit{lineNumber=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
null
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544852258","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:15 GMT 2018","21","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@1984212d]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544852336","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:19 GMT 2018","22","[InsertLineEdit{lineNumber=45, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
//this is a comment
}","1544544855954","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:19 GMT 2018","23","[MoveLineEdit{sourceLineIndex=18, destinationLineIndex=11}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
        }
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544859599","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:23 GMT 2018","24","[InsertLineEdit{lineNumber=8, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
//this is a comment
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544859661","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:23 GMT 2018","25","[MoveLineEdit{sourceLineIndex=14, destinationLineIndex=23}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a > c) {
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544863281","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:26 GMT 2018","26","[InsertLineEdit{lineNumber=25, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
//this is a comment
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544863328","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:30 GMT 2018","27","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@563ccd31]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544866935","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:34 GMT 2018","28","[InsertLineEdit{lineNumber=36, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
//this is a comment
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544870557","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:34 GMT 2018","29","[RemoveLineEdit{lineNumber=32}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
null
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544874166","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:34 GMT 2018","30","[SwapLineEdit{firstLineIndex=28, secondLineIndex=32}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
    }
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        } else if (a == b || b == c) {
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544874182","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:34 GMT 2018","31","[MoveLineEdit{sourceLineIndex=9, destinationLineIndex=2}]","
public class Triangle {
        if (a > b) {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544874198","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:37 GMT 2018","32","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@7604198a]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544874276","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:41 GMT 2018","33","[InsertLineEdit{lineNumber=40, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
//this is a comment
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544877933","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:45 GMT 2018","34","[IfStatementEdit{lineIndex=28, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544881579","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:45 GMT 2018","35","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@483b7dc4]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            return SCALENE;
        }
    }
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544885128","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:45 GMT 2018","36","[SwapLineEdit{firstLineIndex=3, secondLineIndex=31}]","
public class Triangle {
        }
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
    static final int SCALENE = 1;
            return SCALENE;
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544885144","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:48 GMT 2018","37","[IfStatementEdit{lineIndex=36, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544885191","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:20:11 GMT 2018","1","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@6892b3b6]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544545208015","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:20:11 GMT 2018","2","[SwapLineEdit{firstLineIndex=17, secondLineIndex=34}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
        try {
            a = c;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
            c = tmp;
    private static void delay() {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544545211811","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:40 GMT 2018","1","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@15bb5034]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546140635","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:40 GMT 2018","2","[RemoveLineEdit{lineNumber=15}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
null
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546140667","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:40 GMT 2018","3","[MoveLineEdit{sourceLineIndex=17, destinationLineIndex=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
            c = tmp;
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546140682","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:44 GMT 2018","4","[IfStatementEdit{lineIndex=39, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546141135","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:48 GMT 2018","5","[InsertLineEdit{lineNumber=41, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
//this is a comment

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546144933","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:51 GMT 2018","6","[SwapLineEdit{firstLineIndex=24, secondLineIndex=22}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
        if (a + b <= c) {
            b = c;
            c = tmp;
        }
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546148659","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:54 GMT 2018","7","[InsertLineEdit{lineNumber=22, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
//this is a comment
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546151298","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:54 GMT 2018","8","[RemoveBlockEdit{startBlockInt=44, endBlockInt=45}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
}","1544546154876","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:54 GMT 2018","9","[SwapLineEdit{firstLineIndex=42, secondLineIndex=4}]","
public class Triangle {
    static final int INVALID = 0;
    public static void main(String[] args) {
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    static final int EQUALATERAL = 2;

        classifyTriangle(1,1,1);
    }
}","1544546154892","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:54 GMT 2018","10","[MoveLineEdit{sourceLineIndex=26, destinationLineIndex=27}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
            return EQUALATERAL;
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546154954","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:54 GMT 2018","11","[RemoveLineEdit{lineNumber=26}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
null
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546154970","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:58 GMT 2018","12","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@dffa30b]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546155017","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:36:02 GMT 2018","13","[InsertLineEdit{lineNumber=20, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
//this is a comment
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546158682","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:36:02 GMT 2018","14","[RemoveLineEdit{lineNumber=23}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
null
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546162282","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:36:02 GMT 2018","15","[MoveLineEdit{sourceLineIndex=37, destinationLineIndex=12}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
        } catch (InterruptedException e) {
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546162298","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:36:02 GMT 2018","16","[SwapLineEdit{firstLineIndex=4, secondLineIndex=31}]","
public class Triangle {
    static final int INVALID = 0;
        }
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
    static final int EQUALATERAL = 2;
            return SCALENE;
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546162313","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 18 19:09:22 GMT 2018","1","[SwapLineEdit{firstLineIndex=31, secondLineIndex=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
            return SCALENE;
        }
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        if (b > c) {
        } else {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1545160162425","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 18 19:11:05 GMT 2018","1","[SwapLineEdit{firstLineIndex=7, secondLineIndex=30}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
            return SCALENE;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        delay();
        } else {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1545160265651","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 18 20:43:34 GMT 2018","1","[MoveLineEdit{sourceLineIndex=5, destinationLineIndex=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
    static final int ISOCELES = 3;
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1545165814635","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:11:15 GMT 2019","1","[InsertBreakEdit{lineNumber=54, lineContents='break;'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
break;
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1546719075174","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:11:15 GMT 2019","2","[SwapLineEdit{firstLineIndex=41, secondLineIndex=13}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;

            b = tmp;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1546719075595","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:11:15 GMT 2019","3","[IfStatementEdit{lineIndex=15, annaPath=AnnaPath{packages=[], className='TriangleCPU'}}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1546719075767","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:11:15 GMT 2019","4","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class TriangleCPU {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1546719075861","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:13:26 GMT 2019","1","[RemoveLineEdit{lineNumber=28}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
null
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546719206502","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:13:26 GMT 2019","2","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546719206564","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:13:26 GMT 2019","3","[MoveLineEdit{sourceLineIndex=6, destinationLineIndex=42}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static int classifyTriangle(int a, int b, int c) {
    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546719206627","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:15:18 GMT 2019","1","[RemoveLineEdit{lineNumber=22}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
null
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546719318365","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:15:18 GMT 2019","2","[SwapLineEdit{firstLineIndex=23, secondLineIndex=4}]","
public class Triangle {
    static final int INVALID = 0;
        }
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
    static final int EQUALATERAL = 2;
            c = tmp;
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546719318490","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:15:18 GMT 2019","3","[MoveBlockEdit{startBlockInt=28, endBlockInt=37, newLocation=8}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);","1546719318521","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:15:53 GMT 2019","1","[MoveLineEdit{sourceLineIndex=4, destinationLineIndex=37}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
    static final int EQUALATERAL = 2;
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546719353513","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:15:54 GMT 2019","2","[RemoveBlockEdit{startBlockInt=5, endBlockInt=16}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
            int tmp = a;
            b = tmp;
        if (a > c) {
            a = c;
        }
            int tmp = b;
            c = tmp;
        if (a + b <= c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546719354232","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:01:33 GMT 2019","1","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729293407","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:01:33 GMT 2019","2","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729293517","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:01:33 GMT 2019","3","[SwapLineEdit{firstLineIndex=7, secondLineIndex=17}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
        }
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
        delay();
            c = tmp;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729293595","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:01:33 GMT 2019","4","[SwapLineEdit{firstLineIndex=35, secondLineIndex=4}]","
public class Triangle {
    static final int INVALID = 0;
        try {
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    static final int EQUALATERAL = 2;
    private static void delay() {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729293610","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:26 GMT 2019","1","[SwapLineEdit{firstLineIndex=13, secondLineIndex=10}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        }
        if (a > b) {
            a = b;
            int tmp = a;
            b = tmp;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729586454","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:26 GMT 2019","2","[RemoveLineEdit{lineNumber=13}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
null
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729586516","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:33 GMT 2019","3","[IfStatementEdit{lineIndex=17, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729587016","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:33 GMT 2019","4","[MoveLineEdit{sourceLineIndex=3, destinationLineIndex=38}]","
public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
    static final int SCALENE = 1;
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729593742","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:33 GMT 2019","5","[MoveBlockEdit{startBlockInt=4, endBlockInt=16, newLocation=42}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
        delay();
        if (a > b) {
            a = b;
        }
            int tmp = a;
            c = tmp;
        if (b > c) {
            b = c;
        }
            return INVALID;
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    static final int EQUALATERAL = 2;
    public static void main(String[] args) {
    public static int classifyTriangle(int a, int b, int c) {
        classifyTriangle(1,1,1);
        // Sort the sides so that a <= b <= c

            int tmp = a;
    }
            b = tmp;

        if (a > c) {

            a = c;
}
        }
    static final int EQUALATERAL = 2;
            int tmp = b;
    static final int ISOCELES = 3;
            c = tmp;
    public static int classifyTriangle(int a, int b, int c) {
        if (a + b <= c) {
        delay();
        } else if (a == b && b == c) {
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;","1546729593789","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:36 GMT 2019","6","[IfStatementEdit{lineIndex=8, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729593882","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:38 GMT 2019","7","[InsertLineEdit{lineNumber=15, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
//this is a comment
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729596144","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:38 GMT 2019","8","[RemoveLineEdit{lineNumber=36}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
null
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729598212","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:38 GMT 2019","9","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729598228","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:38 GMT 2019","10","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729598243","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:38 GMT 2019","11","[SwapLineEdit{firstLineIndex=28, secondLineIndex=39}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
    }
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        } else if (a == b || b == c) {
        }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729598259","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:08:31 GMT 2019","1","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729710984","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:08:31 GMT 2019","2","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729711015","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:08:31 GMT 2019","3","[InsertBreakEdit{lineNumber=20, lineContents='break;'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
break;
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729711484","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:08:55 GMT 2019","1","[MoveLineEdit{sourceLineIndex=34, destinationLineIndex=9}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    private static void delay() {
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729735277","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:27:00 GMT 2019","1","[MoveBlockEdit{startBlockInt=11, endBlockInt=42, newLocation=12}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


            a = b;
    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
","1546795620170","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:27:00 GMT 2019","2","[MoveBlockEdit{startBlockInt=36, endBlockInt=40, newLocation=34}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    private static void delay() {
        try {
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }","1546795620248","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:27:00 GMT 2019","3","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546795620279","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:27:00 GMT 2019","4","[SwapLineEdit{firstLineIndex=4, secondLineIndex=16}]","
public class Triangle {
    static final int INVALID = 0;
            c = tmp;
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
    static final int EQUALATERAL = 2;
            a = c;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546795620326","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:27:27 GMT 2019","1","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546795647275","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:27:27 GMT 2019","2","[InsertBreakEdit{lineNumber=16, lineContents='break;'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
break;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546795647728","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:32:32 GMT 2019","1","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546795952643","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:36:25 GMT 2019","1","[MoveLineEdit{sourceLineIndex=25, destinationLineIndex=49}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}
            return INVALID;","1546796185156","false","false","0.0","0.0"
