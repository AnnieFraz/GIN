Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:07:28 GMT 2018,1,[RemoveLineEdit{lineNumber=0}],"
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:07:55 GMT 2018,1,"[InsertLineEdit{lineNumber=33, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
//this is a comment
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:08:39 GMT 2018,1,"[RemoveBlockEdit{startBlockInt=5, endBlockInt=1}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:08:39 GMT 2018,2,"[IfStatementEdit{lineIndex=0, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:08 GMT 2018,1,"[InsertLineEdit{lineNumber=39, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
//this is a comment
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:08 GMT 2018,2,"[IfStatementEdit{lineIndex=32, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:08 GMT 2018,3,"[InsertLineEdit{lineNumber=35, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
//this is a comment
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:08 GMT 2018,4,"[IfStatementEdit{lineIndex=10, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:41 GMT 2018,1,"[IfStatementEdit{lineIndex=1, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:41 GMT 2018,2,"[InsertLineEdit{lineNumber=26, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
//this is a comment
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:42 GMT 2018,3,"[InsertLineEdit{lineNumber=15, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
//this is a comment
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,,,,
Fri Nov 30 12:22:42 GMT 2018,4,"[RemoveBlockEdit{startBlockInt=35, endBlockInt=32}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 12:26:55 GMT 2018,1,"[MoveLineEdit{sourceLineIndex=17, destinationLineIndex=27}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            a = c;
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 12:26:55 GMT 2018,2,"[InsertLineEdit{lineNumber=31, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
//this is a comment
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 13:04:43 GMT 2018,1,"[InsertLineEdit{lineNumber=27, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
//this is a comment
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 13:04:44 GMT 2018,2,"[IfStatementEdit{lineIndex=3, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 13:10:15 GMT 2018,1,"[RemoveBlockEdit{startBlockInt=22, endBlockInt=11}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,FALSE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 13:10:15 GMT 2018,2,"[InsertLineEdit{lineNumber=11, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
//this is a comment
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,FALSE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 13:11:16 GMT 2018,1,[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@2d710f1a],"package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Fri Nov 30 13:11:16 GMT 2018,2,"[IfStatementEdit{lineIndex=24, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54358E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Tue Dec 04 21:22:14 GMT 2018,1,"[InsertLineEdit{lineNumber=42, lineContents='//this is a comment'}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
//this is a comment
}",1.54396E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Tue Dec 04 21:22:15 GMT 2018,2,"[IfStatementEdit{lineIndex=22, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54396E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Tue Dec 04 21:23:14 GMT 2018,1,"[IfStatementEdit{lineIndex=10, annaPath=AnnaPath{packages=[example], className='Triangle'}}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54396E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Tue Dec 04 21:23:14 GMT 2018,2,[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@74bf1791],"package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54396E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,,,
Tue Dec 04 21:23:14 GMT 2018,3,"[SwapLineEdit{firstLineIndex=30, secondLineIndex=29}]","package example;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return ISOCELES;
        } else if (a == b || b == c) {
            return EQUALATERAL;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54396E+12,TRUE,,,
Date,Repetitions,Patch,Output,Time,Compiled,Passed Unit Tests?,Opacitor measurement 1,Opacitor measurement 2
Thu Dec 06 18:02:48 GMT 2018,1,"[SwapLineEdit{firstLineIndex=5, secondLineIndex=36}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
        } catch (InterruptedException e) {
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
    static final int ISOCELES = 3;
            Thread.sleep(100);
            // do nothing
        }
    }
}",1.54412E+12,FALSE,FALSE,0,0
Date,Repetitions,Patch,Output,Time,Compiled,Passed Unit Tests?,Opacitor measurement 1,Opacitor measurement 2
Thu Dec 06 18:02:48 GMT 2018,2,"[MoveLineEdit{sourceLineIndex=13, destinationLineIndex=2}]","
public class Triangle {
        }
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54412E+12,FALSE,FALSE,0,0
Date,Repetitions,Patch,Output,Time,Compiled,Passed Unit Tests?,Opacitor measurement 1,Opacitor measurement 2
Thu Dec 06 18:02:48 GMT 2018,3,"[MoveLineEdit{sourceLineIndex=37, destinationLineIndex=29}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
        } catch (InterruptedException e) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
            // do nothing
        }
    }
}",1.54412E+12,FALSE,FALSE,0,0
Date,Repetitions,Patch,Output,Time,Compiled,Passed Unit Tests?,Opacitor measurement 1,Opacitor measurement 2
Thu Dec 06 18:02:50 GMT 2018,4,"[IfStatementEdit{lineIndex=25, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54412E+12,TRUE,TRUE,0,0
Date,Repetitions,Patch,"
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",Time,Compiled,Passed Unit Tests?,Opacitor measurement 1,Opacitor measurement 2
Thu Dec 06 18:02:50 GMT 2018,5,[RemoveLineEdit{lineNumber=15}],"
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54412E+12,FALSE,FALSE,0,0
Date,Repetitions,Patch,"
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",Time,Compiled,Passed Unit Tests?,Opacitor measurement 1,Opacitor measurement 2
Thu Dec 06 18:02:52 GMT 2018,6,"[InsertLineEdit{lineNumber=23, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",1.54412E+12,TRUE,TRUE,0,0
,,,"
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",,,,,
,,,"
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",,,,,
,,,"
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}",,,,,"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:49 GMT 2018","1","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@26e356f0]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120027472","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:49 GMT 2018","2","[SwapLineEdit{firstLineIndex=6, secondLineIndex=27}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        } else if (a == b || b == c) {
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
    public static int classifyTriangle(int a, int b, int c) {
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120029278","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:51 GMT 2018","3","[IfStatementEdit{lineIndex=40, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120029326","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:51 GMT 2018","4","[SwapLineEdit{firstLineIndex=26, secondLineIndex=4}]","
public class Triangle {
    static final int INVALID = 0;
        } else if (a == b && b == c) {
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
    static final int EQUALATERAL = 2;
            return INVALID;
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120031051","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:52 GMT 2018","5","[IfStatementEdit{lineIndex=32, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120031096","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:54 GMT 2018","6","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@3d3f761a]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120032841","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:56 GMT 2018","7","[InsertLineEdit{lineNumber=38, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
//this is a comment
            // do nothing
        }
    }
}","1544120034651","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:58 GMT 2018","8","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@2873d672]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120036376","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:58 GMT 2018","9","[SwapLineEdit{firstLineIndex=21, secondLineIndex=14}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
            b = c;
        }
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
        if (a > c) {
            int tmp = b;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120038067","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:58 GMT 2018","10","[RemoveLineEdit{lineNumber=12}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
null
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120038072","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:58 GMT 2018","11","[SwapLineEdit{firstLineIndex=3, secondLineIndex=27}]","
public class Triangle {
        } else if (a == b || b == c) {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
    static final int SCALENE = 1;
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120038076","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:59 GMT 2018","12","[IfStatementEdit{lineIndex=32, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120038104","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:59 GMT 2018","13","[RemoveLineEdit{lineNumber=17}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
null
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120039802","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:59 GMT 2018","14","[RemoveLineEdit{lineNumber=8}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
null
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120039806","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:59 GMT 2018","15","[SwapLineEdit{firstLineIndex=33, secondLineIndex=26}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
    }
            return INVALID;
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        } else if (a == b && b == c) {
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120039814","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:13:59 GMT 2018","16","[RemoveLineEdit{lineNumber=18}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
null
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120039824","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:20:43 GMT 2018","1","[RemoveLineEdit{lineNumber=1}]","
null
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120442994","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:20:43 GMT 2018","2","[MoveLineEdit{sourceLineIndex=26, destinationLineIndex=7}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        } else if (a == b && b == c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120443011","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:20:43 GMT 2018","3","[RemoveLineEdit{lineNumber=35}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
null
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120443015","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:20:45 GMT 2018","4","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544120443367","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:20:45 GMT 2018","5","[RemoveBlockEdit{startBlockInt=3, endBlockInt=23}]","
public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
            int tmp = a;
            b = tmp;
        if (a > c) {
            a = c;
        }
            int tmp = b;
            c = tmp;
        if (a + b <= c) {
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
        } else {
        }
    private static void delay() {
            Thread.sleep(100);
            // do nothing
    }","1544120445153","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:30:11 GMT 2018","1","[RemoveLineEdit{lineNumber=25}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
null
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544121011023","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:30:13 GMT 2018","2","[IfStatementEdit{lineIndex=32, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544121011529","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:30:13 GMT 2018","3","[SwapLineEdit{firstLineIndex=4, secondLineIndex=39}]","
public class Triangle {
    static final int INVALID = 0;
    }
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
    static final int EQUALATERAL = 2;
        }
}","1544121013346","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:30:15 GMT 2018","4","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@62452cc9]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544121013388","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:30:15 GMT 2018","5","[SwapLineEdit{firstLineIndex=31, secondLineIndex=3}]","
public class Triangle {
            return SCALENE;
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
    static final int SCALENE = 1;
        } else {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544121015093","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 18:30:15 GMT 2018","6","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@285d851a]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
    }
}","1544121015101","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:17 GMT 2018","1","[IfStatementEdit{lineIndex=12, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124256165","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:19 GMT 2018","2","[InsertLineEdit{lineNumber=27, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
//this is a comment
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124258041","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:19 GMT 2018","3","[RemoveBlockEdit{startBlockInt=3, endBlockInt=11}]","
public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
            int tmp = a;
            b = tmp;
        if (a > c) {
            a = c;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124259806","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:21 GMT 2018","4","[RemoveBlockEdit{startBlockInt=17, endBlockInt=9}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124259856","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:23 GMT 2018","5","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@3d4d3fe7]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124261629","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:23 GMT 2018","6","[RemoveLineEdit{lineNumber=39}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
null
    }
}","1544124263334","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:25 GMT 2018","7","[IfStatementEdit{lineIndex=22, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124263359","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:26 GMT 2018","8","[RemoveBlockEdit{startBlockInt=10, endBlockInt=8}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124265092","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:26 GMT 2018","9","[RemoveLineEdit{lineNumber=23}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
null
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124266775","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:28 GMT 2018","10","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@6cf31447]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124266814","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:30 GMT 2018","11","[InsertLineEdit{lineNumber=7, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
//this is a comment
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124268534","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:30 GMT 2018","12","[SwapLineEdit{firstLineIndex=19, secondLineIndex=12}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
        if (b > c) {
            a = b;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
            b = tmp;
        }
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124270263","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:31 GMT 2018","13","[MoveLineEdit{sourceLineIndex=0, destinationLineIndex=27}]","public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;

        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124270287","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:33 GMT 2018","14","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@69fe0ed4]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124272004","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:35 GMT 2018","15","[IfStatementEdit{lineIndex=40, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124273775","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:35 GMT 2018","16","[SwapLineEdit{firstLineIndex=2, secondLineIndex=6}]","
        delay();
public class Triangle {
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124275462","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:37 GMT 2018","17","[RemoveBlockEdit{startBlockInt=25, endBlockInt=4}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124275499","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:37 GMT 2018","18","[SwapLineEdit{firstLineIndex=32, secondLineIndex=13}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
        }
            b = tmp;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
        }
            return SCALENE;
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124277201","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:37 GMT 2018","19","[SwapLineEdit{firstLineIndex=16, secondLineIndex=6}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
            a = c;
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
    public static int classifyTriangle(int a, int b, int c) {
            int tmp = a;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124277205","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:37 GMT 2018","20","[SwapLineEdit{firstLineIndex=19, secondLineIndex=34}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        try {
        }
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
        if (b > c) {
    private static void delay() {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124277211","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:38 GMT 2018","21","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@17229821]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124277240","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:38 GMT 2018","22","[SwapLineEdit{firstLineIndex=2, secondLineIndex=15}]","
            a = c;
public class Triangle {
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
    static final int INVALID = 0;
            int tmp = a;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124278935","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:38 GMT 2018","23","[RemoveLineEdit{lineNumber=39}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
null
    }
}","1544124278938","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:40 GMT 2018","24","[InsertLineEdit{lineNumber=23, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
//this is a comment
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124278963","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:40 GMT 2018","25","[RemoveLineEdit{lineNumber=5}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
null
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124280678","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:42 GMT 2018","26","[RemoveBlockEdit{startBlockInt=32, endBlockInt=20}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124280711","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:24:44 GMT 2018","27","[IfStatementEdit{lineIndex=14, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124282425","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:27:56 GMT 2018","1","[MoveLineEdit{sourceLineIndex=11, destinationLineIndex=35}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            a = b;
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124476609","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:27:58 GMT 2018","2","[RemoveBlockEdit{startBlockInt=37, endBlockInt=34}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124476764","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:28:00 GMT 2018","3","[IfStatementEdit{lineIndex=29, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124478659","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:28:02 GMT 2018","4","[IfStatementEdit{lineIndex=34, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124480465","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:28:56 GMT 2018","1","[SwapLineEdit{firstLineIndex=37, secondLineIndex=12}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
        } catch (InterruptedException e) {
            a = b;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            b = tmp;
            Thread.sleep(100);
            // do nothing
        }
    }
}","1544124536871","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:28:56 GMT 2018","2","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@4ddbbdf8]","
public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
            int tmp = a;
            b = tmp;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
    static final int SCALENE = 1;
        }
    static final int EQUALATERAL = 2;
        if (a + b <= c) {
    static final int ISOCELES = 3;
            return INVALID;
    public static int classifyTriangle(int a, int b, int c) {
        } else if (a == b && b == c) {
        delay();
            return EQUALATERAL;
        // Sort the sides so that a <= b <= c
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124536891","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:28:59 GMT 2018","3","[MoveLineEdit{sourceLineIndex=19, destinationLineIndex=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124537220","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:28:59 GMT 2018","4","[SwapLineEdit{firstLineIndex=2, secondLineIndex=24}]","
            return INVALID;
public class Triangle {
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
    static final int INVALID = 0;
        if (a + b <= c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124539025","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:29:00 GMT 2018","5","[RemoveBlockEdit{startBlockInt=38, endBlockInt=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124539122","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:29:00 GMT 2018","6","[SwapLineEdit{firstLineIndex=33, secondLineIndex=4}]","
public class Triangle {
    static final int INVALID = 0;
    }
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
    static final int EQUALATERAL = 2;
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124540853","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:29:02 GMT 2018","7","[IfStatementEdit{lineIndex=12, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124540897","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:30:38 GMT 2018","1","[RemoveLineEdit{lineNumber=17}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
null
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124638510","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Thu Dec 06 19:30:40 GMT 2018","2","[RemoveBlockEdit{startBlockInt=23, endBlockInt=6}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544124638863","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:20:56 GMT 2018","1","[SwapLineEdit{firstLineIndex=18, secondLineIndex=38}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
        }
            c = tmp;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
        }
            // do nothing
    }
}","1544174456621","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:20:58 GMT 2018","2","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@1e097d59]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544174456729","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:21:00 GMT 2018","3","[IfStatementEdit{lineIndex=7, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544174458709","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:21:02 GMT 2018","4","[InsertLineEdit{lineNumber=20, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
//this is a comment
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544174460472","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:21:03 GMT 2018","5","[InsertLineEdit{lineNumber=36, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
//this is a comment
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544174462235","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:21:05 GMT 2018","6","[InsertLineEdit{lineNumber=40, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
//this is a comment
    }
}","1544174463967","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:21:07 GMT 2018","7","[InsertLineEdit{lineNumber=29, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
//this is a comment
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544174465693","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:21:09 GMT 2018","8","[IfStatementEdit{lineIndex=6, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544174467437","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 09:21:09 GMT 2018","9","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@7f572c37]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            c = tmp;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
    private static void delay() {
            // do nothing
        try {
        }
    }
}","1544174469129","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:23 GMT 2018","1","[IfStatementEdit{lineIndex=6, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176881562","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:33 GMT 2018","1","[SwapLineEdit{firstLineIndex=1, secondLineIndex=10}]","            a = b;

    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
public class Triangle {
            int tmp = a;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176893768","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:36 GMT 2018","2","[IfStatementEdit{lineIndex=32, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176894186","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:36 GMT 2018","3","[SwapLineEdit{firstLineIndex=11, secondLineIndex=6}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
            a = b;
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
    public static int classifyTriangle(int a, int b, int c) {
            int tmp = a;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176896024","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:37 GMT 2018","4","[IfStatementEdit{lineIndex=33, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176896071","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:39 GMT 2018","5","[IfStatementEdit{lineIndex=35, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176897828","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:41 GMT 2018","6","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176899582","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:41 GMT 2018","7","[SwapLineEdit{firstLineIndex=1, secondLineIndex=27}]","        } else if (a == b || b == c) {

    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
public class Triangle {
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176901277","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:41 GMT 2018","8","[SwapLineEdit{firstLineIndex=35, secondLineIndex=1}]","        try {

    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
public class Triangle {
    private static void delay() {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176901282","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:43 GMT 2018","9","[InsertLineEdit{lineNumber=37, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
//this is a comment
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176901318","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:44 GMT 2018","10","[InsertLineEdit{lineNumber=31, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
//this is a comment
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176903031","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:46 GMT 2018","11","[RemoveBlockEdit{startBlockInt=25, endBlockInt=20}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176904771","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:48 GMT 2018","12","[RemoveBlockEdit{startBlockInt=37, endBlockInt=31}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176906475","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:48 GMT 2018","13","[RemoveLineEdit{lineNumber=1}]","
null
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176908166","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:49 GMT 2018","14","[IfStatementEdit{lineIndex=7, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176908192","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:49 GMT 2018","15","[SwapLineEdit{firstLineIndex=39, secondLineIndex=38}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        }
            // do nothing
        } catch (InterruptedException e) {
    }
}","1544176909871","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:49 GMT 2018","16","[RemoveLineEdit{lineNumber=22}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
null
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176909875","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:49 GMT 2018","17","[SwapLineEdit{firstLineIndex=30, secondLineIndex=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        } else {
        }
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
        if (b > c) {
            return ISOCELES;
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176909880","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:49 GMT 2018","18","[RemoveLineEdit{lineNumber=0}]","null
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176909883","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:49 GMT 2018","19","[RemoveLineEdit{lineNumber=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
null
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176909887","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:51 GMT 2018","20","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@3078cac]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176909912","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:51 GMT 2018","21","[RemoveLineEdit{lineNumber=18}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
null
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176911596","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:51 GMT 2018","22","[MoveLineEdit{sourceLineIndex=3, destinationLineIndex=27}]","
public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
    static final int SCALENE = 1;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176911600","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:53 GMT 2018","23","[InsertLineEdit{lineNumber=31, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
//this is a comment
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176911655","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:55 GMT 2018","24","[InsertLineEdit{lineNumber=35, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
//this is a comment
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176913359","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:56 GMT 2018","25","[IfStatementEdit{lineIndex=2, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176915069","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:58 GMT 2018","26","[RemoveBlockEdit{startBlockInt=39, endBlockInt=26}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176916770","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:58 GMT 2018","27","[SwapLineEdit{firstLineIndex=25, secondLineIndex=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
            return INVALID;
        }
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (b > c) {
        if (a + b <= c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176918445","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:01:58 GMT 2018","28","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@5b8572df]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
        }
            int tmp = b;
            c = tmp;
        }
        if (b > c) {
        if (a + b <= c) {
            int tmp = b;
            return INVALID;
            b = c;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176918450","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:00 GMT 2018","29","[InsertLineEdit{lineNumber=30, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
//this is a comment
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176918478","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:01 GMT 2018","30","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@73f6e07]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176920189","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:03 GMT 2018","31","[RemoveBlockEdit{startBlockInt=20, endBlockInt=9}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176921896","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:05 GMT 2018","32","[InsertLineEdit{lineNumber=12, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
//this is a comment
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176923622","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:05 GMT 2018","33","[MoveLineEdit{sourceLineIndex=20, destinationLineIndex=26}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            int tmp = b;
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176925321","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:07 GMT 2018","34","[RemoveBlockEdit{startBlockInt=28, endBlockInt=22}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176925340","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:07 GMT 2018","35","[SwapLineEdit{firstLineIndex=9, secondLineIndex=3}]","
public class Triangle {
        if (a > b) {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
    static final int SCALENE = 1;
        // Sort the sides so that a <= b <= c
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176927010","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:07 GMT 2018","36","[SwapLineEdit{firstLineIndex=9, secondLineIndex=35}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
            Thread.sleep(100);
        // Sort the sides so that a <= b <= c
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        if (a > b) {
        try {
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176927014","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:08 GMT 2018","37","[RemoveBlockEdit{startBlockInt=36, endBlockInt=36}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176927042","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:10 GMT 2018","38","[SwapLineEdit{firstLineIndex=36, secondLineIndex=37}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
            // do nothing
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
        }
    }
}","1544176928782","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:10 GMT 2018","39","[RemoveBlockEdit{startBlockInt=9, endBlockInt=25}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
            int tmp = a;
            b = tmp;
        if (a > c) {
            a = c;
        }
            int tmp = b;
            c = tmp;
        if (a + b <= c) {
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
        } else {
        }
    private static void delay() {
            Thread.sleep(100);
            // do nothing
    }
}","1544176930462","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:12 GMT 2018","40","[IfStatementEdit{lineIndex=0, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176930484","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:13 GMT 2018","41","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@30a01dd8]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176932167","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:13 GMT 2018","42","[MoveLineEdit{sourceLineIndex=10, destinationLineIndex=31}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
            int tmp = a;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176933861","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:15 GMT 2018","43","[InsertLineEdit{lineNumber=0, lineContents='//this is a comment'}]","//this is a comment

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176933884","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:17 GMT 2018","44","[RemoveBlockEdit{startBlockInt=26, endBlockInt=3}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176935575","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:17 GMT 2018","45","[MoveLineEdit{sourceLineIndex=14, destinationLineIndex=3}]","
public class Triangle {
    static final int INVALID = 0;
        if (a > c) {
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176937281","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:18 GMT 2018","46","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@37c74e4e]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        } else if (a == b || b == c) {
            return ISOCELES;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176937301","true","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:19 GMT 2018","47","[InsertLineEdit{lineNumber=15, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
//this is a comment
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176938182","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:21 GMT 2018","48","[MoveLineEdit{sourceLineIndex=24, destinationLineIndex=8}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        if (a + b <= c) {
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176939886","true","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:21 GMT 2018","49","[MoveLineEdit{sourceLineIndex=6, destinationLineIndex=26}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
    public static int classifyTriangle(int a, int b, int c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176941466","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:21 GMT 2018","50","[MoveLineEdit{sourceLineIndex=10, destinationLineIndex=20}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            int tmp = a;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176941488","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:23 GMT 2018","51","[IfStatementEdit{lineIndex=12, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176941517","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:23 GMT 2018","52","[RemoveLineEdit{lineNumber=3}]","
public class Triangle {
    static final int INVALID = 0;
null
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176943210","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:23 GMT 2018","53","[SwapLineEdit{firstLineIndex=15, secondLineIndex=7}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
            int tmp = a;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        delay();
        if (a > c) {
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176943232","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:23 GMT 2018","54","[RemoveBlockEdit{startBlockInt=25, endBlockInt=30}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
        } else {
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176943235","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:23 GMT 2018","55","[MoveLineEdit{sourceLineIndex=26, destinationLineIndex=0}]","        } else if (a == b && b == c) {

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176943238","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:23 GMT 2018","56","[RemoveBlockEdit{startBlockInt=15, endBlockInt=18}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            a = c;
        }
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176943241","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:24 GMT 2018","57","[IfStatementEdit{lineIndex=24, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176943258","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:24 GMT 2018","58","[MoveLineEdit{sourceLineIndex=24, destinationLineIndex=31}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        if (a + b <= c) {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176944946","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 10:02:24 GMT 2018","59","[RemoveLineEdit{lineNumber=20}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
null
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
}","1544176944949","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:31 GMT 2018","1","[IfStatementEdit{lineIndex=27, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196211006","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:31 GMT 2018","2","[SwapLineEdit{firstLineIndex=35, secondLineIndex=25}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        try {
        if (a + b <= c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
            return INVALID;
    private static void delay() {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196211023","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:51 GMT 2018","1","[RemoveLineEdit{lineNumber=20}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
null
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196231463","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:51 GMT 2018","2","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@5454d35e]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196231480","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:51 GMT 2018","3","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@74589991]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
    static final int EQUALATERAL = 2;
        classifyTriangle(1,1,1)
    static final int ISOCELES = 3;
    }
}","1544196231503","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:51 GMT 2018","4","[MoveLineEdit{sourceLineIndex=29, destinationLineIndex=11}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            return ISOCELES;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196231512","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:51 GMT 2018","5","[InsertLineEdit{lineNumber=4, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
//this is a comment
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196231519","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:51 GMT 2018","6","[RemoveLineEdit{lineNumber=23}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
null
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196231528","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:23:51 GMT 2018","7","[RemoveLineEdit{lineNumber=5}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
null
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196231536","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:04 GMT 2018","1","[RemoveLineEdit{lineNumber=23}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
null
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196244281","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:04 GMT 2018","2","[RemoveLineEdit{lineNumber=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
null
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196244302","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:04 GMT 2018","3","[MoveLineEdit{sourceLineIndex=1, destinationLineIndex=29}]","
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
public class Triangle {
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196244322","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:04 GMT 2018","4","[RemoveLineEdit{lineNumber=3}]","
public class Triangle {
    static final int INVALID = 0;
null
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196244329","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","1","[MoveLineEdit{sourceLineIndex=41, destinationLineIndex=45}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}
","1544196280442","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","2","[MoveLineEdit{sourceLineIndex=41, destinationLineIndex=8}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();

        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280454","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","3","[SwapLineEdit{firstLineIndex=36, secondLineIndex=15}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
            Thread.sleep(100);
        if (a > c) {
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
            int tmp = a;
        try {
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280468","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","4","[MoveLineEdit{sourceLineIndex=24, destinationLineIndex=41}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

        if (a + b <= c) {
    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280476","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","5","[InsertLineEdit{lineNumber=15, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
//this is a comment
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280484","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","6","[IfStatementEdit{lineIndex=43, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280500","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","7","[RemoveBlockEdit{startBlockInt=44, endBlockInt=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280505","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","8","[MoveLineEdit{sourceLineIndex=1, destinationLineIndex=3}]","
    static final int INVALID = 0;
    static final int SCALENE = 1;
public class Triangle {
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280510","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","9","[RemoveLineEdit{lineNumber=3}]","
public class Triangle {
    static final int INVALID = 0;
null
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280515","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","10","[RemoveBlockEdit{startBlockInt=16, endBlockInt=27}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            c = tmp;
        if (b > c) {
            b = c;
        }
            return INVALID;
            return EQUALATERAL;
            return ISOCELES;
            return SCALENE;
    }
        try {
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280523","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:24:40 GMT 2018","11","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@60d1a32f]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196280528","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:13 GMT 2018","1","[IfStatementEdit{lineIndex=31, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196313400","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:13 GMT 2018","2","[RemoveBlockEdit{startBlockInt=35, endBlockInt=41}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
            Thread.sleep(100);
            // do nothing
    }
    public static void main(String[] args) {
    }","1544196313422","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:13 GMT 2018","3","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@492691d7]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196313441","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:13 GMT 2018","4","[MoveLineEdit{sourceLineIndex=37, destinationLineIndex=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        } catch (InterruptedException e) {
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196313449","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:13 GMT 2018","5","[IfStatementEdit{lineIndex=31, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196313455","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","1","[RemoveLineEdit{lineNumber=15}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
null
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324928","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","2","[IfStatementEdit{lineIndex=13, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324941","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","3","[RemoveBlockEdit{startBlockInt=28, endBlockInt=21}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324952","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","4","[RemoveBlockEdit{startBlockInt=38, endBlockInt=36}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324956","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","5","[RemoveBlockEdit{startBlockInt=14, endBlockInt=0}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324962","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","6","[IfStatementEdit{lineIndex=19, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324968","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","7","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@626c44e7]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324975","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","8","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@8c11eee]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324981","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:24 GMT 2018","9","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@47a86fbb]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196324987","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","1","[InsertLineEdit{lineNumber=30, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
//this is a comment
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355502","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","2","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355515","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","3","[SwapLineEdit{firstLineIndex=31, secondLineIndex=9}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
            return SCALENE;
        // Sort the sides so that a <= b <= c
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        if (a > b) {
        } else {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355536","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","4","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@76f4b65]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355543","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","5","[MoveLineEdit{sourceLineIndex=8, destinationLineIndex=43}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
        // Sort the sides so that a <= b <= c
    }
}","1544196355547","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","6","[SwapLineEdit{firstLineIndex=38, secondLineIndex=39}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
    }
        } catch (InterruptedException e) {
            // do nothing
        }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355553","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","7","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@1817f1eb]","
public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
            int tmp = a;
            b = tmp;
        if (a > c) {
            a = c;
        }
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            Thread.sleep(100);
            int tmp = b;
        } catch (InterruptedException e) {
            b = c;
            // do nothing
            c = tmp;
        }
        }
    }
        if (a + b <= c) {

            return INVALID;
    public static void main(String[] args) {
        } else if (a == b && b == c) {
        classifyTriangle(1,1,1)
            return EQUALATERAL;
    }
}","1544196355563","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","8","[InsertLineEdit{lineNumber=19, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
//this is a comment
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355572","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","9","[RemoveBlockEdit{startBlockInt=41, endBlockInt=4}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355577","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","10","[IfStatementEdit{lineIndex=23, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355581","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","11","[InsertLineEdit{lineNumber=25, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
//this is a comment
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355585","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","12","[IfStatementEdit{lineIndex=3, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355588","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","13","[InsertLineEdit{lineNumber=40, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
//this is a comment
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355593","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","14","[SwapLineEdit{firstLineIndex=27, secondLineIndex=43}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
    }
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
            return EQUALATERAL;
        classifyTriangle(1,1,1)
}","1544196355597","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","15","[RemoveBlockEdit{startBlockInt=43, endBlockInt=0}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355600","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","16","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@5ae76500]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355603","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","17","[InsertLineEdit{lineNumber=41, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
//this is a comment

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355610","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","18","[IfStatementEdit{lineIndex=4, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355616","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","19","[RemoveBlockEdit{startBlockInt=38, endBlockInt=13}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355619","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","20","[RemoveLineEdit{lineNumber=31}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
null
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355625","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","21","[RemoveLineEdit{lineNumber=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
null
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355629","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","22","[InsertLineEdit{lineNumber=0, lineContents='//this is a comment'}]","//this is a comment

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355634","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","23","[IfStatementEdit{lineIndex=7, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355639","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","24","[RemoveBlockEdit{startBlockInt=22, endBlockInt=2}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355645","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:25:55 GMT 2018","25","[IfStatementEdit{lineIndex=22, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196355650","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:16 GMT 2018","1","[SwapLineEdit{firstLineIndex=41, secondLineIndex=23}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;

            c = tmp;
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
        }
    }
    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196376010","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:16 GMT 2018","2","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@6f7923a5]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196376031","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:16 GMT 2018","3","[InsertLineEdit{lineNumber=12, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
//this is a comment
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196376046","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:16 GMT 2018","4","[IfStatementEdit{lineIndex=20, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196376051","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:16 GMT 2018","5","[InsertLineEdit{lineNumber=16, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
//this is a comment
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196376055","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:16 GMT 2018","6","[RemoveLineEdit{lineNumber=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
null
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196376062","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:16 GMT 2018","7","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196376070","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:25 GMT 2018","1","[InsertLineEdit{lineNumber=19, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
//this is a comment
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196385197","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","1","[SwapLineEdit{firstLineIndex=37, secondLineIndex=29}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } catch (InterruptedException e) {
        } else if (a == b || b == c) {
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            return ISOCELES;
            Thread.sleep(100);
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396332","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","2","[SwapLineEdit{firstLineIndex=25, secondLineIndex=15}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
            return INVALID;
        if (a > c) {
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
            int tmp = a;
        if (a + b <= c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396348","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","3","[InsertLineEdit{lineNumber=26, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
//this is a comment
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396368","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","4","[RemoveLineEdit{lineNumber=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
null
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396384","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","5","[MoveLineEdit{sourceLineIndex=15, destinationLineIndex=36}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
            int tmp = a;
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396412","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","6","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@2a76840c]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            b = tmp;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
        }
            c = tmp;
        if (b > c) {
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396425","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","7","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@613a8ee1]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396433","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","8","[InsertLineEdit{lineNumber=15, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
//this is a comment
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396437","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","9","[IfStatementEdit{lineIndex=26, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396442","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","10","[RemoveBlockEdit{startBlockInt=8, endBlockInt=9}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396450","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","11","[RemoveLineEdit{lineNumber=40}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
null

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396469","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:26:36 GMT 2018","12","[RemoveBlockEdit{startBlockInt=33, endBlockInt=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1)
    }
}","1544196396476","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:34 GMT 2018","1","[IfStatementEdit{lineIndex=35, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196512427","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:36 GMT 2018","2","[InsertLineEdit{lineNumber=36, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
//this is a comment
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196514470","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:38 GMT 2018","3","[InsertLineEdit{lineNumber=25, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
//this is a comment
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196516306","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:38 GMT 2018","4","[RemoveLineEdit{lineNumber=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
null
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196518038","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:39 GMT 2018","5","[SwapLineEdit{firstLineIndex=21, secondLineIndex=8}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
            b = c;
        delay();
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
        // Sort the sides so that a <= b <= c
            int tmp = b;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196518091","true","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:40 GMT 2018","6","[InsertLineEdit{lineNumber=24, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
//this is a comment
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196519132","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:42 GMT 2018","7","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@7fedfe27]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196520898","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:44 GMT 2018","8","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@1a35993f]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196522683","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:46 GMT 2018","9","[RemoveBlockEdit{startBlockInt=36, endBlockInt=11}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196524432","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:28:47 GMT 2018","10","[InsertLineEdit{lineNumber=28, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
//this is a comment
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544196526190","true","true","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 15:39:47 GMT 2018","1","[MoveLineEdit{sourceLineIndex=17, destinationLineIndex=30}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            c = tmp;
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544197187545","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:16:40 GMT 2018","1","[MoveLineEdit{sourceLineIndex=12, destinationLineIndex=6}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
            b = tmp;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203000040","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:17:20 GMT 2018","1","[SwapLineEdit{firstLineIndex=43, secondLineIndex=14}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        classifyTriangle(1,1,1);
        }
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

        if (a > c) {
    public static void main(String[] args) {
    }
}","1544203040112","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:17:20 GMT 2018","2","[MoveLineEdit{sourceLineIndex=31, destinationLineIndex=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
            return SCALENE;
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203040546","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:17:20 GMT 2018","3","[SwapLineEdit{firstLineIndex=42, secondLineIndex=14}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
    public static void main(String[] args) {
        }
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
        if (a > c) {

        classifyTriangle(1,1,1);
    }
}","1544203040565","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:17:20 GMT 2018","4","[RemoveLineEdit{lineNumber=12}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
null
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203040583","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:17:20 GMT 2018","5","[MoveLineEdit{sourceLineIndex=30, destinationLineIndex=31}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
            return SCALENE;
        } else {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203040670","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:17:20 GMT 2018","6","[MoveLineEdit{sourceLineIndex=32, destinationLineIndex=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203040691","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:17:20 GMT 2018","7","[SwapLineEdit{firstLineIndex=8, secondLineIndex=43}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
    }
        delay();
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        // Sort the sides so that a <= b <= c
        classifyTriangle(1,1,1);
}","1544203040711","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:02 GMT 2018","1","[RemoveLineEdit{lineNumber=5}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
null
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203262529","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:02 GMT 2018","2","[RemoveLineEdit{lineNumber=43}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
null
    }
}","1544203262553","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:02 GMT 2018","3","[RemoveBlockEdit{startBlockInt=32, endBlockInt=37}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
    }
        try {
        } catch (InterruptedException e) {
        }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203262617","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:06 GMT 2018","4","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@64a40280]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203263066","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:07 GMT 2018","5","[SwapLineEdit{firstLineIndex=29, secondLineIndex=10}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
            return ISOCELES;
        if (a > b) {
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
            int tmp = a;
        } else if (a == b || b == c) {
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203267066","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:37 GMT 2018","1","[RemoveLineEdit{lineNumber=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
null
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203297955","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:38 GMT 2018","2","[RemoveLineEdit{lineNumber=44}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
null
}","1544203297992","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:42 GMT 2018","3","[InsertLineEdit{lineNumber=1, lineContents='//this is a comment'}]","
//this is a comment
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203298445","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:42 GMT 2018","4","[RemoveLineEdit{lineNumber=32}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
null
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203302358","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:46 GMT 2018","5","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203302456","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:21:57 GMT 2018","1","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@6892b3b6]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203314062","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:01 GMT 2018","2","[IfStatementEdit{lineIndex=38, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203317931","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:01 GMT 2018","3","[MoveLineEdit{sourceLineIndex=44, destinationLineIndex=37}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
    }
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
}","1544203321623","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:01 GMT 2018","4","[RemoveLineEdit{lineNumber=11}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
null
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203321640","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:05 GMT 2018","5","[IfStatementEdit{lineIndex=11, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203321715","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:05 GMT 2018","6","[RemoveLineEdit{lineNumber=25}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
null
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203325305","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:05 GMT 2018","7","[RemoveLineEdit{lineNumber=10}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
null
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203325320","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:09 GMT 2018","8","[InsertLineEdit{lineNumber=39, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
//this is a comment
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203325398","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:09 GMT 2018","9","[MoveLineEdit{sourceLineIndex=6, destinationLineIndex=25}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
    public static int classifyTriangle(int a, int b, int c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203329069","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:12 GMT 2018","10","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@2e1792e7]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203329131","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:16 GMT 2018","11","[InsertLineEdit{lineNumber=22, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
//this is a comment
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203332764","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:16 GMT 2018","12","[RemoveLineEdit{lineNumber=0}]","null
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203336394","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:20 GMT 2018","13","[InsertLineEdit{lineNumber=36, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
//this is a comment
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203336452","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:20 GMT 2018","14","[MoveLineEdit{sourceLineIndex=9, destinationLineIndex=1}]","
        if (a > b) {
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203340094","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:20 GMT 2018","15","[SwapLineEdit{firstLineIndex=31, secondLineIndex=35}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
            Thread.sleep(100);
        } else {
        }
    }
    private static void delay() {
            return SCALENE;
        try {
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203340200","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:20 GMT 2018","16","[SwapLineEdit{firstLineIndex=6, secondLineIndex=27}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        } else if (a == b || b == c) {
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
    public static int classifyTriangle(int a, int b, int c) {
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203340218","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:20 GMT 2018","17","[RemoveBlockEdit{startBlockInt=6, endBlockInt=22}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
        delay();
        if (a > b) {
            a = b;
        }
            int tmp = a;
            c = tmp;
        if (b > c) {
            b = c;
        }
            return INVALID;
            return EQUALATERAL;
            return ISOCELES;
            return SCALENE;
    }
        try {
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203340235","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:20 GMT 2018","18","[RemoveBlockEdit{startBlockInt=40, endBlockInt=43}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }

        classifyTriangle(1,1,1);
}","1544203340256","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:22 GMT 2018","19","[MoveLineEdit{sourceLineIndex=23, destinationLineIndex=24}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        if (a + b <= c) {
        }
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203340328","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:27 GMT 2018","20","[InsertLineEdit{lineNumber=24, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
//this is a comment
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203342941","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:32 GMT 2018","21","[InsertLineEdit{lineNumber=33, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
//this is a comment
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203347214","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:32 GMT 2018","22","[RemoveLineEdit{lineNumber=12}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
null
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203352226","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:32 GMT 2018","23","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@21eee94f]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            a = c;
        }
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
        try {
            return SCALENE;
            Thread.sleep(100);
        }
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203352257","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:38 GMT 2018","24","[IfStatementEdit{lineIndex=38, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203352349","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:42 GMT 2018","25","[RemoveBlockEdit{startBlockInt=37, endBlockInt=28}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203358602","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:22:42 GMT 2018","26","[RemoveLineEdit{lineNumber=38}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
null
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203362616","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:06 GMT 2018","1","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@6892b3b6]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203442549","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:10 GMT 2018","2","[IfStatementEdit{lineIndex=18, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203446545","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:10 GMT 2018","3","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@58bf8650]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
            return EQUALATERAL;
            return ISOCELES;
            return SCALENE;
    }
        try {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
    }
        } else {

            return SCALENE;
    public static void main(String[] args) {
        }
        classifyTriangle(1,1,1);
    }
    }
    private static void delay() {
}","1544203450229","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:10 GMT 2018","4","[SwapLineEdit{firstLineIndex=14, secondLineIndex=13}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
        if (a > c) {
        }
            b = tmp;
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203450308","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:10 GMT 2018","5","[MoveLineEdit{sourceLineIndex=39, destinationLineIndex=32}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203450336","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:14 GMT 2018","6","[IfStatementEdit{lineIndex=13, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203450411","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:14 GMT 2018","7","[MoveLineEdit{sourceLineIndex=30, destinationLineIndex=32}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
            return SCALENE;
        }
        } else {
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203454089","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:14 GMT 2018","8","[SwapLineEdit{firstLineIndex=29, secondLineIndex=7}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
            return ISOCELES;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        delay();
        } else if (a == b || b == c) {
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203454103","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:14 GMT 2018","9","[MoveLineEdit{sourceLineIndex=13, destinationLineIndex=25}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        }
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203454161","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:17 GMT 2018","10","[RemoveBlockEdit{startBlockInt=32, endBlockInt=28}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203454239","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:21 GMT 2018","11","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@614aeccc]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203458001","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:21 GMT 2018","12","[SwapLineEdit{firstLineIndex=36, secondLineIndex=14}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
            Thread.sleep(100);
        }
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        if (a > c) {
        try {
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203461633","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Fri Dec 07 17:24:21 GMT 2018","13","[MoveLineEdit{sourceLineIndex=18, destinationLineIndex=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544203461697","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:29 GMT 2018","1","[IfStatementEdit{lineIndex=1, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542519358","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:29 GMT 2018","2","[MoveLineEdit{sourceLineIndex=28, destinationLineIndex=25}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
        } else if (a == b || b == c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542529680","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:34 GMT 2018","3","[InsertLineEdit{lineNumber=11, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
//this is a comment
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542529836","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:38 GMT 2018","4","[InsertLineEdit{lineNumber=2, lineContents='//this is a comment'}]","
public class Triangle {
//this is a comment
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542534573","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:38 GMT 2018","5","[RemoveLineEdit{lineNumber=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
null
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542538584","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:42 GMT 2018","6","[InsertLineEdit{lineNumber=4, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
//this is a comment
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542538724","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:47 GMT 2018","7","[IfStatementEdit{lineIndex=15, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542542798","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 15:35:52 GMT 2018","8","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@37095ded]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544542547509","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:29 GMT 2018","1","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544624925","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:29 GMT 2018","2","[RemoveLineEdit{lineNumber=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
null
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544629608","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:33 GMT 2018","3","[IfStatementEdit{lineIndex=30, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544629749","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:33 GMT 2018","4","[MoveLineEdit{sourceLineIndex=33, destinationLineIndex=5}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    }
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544633856","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:38 GMT 2018","5","[IfStatementEdit{lineIndex=0, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544633950","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:42 GMT 2018","6","[RemoveBlockEdit{startBlockInt=37, endBlockInt=30}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544638196","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:46 GMT 2018","7","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@7ea4d397]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544642299","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:50 GMT 2018","8","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@7c211fd0]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544646503","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:53 GMT 2018","9","[IfStatementEdit{lineIndex=26, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544650295","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:53 GMT 2018","10","[RemoveLineEdit{lineNumber=40}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
null

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544653918","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:53 GMT 2018","11","[RemoveBlockEdit{startBlockInt=20, endBlockInt=31}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            b = c;
        }
            return INVALID;
            return EQUALATERAL;
            return ISOCELES;
            return SCALENE;
    }
        try {
        } catch (InterruptedException e) {
        }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544653949","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:53 GMT 2018","12","[RemoveLineEdit{lineNumber=5}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
null
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544653965","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:57 GMT 2018","13","[IfStatementEdit{lineIndex=7, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544654027","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:57 GMT 2018","14","[SwapLineEdit{firstLineIndex=36, secondLineIndex=8}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
            Thread.sleep(100);
        delay();
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        // Sort the sides so that a <= b <= c
        try {
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544657855","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:57 GMT 2018","15","[RemoveBlockEdit{startBlockInt=25, endBlockInt=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
        } else {
        }
    private static void delay() {
            Thread.sleep(100);
            // do nothing
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544657871","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:57 GMT 2018","16","[MoveLineEdit{sourceLineIndex=32, destinationLineIndex=36}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        }
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544657887","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:10:57 GMT 2018","17","[SwapLineEdit{firstLineIndex=28, secondLineIndex=15}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        } else if (a == b || b == c) {
        if (a > c) {
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            int tmp = a;
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544657918","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:11:01 GMT 2018","18","[RemoveBlockEdit{startBlockInt=39, endBlockInt=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544657996","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:11:01 GMT 2018","19","[RemoveLineEdit{lineNumber=2}]","
public class Triangle {
null
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544661827","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:11:05 GMT 2018","20","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@32b0876c]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544661889","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:11:05 GMT 2018","21","[RemoveLineEdit{lineNumber=15}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
null
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544665610","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:12:19 GMT 2018","1","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@6892b3b6]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544735976","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:12:23 GMT 2018","2","[SwapLineEdit{firstLineIndex=33, secondLineIndex=39}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
    }
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
    }
        }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544739855","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:12:27 GMT 2018","3","[IfStatementEdit{lineIndex=35, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544743526","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:12:31 GMT 2018","4","[IfStatementEdit{lineIndex=23, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544747211","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:12:31 GMT 2018","5","[SwapLineEdit{firstLineIndex=43, secondLineIndex=5}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
        classifyTriangle(1,1,1);
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    static final int ISOCELES = 3;
    public static void main(String[] args) {
    }
}","1544544751279","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:31 GMT 2018","1","[RemoveBlockEdit{startBlockInt=35, endBlockInt=38}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
            Thread.sleep(100);
            // do nothing
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544811283","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:31 GMT 2018","2","[RemoveLineEdit{lineNumber=32}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
null
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544811314","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:31 GMT 2018","3","[MoveLineEdit{sourceLineIndex=4, destinationLineIndex=32}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    static final int EQUALATERAL = 2;
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544811329","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:35 GMT 2018","4","[InsertLineEdit{lineNumber=42, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

//this is a comment
    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544811423","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:35 GMT 2018","5","[RemoveLineEdit{lineNumber=40}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
null

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544815251","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:35 GMT 2018","6","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@2a1edad4]","
public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
            int tmp = a;
            b = tmp;
        if (a > c) {
            a = c;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
        }
    private static void delay() {
        if (b > c) {
        try {
            int tmp = b;
            Thread.sleep(100);
            b = c;
        } catch (InterruptedException e) {
            c = tmp;
            // do nothing
        }
        }
        if (a + b <= c) {
    }
            return INVALID;

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544815282","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:39 GMT 2018","7","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544815360","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:42 GMT 2018","8","[InsertLineEdit{lineNumber=44, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
//this is a comment
    }
}","1544544819090","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:42 GMT 2018","9","[MoveLineEdit{sourceLineIndex=9, destinationLineIndex=10}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
            int tmp = a;
        if (a > b) {
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544822752","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:46 GMT 2018","10","[IfStatementEdit{lineIndex=36, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544822830","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:46 GMT 2018","11","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@5b022357]","public class Triangle {
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
        delay();
        if (a > b) {
            a = b;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
        }
            return EQUALATERAL;
    }
        } else if (a == b || b == c) {

            return ISOCELES;
    public static void main(String[] args) {
        } else {
        classifyTriangle(1,1,1);
            return SCALENE;
    }
        }
}","1544544826508","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:50 GMT 2018","12","[RemoveBlockEdit{startBlockInt=22, endBlockInt=20}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544826570","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:53 GMT 2018","13","[IfStatementEdit{lineIndex=33, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544830194","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:53 GMT 2018","14","[SwapLineEdit{firstLineIndex=28, secondLineIndex=29}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
        } else {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544833762","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:13:57 GMT 2018","15","[InsertLineEdit{lineNumber=26, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
//this is a comment
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544833841","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:01 GMT 2018","16","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@1702830d]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544837460","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:04 GMT 2018","17","[IfStatementEdit{lineIndex=15, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544841096","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:08 GMT 2018","18","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@4c86da0c]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544844980","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:12 GMT 2018","19","[IfStatementEdit{lineIndex=31, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544848610","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:12 GMT 2018","20","[RemoveLineEdit{lineNumber=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
null
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544852258","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:15 GMT 2018","21","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@1984212d]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544852336","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:19 GMT 2018","22","[InsertLineEdit{lineNumber=45, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
//this is a comment
}","1544544855954","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:19 GMT 2018","23","[MoveLineEdit{sourceLineIndex=18, destinationLineIndex=11}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
        }
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544859599","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:23 GMT 2018","24","[InsertLineEdit{lineNumber=8, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
//this is a comment
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544859661","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:23 GMT 2018","25","[MoveLineEdit{sourceLineIndex=14, destinationLineIndex=23}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a > c) {
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544863281","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:26 GMT 2018","26","[InsertLineEdit{lineNumber=25, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
//this is a comment
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544863328","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:30 GMT 2018","27","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@563ccd31]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544866935","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:34 GMT 2018","28","[InsertLineEdit{lineNumber=36, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
//this is a comment
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544870557","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:34 GMT 2018","29","[RemoveLineEdit{lineNumber=32}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
null
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544874166","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:34 GMT 2018","30","[SwapLineEdit{firstLineIndex=28, secondLineIndex=32}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
    }
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        } else if (a == b || b == c) {
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544874182","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:34 GMT 2018","31","[MoveLineEdit{sourceLineIndex=9, destinationLineIndex=2}]","
public class Triangle {
        if (a > b) {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544874198","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:37 GMT 2018","32","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@7604198a]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544874276","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:41 GMT 2018","33","[InsertLineEdit{lineNumber=40, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
//this is a comment
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544877933","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:45 GMT 2018","34","[IfStatementEdit{lineIndex=28, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544881579","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:45 GMT 2018","35","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@483b7dc4]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            return SCALENE;
        }
    }
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544885128","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:45 GMT 2018","36","[SwapLineEdit{firstLineIndex=3, secondLineIndex=31}]","
public class Triangle {
        }
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
    static final int SCALENE = 1;
            return SCALENE;
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544885144","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:14:48 GMT 2018","37","[IfStatementEdit{lineIndex=36, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544544885191","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:20:11 GMT 2018","1","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@6892b3b6]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544545208015","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:20:11 GMT 2018","2","[SwapLineEdit{firstLineIndex=17, secondLineIndex=34}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
        try {
            a = c;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
            c = tmp;
    private static void delay() {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544545211811","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:40 GMT 2018","1","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@15bb5034]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546140635","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:40 GMT 2018","2","[RemoveLineEdit{lineNumber=15}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
null
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546140667","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:40 GMT 2018","3","[MoveLineEdit{sourceLineIndex=17, destinationLineIndex=33}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
            c = tmp;
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546140682","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:44 GMT 2018","4","[IfStatementEdit{lineIndex=39, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546141135","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:48 GMT 2018","5","[InsertLineEdit{lineNumber=41, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
//this is a comment

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546144933","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:51 GMT 2018","6","[SwapLineEdit{firstLineIndex=24, secondLineIndex=22}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
        if (a + b <= c) {
            b = c;
            c = tmp;
        }
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546148659","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:54 GMT 2018","7","[InsertLineEdit{lineNumber=22, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
//this is a comment
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546151298","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:54 GMT 2018","8","[RemoveBlockEdit{startBlockInt=44, endBlockInt=45}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
}","1544546154876","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:54 GMT 2018","9","[SwapLineEdit{firstLineIndex=42, secondLineIndex=4}]","
public class Triangle {
    static final int INVALID = 0;
    public static void main(String[] args) {
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    static final int EQUALATERAL = 2;

        classifyTriangle(1,1,1);
    }
}","1544546154892","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:54 GMT 2018","10","[MoveLineEdit{sourceLineIndex=26, destinationLineIndex=27}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
            return EQUALATERAL;
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546154954","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:54 GMT 2018","11","[RemoveLineEdit{lineNumber=26}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
null
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546154970","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:35:58 GMT 2018","12","[com.anniefraz.dissertation.gin.edit.block.MoveBlockEdit@dffa30b]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546155017","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:36:02 GMT 2018","13","[InsertLineEdit{lineNumber=20, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
//this is a comment
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546158682","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:36:02 GMT 2018","14","[RemoveLineEdit{lineNumber=23}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
null
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546162282","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:36:02 GMT 2018","15","[MoveLineEdit{sourceLineIndex=37, destinationLineIndex=12}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
        } catch (InterruptedException e) {
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546162298","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 11 16:36:02 GMT 2018","16","[SwapLineEdit{firstLineIndex=4, secondLineIndex=31}]","
public class Triangle {
    static final int INVALID = 0;
        }
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
    static final int EQUALATERAL = 2;
            return SCALENE;
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1544546162313","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 18 19:09:22 GMT 2018","1","[SwapLineEdit{firstLineIndex=31, secondLineIndex=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
            return SCALENE;
        }
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        if (b > c) {
        } else {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1545160162425","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 18 19:11:05 GMT 2018","1","[SwapLineEdit{firstLineIndex=7, secondLineIndex=30}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
            return SCALENE;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        delay();
        } else {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1545160265651","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Dec 18 20:43:34 GMT 2018","1","[MoveLineEdit{sourceLineIndex=5, destinationLineIndex=19}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
    static final int ISOCELES = 3;
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1545165814635","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:11:15 GMT 2019","1","[InsertBreakEdit{lineNumber=54, lineContents='break;'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
break;
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1546719075174","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:11:15 GMT 2019","2","[SwapLineEdit{firstLineIndex=41, secondLineIndex=13}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;

            b = tmp;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1546719075595","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:11:15 GMT 2019","3","[IfStatementEdit{lineIndex=15, annaPath=AnnaPath{packages=[], className='TriangleCPU'}}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1546719075767","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:11:15 GMT 2019","4","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class TriangleCPU {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1546719075861","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:13:26 GMT 2019","1","[RemoveLineEdit{lineNumber=28}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
null
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546719206502","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:13:26 GMT 2019","2","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546719206564","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:13:26 GMT 2019","3","[MoveLineEdit{sourceLineIndex=6, destinationLineIndex=42}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static int classifyTriangle(int a, int b, int c) {
    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546719206627","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:15:18 GMT 2019","1","[RemoveLineEdit{lineNumber=22}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
null
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546719318365","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:15:18 GMT 2019","2","[SwapLineEdit{firstLineIndex=23, secondLineIndex=4}]","
public class Triangle {
    static final int INVALID = 0;
        }
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
    static final int EQUALATERAL = 2;
            c = tmp;
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546719318490","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:15:18 GMT 2019","3","[MoveBlockEdit{startBlockInt=28, endBlockInt=37, newLocation=8}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);","1546719318521","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:15:53 GMT 2019","1","[MoveLineEdit{sourceLineIndex=4, destinationLineIndex=37}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
    static final int EQUALATERAL = 2;
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546719353513","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 20:15:54 GMT 2019","2","[RemoveBlockEdit{startBlockInt=5, endBlockInt=16}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
            int tmp = a;
            b = tmp;
        if (a > c) {
            a = c;
        }
            int tmp = b;
            c = tmp;
        if (a + b <= c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546719354232","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:01:33 GMT 2019","1","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729293407","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:01:33 GMT 2019","2","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729293517","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:01:33 GMT 2019","3","[SwapLineEdit{firstLineIndex=7, secondLineIndex=17}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
        }
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
        delay();
            c = tmp;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729293595","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:01:33 GMT 2019","4","[SwapLineEdit{firstLineIndex=35, secondLineIndex=4}]","
public class Triangle {
    static final int INVALID = 0;
        try {
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    static final int EQUALATERAL = 2;
    private static void delay() {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729293610","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:26 GMT 2019","1","[SwapLineEdit{firstLineIndex=13, secondLineIndex=10}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        }
        if (a > b) {
            a = b;
            int tmp = a;
            b = tmp;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729586454","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:26 GMT 2019","2","[RemoveLineEdit{lineNumber=13}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
null
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729586516","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:33 GMT 2019","3","[IfStatementEdit{lineIndex=17, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729587016","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:33 GMT 2019","4","[MoveLineEdit{sourceLineIndex=3, destinationLineIndex=38}]","
public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
    static final int SCALENE = 1;
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729593742","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:33 GMT 2019","5","[MoveBlockEdit{startBlockInt=4, endBlockInt=16, newLocation=42}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
        delay();
        if (a > b) {
            a = b;
        }
            int tmp = a;
            c = tmp;
        if (b > c) {
            b = c;
        }
            return INVALID;
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    static final int EQUALATERAL = 2;
    public static void main(String[] args) {
    public static int classifyTriangle(int a, int b, int c) {
        classifyTriangle(1,1,1);
        // Sort the sides so that a <= b <= c

            int tmp = a;
    }
            b = tmp;

        if (a > c) {

            a = c;
}
        }
    static final int EQUALATERAL = 2;
            int tmp = b;
    static final int ISOCELES = 3;
            c = tmp;
    public static int classifyTriangle(int a, int b, int c) {
        if (a + b <= c) {
        delay();
        } else if (a == b && b == c) {
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;","1546729593789","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:36 GMT 2019","6","[IfStatementEdit{lineIndex=8, annaPath=AnnaPath{packages=[], className='Triangle'}}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729593882","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:38 GMT 2019","7","[InsertLineEdit{lineNumber=15, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
//this is a comment
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729596144","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:38 GMT 2019","8","[RemoveLineEdit{lineNumber=36}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
null
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729598212","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:38 GMT 2019","9","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729598228","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:38 GMT 2019","10","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729598243","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:06:38 GMT 2019","11","[SwapLineEdit{firstLineIndex=28, secondLineIndex=39}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
    }
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        } else if (a == b || b == c) {
        }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729598259","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:08:31 GMT 2019","1","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729710984","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:08:31 GMT 2019","2","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729711015","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:08:31 GMT 2019","3","[InsertBreakEdit{lineNumber=20, lineContents='break;'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
break;
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729711484","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sat Jan 05 23:08:55 GMT 2019","1","[MoveLineEdit{sourceLineIndex=34, destinationLineIndex=9}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    private static void delay() {
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546729735277","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:27:00 GMT 2019","1","[MoveBlockEdit{startBlockInt=11, endBlockInt=42, newLocation=12}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


            a = b;
    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
","1546795620170","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:27:00 GMT 2019","2","[MoveBlockEdit{startBlockInt=36, endBlockInt=40, newLocation=34}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    private static void delay() {
        try {
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }","1546795620248","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:27:00 GMT 2019","3","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546795620279","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:27:00 GMT 2019","4","[SwapLineEdit{firstLineIndex=4, secondLineIndex=16}]","
public class Triangle {
    static final int INVALID = 0;
            c = tmp;
    static final int SCALENE = 1;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
    static final int EQUALATERAL = 2;
            a = c;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546795620326","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:27:27 GMT 2019","1","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546795647275","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:27:27 GMT 2019","2","[InsertBreakEdit{lineNumber=16, lineContents='break;'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
break;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546795647728","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:32:32 GMT 2019","1","[SwapBlockEdit{blockOneStartNo=2, blockOneEndNo=4, blockTwoStartNo=5, blockTwoEndNo=7}]","
public class Triangle {
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
    static final int ISOCELES = 3;
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1546795952643","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 06 17:36:25 GMT 2019","1","[MoveLineEdit{sourceLineIndex=25, destinationLineIndex=49}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}
            return INVALID;","1546796185156","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:51:24 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387480078","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:51:28 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387484592","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:51:32 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387488548","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:51:36 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387492354","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:51:39 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387496121","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:51:43 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387499887","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:51:47 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387503629","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:51:51 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387507438","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:51:55 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387511248","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:51:58 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387515130","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:52:02 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387518868","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:52:06 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387522640","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:52:10 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387526385","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:52:13 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387530136","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:52:17 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387533909","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:52:21 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387537828","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:52:25 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387541606","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:52:29 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387545576","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 13:52:33 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547387549301","true","true","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:22 GMT 2019","1","[RemoveLineEdit{lineNumber=46}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);
null
        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398162729","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:23 GMT 2019","2","[SwapBlockEdit{blockOneStartNo=7, blockOneEndNo=29, blockTwoStartNo=15, blockTwoEndNo=61}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398163322","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:23 GMT 2019","3","[RemoveLineEdit{lineNumber=31}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
null
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398163338","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:23 GMT 2019","4","[MoveLineEdit{sourceLineIndex=51, destinationLineIndex=50}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
                out.println();
            if (i % 100 == 0) {
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398163400","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:23 GMT 2019","5","[InsertBreakEdit{lineNumber=43, lineContents='break;'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
break;
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398163478","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:23 GMT 2019","6","[SwapLineEdit{firstLineIndex=49, secondLineIndex=61}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;

        for (int i = 0; i < iterations; ++i) {
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
            out.print(i + "", "");
        classifyTriangle(1,1,1);
        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398163697","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:23 GMT 2019","7","[SwapLineEdit{firstLineIndex=62, secondLineIndex=53}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();

            }
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
            d *= random.nextDouble();
        classifyTriangle(1,1,1);
        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398163806","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:24 GMT 2019","8","[InsertLineEdit{lineNumber=57, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

//this is a comment
        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398163994","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:24 GMT 2019","9","[RemoveBlockEdit{startBlockInt=17, endBlockInt=26}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
        }
            int tmp = b;
            c = tmp;
        if (a + b <= c) {
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
        } else {
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398164072","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:24 GMT 2019","10","[MoveBlockEdit{startBlockInt=19, endBlockInt=4, newLocation=55}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398164166","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:24 GMT 2019","11","[IfStatementEdit{lineIndex=57, annaPath=AnnaPath{packages=[], className='TriangleCPU'}}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398164259","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:24 GMT 2019","12","[InsertBreakEdit{lineNumber=60, lineContents='break;'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

break;
    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398164291","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:24 GMT 2019","13","[InsertBreakEdit{lineNumber=17, lineContents='break;'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
break;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398164369","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:24 GMT 2019","14","[MoveLineEdit{sourceLineIndex=43, destinationLineIndex=13}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        Random random = new Random(1); // seed 1
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398164447","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:24 GMT 2019","15","[SwapBlockEdit{blockOneStartNo=12, blockOneEndNo=64, blockTwoStartNo=13, blockTwoEndNo=36}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398164650","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:24 GMT 2019","16","[MoveLineEdit{sourceLineIndex=31, destinationLineIndex=56}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

            return SCALENE;
        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398164775","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:24 GMT 2019","17","[MoveBlockEdit{startBlockInt=45, endBlockInt=68, newLocation=29}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

    }


}
        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();","1547398164806","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:24 GMT 2019","18","[MoveBlockEdit{startBlockInt=36, endBlockInt=29, newLocation=45}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398164869","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:24 GMT 2019","19","[SwapBlockEdit{blockOneStartNo=29, blockOneEndNo=0, blockTwoStartNo=44, blockTwoEndNo=32}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
        Thread.sleep(startDelayMS);
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

            return ISOCELES;

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398164947","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:25 GMT 2019","20","[IfStatementEdit{lineIndex=4, annaPath=AnnaPath{packages=[], className='TriangleCPU'}}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398165025","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:25 GMT 2019","21","[SwapLineEdit{firstLineIndex=71, secondLineIndex=65}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);
}


        out.close();
    }

        wasteCPU(out, 500, 500);
","1547398165025","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:25 GMT 2019","22","[InsertLineEdit{lineNumber=33, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
//this is a comment
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398165103","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:25 GMT 2019","23","[InsertLineEdit{lineNumber=65, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

//this is a comment
        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398165197","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:25 GMT 2019","24","[SwapBlockEdit{blockOneStartNo=66, blockOneEndNo=62, blockTwoStartNo=28, blockTwoEndNo=38}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398165275","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:25 GMT 2019","25","[InsertBreakEdit{lineNumber=39, lineContents='break;'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
break;
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398165431","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:25 GMT 2019","26","[RemoveLineEdit{lineNumber=49}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
null
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398165447","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:25 GMT 2019","27","[InsertBreakEdit{lineNumber=69, lineContents='break;'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }
break;


}","1547398165462","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:25 GMT 2019","28","[IfStatementEdit{lineIndex=8, annaPath=AnnaPath{packages=[], className='TriangleCPU'}}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398165525","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:25 GMT 2019","29","[IfStatementEdit{lineIndex=57, annaPath=AnnaPath{packages=[], className='TriangleCPU'}}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398165572","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:25 GMT 2019","30","[SwapBlockEdit{blockOneStartNo=15, blockOneEndNo=60, blockTwoStartNo=49, blockTwoEndNo=35}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398165697","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:25 GMT 2019","31","[SwapLineEdit{firstLineIndex=51, secondLineIndex=41}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
                out.println();
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");

            if (i % 100 == 0) {
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398165900","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:26 GMT 2019","32","[MoveBlockEdit{startBlockInt=45, endBlockInt=16, newLocation=24}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398166072","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:26 GMT 2019","33","[IfStatementEdit{lineIndex=19, annaPath=AnnaPath{packages=[], className='TriangleCPU'}}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398166181","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:26 GMT 2019","34","[InsertBreakEdit{lineNumber=61, lineContents='break;'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
break;
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398166290","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:26 GMT 2019","35","[MoveBlockEdit{startBlockInt=19, endBlockInt=35, newLocation=1}]","
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {","1547398166321","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:26 GMT 2019","36","[SwapLineEdit{firstLineIndex=25, secondLineIndex=67}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
    }
        if (a + b <= c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

            return INVALID;
        out.close();


}","1547398166337","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:26 GMT 2019","37","[MoveLineEdit{sourceLineIndex=43, destinationLineIndex=68}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }
        Random random = new Random(1); // seed 1


}","1547398166462","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:26 GMT 2019","38","[InsertLineEdit{lineNumber=58, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
//this is a comment
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398166540","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:26 GMT 2019","39","[IfStatementEdit{lineIndex=49, annaPath=AnnaPath{packages=[], className='TriangleCPU'}}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398166603","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:26 GMT 2019","40","[IfStatementEdit{lineIndex=57, annaPath=AnnaPath{packages=[], className='TriangleCPU'}}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398166650","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:26 GMT 2019","41","[RemoveBlockEdit{startBlockInt=19, endBlockInt=10}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398166743","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:26 GMT 2019","42","[MoveBlockEdit{startBlockInt=14, endBlockInt=51, newLocation=11}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
            a = b;
            b = tmp;
        }
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {","1547398166774","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:26 GMT 2019","43","[SwapBlockEdit{blockOneStartNo=31, blockOneEndNo=38, blockTwoStartNo=5, blockTwoEndNo=65}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398166853","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:26 GMT 2019","44","[MoveBlockEdit{startBlockInt=42, endBlockInt=51, newLocation=48}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

        Random random = new Random(1); // seed 1
        Thread.sleep(startDelayMS);
        double d = 1;
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {


        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
            out.println(""Result: "" + d);
                out.println();
        }
            }

            d *= random.nextDouble();
        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {","1547398166884","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:26 GMT 2019","45","[MoveBlockEdit{startBlockInt=17, endBlockInt=69, newLocation=22}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
        }
            int tmp = b;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}
        if (b > c) {
            c = tmp;
            b = c;
        }
            c = tmp;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }","1547398166931","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:27 GMT 2019","46","[IfStatementEdit{lineIndex=30, annaPath=AnnaPath{packages=[], className='TriangleCPU'}}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398167009","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:27 GMT 2019","47","[InsertBreakEdit{lineNumber=28, lineContents='break;'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
break;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398167149","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:27 GMT 2019","48","[SwapLineEdit{firstLineIndex=59, secondLineIndex=60}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
        classifyTriangle(1,1,1);
    }

    public static void main(String[] args) {

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398167259","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:27 GMT 2019","49","[IfStatementEdit{lineIndex=23, annaPath=AnnaPath{packages=[], className='TriangleCPU'}}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398167306","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:27 GMT 2019","50","[SwapBlockEdit{blockOneStartNo=41, blockOneEndNo=71, blockTwoStartNo=67, blockTwoEndNo=23}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398167368","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:27 GMT 2019","51","[MoveBlockEdit{startBlockInt=24, endBlockInt=14, newLocation=36}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398167446","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:27 GMT 2019","52","[SwapBlockEdit{blockOneStartNo=27, blockOneEndNo=52, blockTwoStartNo=41, blockTwoEndNo=0}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398167509","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:27 GMT 2019","53","[MoveLineEdit{sourceLineIndex=67, destinationLineIndex=52}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
        out.close();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

    }


}","1547398167587","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:27 GMT 2019","54","[RemoveLineEdit{lineNumber=26}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
null
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398167618","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:27 GMT 2019","55","[MoveBlockEdit{startBlockInt=24, endBlockInt=61, newLocation=34}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
            return INVALID;
            return EQUALATERAL;
            return ISOCELES;
            return SCALENE;
    }
        if (a + b <= c) {
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
        } else {
        }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {

        classifyTriangle(1,1,1);
        out.close();

    }
        PrintStream out = new PrintStream(System.out);



        wasteCPU(out, 500, 500);
}
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {","1547398167665","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:27 GMT 2019","56","[InsertBreakEdit{lineNumber=20, lineContents='break;'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
break;
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398167712","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:27 GMT 2019","57","[RemoveLineEdit{lineNumber=34}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
null
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398167759","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:27 GMT 2019","58","[MoveBlockEdit{startBlockInt=22, endBlockInt=6, newLocation=1}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398167837","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:27 GMT 2019","59","[MoveLineEdit{sourceLineIndex=69, destinationLineIndex=29}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {

            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }

}","1547398167915","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:27 GMT 2019","60","[RemoveBlockEdit{startBlockInt=33, endBlockInt=50}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    private static void delay() {
            Thread.sleep(100);
            // do nothing
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {


        for (int i = 0; i < iterations; ++i) {
            if (i % 100 == 0) {
            }
            out.println(""Result: "" + d);

    }
    public static void main(String[] args) {



        out.close();
    }


}","1547398167962","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:28 GMT 2019","61","[RemoveBlockEdit{startBlockInt=54, endBlockInt=59}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
        }
        out.println(""Finished"");

        classifyTriangle(1,1,1);
        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398168071","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:28 GMT 2019","62","[MoveLineEdit{sourceLineIndex=40, destinationLineIndex=31}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
    }
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398168087","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:49:28 GMT 2019","63","[MoveBlockEdit{startBlockInt=38, endBlockInt=69, newLocation=7}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {


}
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }","1547398168118","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:35 GMT 2019","1","[InsertLineEdit{lineNumber=58, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
//this is a comment
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398355018","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:35 GMT 2019","2","[InsertLineEdit{lineNumber=55, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
//this is a comment
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398355252","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:35 GMT 2019","3","[InsertLineEdit{lineNumber=67, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

//this is a comment
        out.close();
    }


}","1547398355314","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:35 GMT 2019","4","[InsertLineEdit{lineNumber=10, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
//this is a comment
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398355392","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:35 GMT 2019","5","[InsertLineEdit{lineNumber=48, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
//this is a comment
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398355455","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:35 GMT 2019","6","[InsertLineEdit{lineNumber=53, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
//this is a comment
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398355533","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:35 GMT 2019","7","[InsertLineEdit{lineNumber=63, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

//this is a comment
        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398355627","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:35 GMT 2019","8","[InsertLineEdit{lineNumber=20, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
//this is a comment
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398355705","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:35 GMT 2019","9","[InsertLineEdit{lineNumber=26, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
//this is a comment
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398355783","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:35 GMT 2019","10","[InsertLineEdit{lineNumber=71, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


//this is a comment
}","1547398355845","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:35 GMT 2019","11","[InsertLineEdit{lineNumber=67, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

//this is a comment
        out.close();
    }


}","1547398355955","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:36 GMT 2019","12","[InsertLineEdit{lineNumber=57, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

//this is a comment
        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398356080","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:36 GMT 2019","13","[InsertLineEdit{lineNumber=26, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
//this is a comment
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398356127","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:36 GMT 2019","14","[InsertLineEdit{lineNumber=19, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
//this is a comment
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398356189","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:36 GMT 2019","15","[InsertLineEdit{lineNumber=63, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

//this is a comment
        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398356252","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:36 GMT 2019","16","[InsertLineEdit{lineNumber=55, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
//this is a comment
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398356314","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:36 GMT 2019","17","[InsertLineEdit{lineNumber=55, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
//this is a comment
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398356361","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:36 GMT 2019","18","[InsertLineEdit{lineNumber=52, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
//this is a comment
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398356439","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:36 GMT 2019","19","[InsertLineEdit{lineNumber=7, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
//this is a comment
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398356533","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:36 GMT 2019","20","[InsertLineEdit{lineNumber=14, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
//this is a comment
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398356595","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:36 GMT 2019","21","[InsertLineEdit{lineNumber=62, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
//this is a comment

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398356642","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:36 GMT 2019","22","[InsertLineEdit{lineNumber=66, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);
//this is a comment

        out.close();
    }


}","1547398356720","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:36 GMT 2019","23","[InsertLineEdit{lineNumber=67, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

//this is a comment
        out.close();
    }


}","1547398356814","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:36 GMT 2019","24","[InsertLineEdit{lineNumber=37, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
//this is a comment
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398356908","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:36 GMT 2019","25","[InsertLineEdit{lineNumber=33, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
//this is a comment
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398356970","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","26","[InsertLineEdit{lineNumber=55, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
//this is a comment
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398357017","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","27","[InsertLineEdit{lineNumber=71, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


//this is a comment
}","1547398357080","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","28","[InsertLineEdit{lineNumber=69, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }
//this is a comment


}","1547398357126","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","29","[InsertLineEdit{lineNumber=13, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
//this is a comment
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398357189","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","30","[InsertLineEdit{lineNumber=47, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

//this is a comment
        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398357251","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","31","[InsertLineEdit{lineNumber=61, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
//this is a comment
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398357298","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","32","[InsertLineEdit{lineNumber=45, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

//this is a comment
        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398357376","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","33","[InsertLineEdit{lineNumber=56, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }
//this is a comment

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398357439","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","34","[InsertLineEdit{lineNumber=35, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
//this is a comment
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398357501","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","35","[InsertLineEdit{lineNumber=51, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
//this is a comment
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398357548","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","36","[InsertLineEdit{lineNumber=43, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
//this is a comment
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398357611","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","37","[InsertLineEdit{lineNumber=20, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
//this is a comment
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398357673","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","38","[InsertLineEdit{lineNumber=1, lineContents='//this is a comment'}]","
//this is a comment
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398357736","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","39","[InsertLineEdit{lineNumber=40, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
//this is a comment
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398357798","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","40","[InsertLineEdit{lineNumber=45, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

//this is a comment
        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398357861","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:37 GMT 2019","41","[InsertLineEdit{lineNumber=7, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
//this is a comment
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398357923","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","42","[InsertLineEdit{lineNumber=68, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
//this is a comment
    }


}","1547398358001","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","43","[InsertLineEdit{lineNumber=8, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
//this is a comment
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398358064","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","44","[InsertLineEdit{lineNumber=60, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

//this is a comment
    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398358111","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","45","[InsertLineEdit{lineNumber=19, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
//this is a comment
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398358157","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","46","[InsertLineEdit{lineNumber=32, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
//this is a comment
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398358204","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","47","[InsertLineEdit{lineNumber=30, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
//this is a comment
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398358251","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","48","[InsertLineEdit{lineNumber=1, lineContents='//this is a comment'}]","
//this is a comment
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398358314","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","49","[InsertLineEdit{lineNumber=15, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
//this is a comment
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398358360","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","50","[InsertLineEdit{lineNumber=25, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
//this is a comment
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398358423","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","51","[InsertLineEdit{lineNumber=14, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
//this is a comment
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398358470","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","52","[InsertLineEdit{lineNumber=1, lineContents='//this is a comment'}]","
//this is a comment
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398358532","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","53","[InsertLineEdit{lineNumber=70, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }

//this is a comment

}","1547398358595","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","54","[InsertLineEdit{lineNumber=58, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
//this is a comment
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398358657","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","55","[InsertLineEdit{lineNumber=54, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
//this is a comment
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398358704","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","56","[InsertLineEdit{lineNumber=51, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
//this is a comment
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398358751","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","57","[InsertLineEdit{lineNumber=66, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);
//this is a comment

        out.close();
    }


}","1547398358876","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:38 GMT 2019","58","[InsertLineEdit{lineNumber=48, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
//this is a comment
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398358923","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:39 GMT 2019","59","[InsertLineEdit{lineNumber=58, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
//this is a comment
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398359001","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:39 GMT 2019","60","[InsertLineEdit{lineNumber=64, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);
//this is a comment

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398359079","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:39 GMT 2019","61","[InsertLineEdit{lineNumber=51, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
//this is a comment
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398359173","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:39 GMT 2019","62","[InsertLineEdit{lineNumber=14, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
//this is a comment
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398359251","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:39 GMT 2019","63","[InsertLineEdit{lineNumber=51, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
//this is a comment
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398359345","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:39 GMT 2019","64","[InsertLineEdit{lineNumber=70, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }

//this is a comment

}","1547398359391","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:39 GMT 2019","65","[InsertLineEdit{lineNumber=71, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


//this is a comment
}","1547398359454","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:39 GMT 2019","66","[InsertLineEdit{lineNumber=45, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

//this is a comment
        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398359548","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:39 GMT 2019","67","[InsertLineEdit{lineNumber=46, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);
//this is a comment

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398359610","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:39 GMT 2019","68","[InsertLineEdit{lineNumber=38, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
//this is a comment
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398359673","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:39 GMT 2019","69","[InsertLineEdit{lineNumber=14, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
//this is a comment
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398359751","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:39 GMT 2019","70","[InsertLineEdit{lineNumber=71, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


//this is a comment
}","1547398359813","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:39 GMT 2019","71","[InsertLineEdit{lineNumber=21, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
//this is a comment
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398359876","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:39 GMT 2019","72","[InsertLineEdit{lineNumber=38, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
//this is a comment
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398359938","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","73","[InsertLineEdit{lineNumber=14, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
//this is a comment
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360001","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","74","[InsertLineEdit{lineNumber=57, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

//this is a comment
        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360048","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","75","[InsertLineEdit{lineNumber=27, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
//this is a comment
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360126","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","76","[InsertLineEdit{lineNumber=44, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1
//this is a comment

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360188","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","77","[InsertLineEdit{lineNumber=66, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);
//this is a comment

        out.close();
    }


}","1547398360251","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","78","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360298","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","79","[InsertLineEdit{lineNumber=51, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
//this is a comment
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360360","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","80","[InsertLineEdit{lineNumber=64, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);
//this is a comment

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360469","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","81","[InsertLineEdit{lineNumber=60, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

//this is a comment
    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360532","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","82","[InsertLineEdit{lineNumber=4, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
//this is a comment
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360579","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","83","[InsertLineEdit{lineNumber=11, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
//this is a comment
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360626","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","84","[InsertLineEdit{lineNumber=62, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
//this is a comment

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360688","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","85","[InsertLineEdit{lineNumber=40, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
//this is a comment
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360735","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","86","[InsertLineEdit{lineNumber=33, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
//this is a comment
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360782","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","87","[InsertLineEdit{lineNumber=71, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


//this is a comment
}","1547398360844","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","88","[InsertLineEdit{lineNumber=65, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

//this is a comment
        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360891","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","89","[InsertLineEdit{lineNumber=14, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
//this is a comment
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360938","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:40 GMT 2019","90","[InsertLineEdit{lineNumber=18, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
//this is a comment
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398360985","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:41 GMT 2019","91","[InsertLineEdit{lineNumber=19, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
//this is a comment
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398361094","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:41 GMT 2019","92","[InsertLineEdit{lineNumber=57, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

//this is a comment
        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398361172","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:41 GMT 2019","93","[InsertLineEdit{lineNumber=58, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
//this is a comment
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398361282","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:41 GMT 2019","94","[InsertLineEdit{lineNumber=2, lineContents='//this is a comment'}]","
public class TriangleCPU {
//this is a comment
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398361344","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:41 GMT 2019","95","[InsertLineEdit{lineNumber=48, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
//this is a comment
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398361391","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:41 GMT 2019","96","[InsertLineEdit{lineNumber=54, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
//this is a comment
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398361438","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:41 GMT 2019","97","[InsertLineEdit{lineNumber=44, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1
//this is a comment

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398361516","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:41 GMT 2019","98","[InsertLineEdit{lineNumber=4, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
//this is a comment
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398361563","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:41 GMT 2019","99","[InsertLineEdit{lineNumber=8, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
//this is a comment
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398361610","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 16:52:41 GMT 2019","100","[InsertLineEdit{lineNumber=49, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
//this is a comment
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547398361657","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:14 GMT 2019","1","[InsertLineEdit{lineNumber=29, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
//this is a comment
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401394710","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:14 GMT 2019","2","[InsertLineEdit{lineNumber=54, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
//this is a comment
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401394881","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:14 GMT 2019","3","[InsertLineEdit{lineNumber=11, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
//this is a comment
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401394960","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:15 GMT 2019","4","[InsertLineEdit{lineNumber=10, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
//this is a comment
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401395116","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:15 GMT 2019","5","[InsertLineEdit{lineNumber=9, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
//this is a comment
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401395210","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:15 GMT 2019","6","[InsertLineEdit{lineNumber=49, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
//this is a comment
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401395303","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:15 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401395366","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:15 GMT 2019","8","[InsertLineEdit{lineNumber=65, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

//this is a comment
        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401395444","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:15 GMT 2019","9","[InsertLineEdit{lineNumber=69, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }
//this is a comment


}","1547401395538","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:15 GMT 2019","10","[InsertLineEdit{lineNumber=45, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

//this is a comment
        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401395616","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:15 GMT 2019","11","[InsertLineEdit{lineNumber=20, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
//this is a comment
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401395741","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:15 GMT 2019","12","[InsertLineEdit{lineNumber=33, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
//this is a comment
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401395803","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:15 GMT 2019","13","[InsertLineEdit{lineNumber=59, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }
//this is a comment

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401395850","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:15 GMT 2019","14","[InsertLineEdit{lineNumber=26, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
//this is a comment
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401395928","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:16 GMT 2019","15","[InsertLineEdit{lineNumber=38, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
//this is a comment
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401395991","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:16 GMT 2019","16","[InsertLineEdit{lineNumber=23, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
//this is a comment
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401396084","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:16 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401396131","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:16 GMT 2019","18","[InsertLineEdit{lineNumber=48, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
//this is a comment
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401396241","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:16 GMT 2019","19","[InsertLineEdit{lineNumber=53, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
//this is a comment
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401396365","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:16 GMT 2019","20","[InsertLineEdit{lineNumber=65, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

//this is a comment
        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401396459","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:16 GMT 2019","21","[InsertLineEdit{lineNumber=26, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
//this is a comment
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401396569","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:16 GMT 2019","22","[InsertLineEdit{lineNumber=0, lineContents='//this is a comment'}]","//this is a comment

public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401396631","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:16 GMT 2019","23","[InsertLineEdit{lineNumber=51, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
//this is a comment
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401396678","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:16 GMT 2019","24","[InsertLineEdit{lineNumber=17, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
//this is a comment
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401396787","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:17 GMT 2019","25","[InsertLineEdit{lineNumber=29, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
//this is a comment
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401397006","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:17 GMT 2019","26","[InsertLineEdit{lineNumber=36, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
//this is a comment
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401397053","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:17 GMT 2019","27","[InsertLineEdit{lineNumber=16, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
//this is a comment
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401397115","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:17 GMT 2019","28","[InsertLineEdit{lineNumber=18, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
//this is a comment
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401397162","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:17 GMT 2019","29","[InsertLineEdit{lineNumber=37, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
//this is a comment
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401397225","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:17 GMT 2019","30","[InsertLineEdit{lineNumber=51, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
//this is a comment
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401397287","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:17 GMT 2019","31","[InsertLineEdit{lineNumber=71, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


//this is a comment
}","1547401397350","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:17 GMT 2019","32","[InsertLineEdit{lineNumber=3, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
//this is a comment
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401397397","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:17 GMT 2019","33","[InsertLineEdit{lineNumber=9, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
//this is a comment
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401397475","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:17 GMT 2019","34","[InsertLineEdit{lineNumber=31, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
//this is a comment
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401397537","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:17 GMT 2019","35","[InsertLineEdit{lineNumber=69, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }
//this is a comment


}","1547401397631","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:17 GMT 2019","36","[InsertLineEdit{lineNumber=38, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
//this is a comment
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401397693","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:17 GMT 2019","37","[InsertLineEdit{lineNumber=0, lineContents='//this is a comment'}]","//this is a comment

public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401397756","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:17 GMT 2019","38","[InsertLineEdit{lineNumber=29, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
//this is a comment
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401397834","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:17 GMT 2019","39","[InsertLineEdit{lineNumber=35, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
//this is a comment
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401397959","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:18 GMT 2019","40","[InsertLineEdit{lineNumber=16, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
//this is a comment
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401398006","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:18 GMT 2019","41","[InsertLineEdit{lineNumber=30, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
//this is a comment
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401398053","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:18 GMT 2019","42","[InsertLineEdit{lineNumber=12, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
//this is a comment
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401398131","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:18 GMT 2019","43","[InsertLineEdit{lineNumber=55, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
//this is a comment
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401398209","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:18 GMT 2019","44","[InsertLineEdit{lineNumber=23, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
//this is a comment
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401398271","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:18 GMT 2019","45","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401398334","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:18 GMT 2019","46","[InsertLineEdit{lineNumber=43, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
//this is a comment
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401398396","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:18 GMT 2019","47","[InsertLineEdit{lineNumber=16, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
//this is a comment
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401398459","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:18 GMT 2019","48","[InsertLineEdit{lineNumber=61, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
//this is a comment
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401398521","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:18 GMT 2019","49","[InsertLineEdit{lineNumber=4, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
//this is a comment
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401398568","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:18 GMT 2019","50","[InsertLineEdit{lineNumber=55, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
//this is a comment
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401398631","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:18 GMT 2019","51","[InsertLineEdit{lineNumber=15, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
//this is a comment
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401398677","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:18 GMT 2019","52","[InsertLineEdit{lineNumber=20, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
//this is a comment
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401398740","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:48 GMT 2019","1","[InsertLineEdit{lineNumber=18, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
//this is a comment
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401428856","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:49 GMT 2019","2","[InsertLineEdit{lineNumber=57, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

//this is a comment
        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401429059","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:49 GMT 2019","3","[InsertLineEdit{lineNumber=23, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
//this is a comment
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401429137","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:49 GMT 2019","4","[InsertLineEdit{lineNumber=33, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
//this is a comment
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401429230","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:49 GMT 2019","5","[InsertLineEdit{lineNumber=15, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
//this is a comment
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401429340","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:49 GMT 2019","6","[InsertLineEdit{lineNumber=19, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
//this is a comment
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401429434","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:49 GMT 2019","7","[InsertLineEdit{lineNumber=2, lineContents='//this is a comment'}]","
public class TriangleCPU {
//this is a comment
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401429496","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:49 GMT 2019","8","[InsertLineEdit{lineNumber=44, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1
//this is a comment

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401429590","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:49 GMT 2019","9","[InsertLineEdit{lineNumber=64, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);
//this is a comment

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401429683","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:49 GMT 2019","10","[InsertLineEdit{lineNumber=53, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
//this is a comment
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401429746","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:49 GMT 2019","11","[InsertLineEdit{lineNumber=24, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
//this is a comment
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401429824","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:49 GMT 2019","12","[InsertLineEdit{lineNumber=16, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
//this is a comment
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401429918","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:49 GMT 2019","13","[InsertLineEdit{lineNumber=66, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);
//this is a comment

        out.close();
    }


}","1547401429996","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:50 GMT 2019","14","[InsertLineEdit{lineNumber=34, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
//this is a comment
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401430074","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:50 GMT 2019","15","[InsertLineEdit{lineNumber=11, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
//this is a comment
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401430136","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:50 GMT 2019","16","[InsertLineEdit{lineNumber=59, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }
//this is a comment

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401430183","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:50 GMT 2019","17","[InsertLineEdit{lineNumber=30, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
//this is a comment
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401430246","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:50 GMT 2019","18","[InsertLineEdit{lineNumber=48, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
//this is a comment
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401430340","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:50 GMT 2019","19","[InsertLineEdit{lineNumber=42, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

//this is a comment
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401430449","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:50 GMT 2019","20","[InsertLineEdit{lineNumber=60, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

//this is a comment
    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401430527","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:50 GMT 2019","21","[InsertLineEdit{lineNumber=26, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
//this is a comment
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401430589","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:50 GMT 2019","22","[InsertLineEdit{lineNumber=70, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }

//this is a comment

}","1547401430652","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:50 GMT 2019","23","[InsertLineEdit{lineNumber=45, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

//this is a comment
        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401430730","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:50 GMT 2019","24","[InsertLineEdit{lineNumber=48, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
//this is a comment
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401430808","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:50 GMT 2019","25","[InsertLineEdit{lineNumber=20, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
//this is a comment
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401430855","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:50 GMT 2019","26","[InsertLineEdit{lineNumber=54, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
//this is a comment
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401430918","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:50 GMT 2019","27","[InsertLineEdit{lineNumber=23, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
//this is a comment
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401430996","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","28","[InsertLineEdit{lineNumber=54, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
//this is a comment
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431043","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","29","[InsertLineEdit{lineNumber=28, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
//this is a comment
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431089","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","30","[InsertLineEdit{lineNumber=43, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
//this is a comment
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431152","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","31","[InsertLineEdit{lineNumber=47, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

//this is a comment
        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431214","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","32","[InsertLineEdit{lineNumber=7, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
//this is a comment
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431277","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","33","[InsertLineEdit{lineNumber=70, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }

//this is a comment

}","1547401431339","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","34","[InsertLineEdit{lineNumber=40, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
//this is a comment
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431449","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","35","[InsertLineEdit{lineNumber=62, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
//this is a comment

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431496","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","36","[InsertLineEdit{lineNumber=63, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

//this is a comment
        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431542","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","37","[InsertLineEdit{lineNumber=21, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
//this is a comment
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431605","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","38","[InsertLineEdit{lineNumber=47, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

//this is a comment
        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431652","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","39","[InsertLineEdit{lineNumber=50, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
//this is a comment
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431714","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","40","[InsertLineEdit{lineNumber=31, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
//this is a comment
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431761","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","41","[InsertLineEdit{lineNumber=45, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

//this is a comment
        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431808","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","42","[InsertLineEdit{lineNumber=2, lineContents='//this is a comment'}]","
public class TriangleCPU {
//this is a comment
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431870","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","43","[InsertLineEdit{lineNumber=62, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
//this is a comment

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431933","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:51 GMT 2019","44","[InsertLineEdit{lineNumber=25, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
//this is a comment
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401431980","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","45","[InsertLineEdit{lineNumber=68, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
//this is a comment
    }


}","1547401432042","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","46","[InsertLineEdit{lineNumber=35, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
//this is a comment
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401432089","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","47","[InsertLineEdit{lineNumber=35, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
//this is a comment
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401432136","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","48","[InsertLineEdit{lineNumber=63, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

//this is a comment
        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401432183","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","49","[InsertLineEdit{lineNumber=49, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
//this is a comment
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401432277","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","50","[InsertLineEdit{lineNumber=44, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1
//this is a comment

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401432323","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","51","[InsertLineEdit{lineNumber=64, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);
//this is a comment

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401432386","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","52","[InsertLineEdit{lineNumber=37, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
//this is a comment
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401432433","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","53","[InsertLineEdit{lineNumber=11, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
//this is a comment
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401432495","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","54","[InsertLineEdit{lineNumber=20, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
//this is a comment
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401432558","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","55","[InsertLineEdit{lineNumber=13, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
//this is a comment
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401432589","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","56","[InsertLineEdit{lineNumber=71, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


//this is a comment
}","1547401432636","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","57","[InsertLineEdit{lineNumber=0, lineContents='//this is a comment'}]","//this is a comment

public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401432714","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","58","[InsertLineEdit{lineNumber=54, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
//this is a comment
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401432776","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","59","[InsertLineEdit{lineNumber=22, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
//this is a comment
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401432839","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","60","[InsertLineEdit{lineNumber=13, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
//this is a comment
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401432917","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:52 GMT 2019","61","[InsertLineEdit{lineNumber=26, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
//this is a comment
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401432980","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:53 GMT 2019","62","[InsertLineEdit{lineNumber=9, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
//this is a comment
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401433026","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:53 GMT 2019","63","[InsertLineEdit{lineNumber=62, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
//this is a comment

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401433089","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:53 GMT 2019","64","[InsertLineEdit{lineNumber=47, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

//this is a comment
        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401433151","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:53 GMT 2019","65","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401433198","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:53 GMT 2019","66","[InsertLineEdit{lineNumber=34, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
//this is a comment
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401433245","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:53 GMT 2019","67","[InsertLineEdit{lineNumber=24, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
//this is a comment
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401433323","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:53 GMT 2019","68","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401433386","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:53 GMT 2019","69","[InsertLineEdit{lineNumber=38, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
//this is a comment
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401433464","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:53 GMT 2019","70","[InsertLineEdit{lineNumber=19, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
//this is a comment
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401433620","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:53 GMT 2019","71","[InsertLineEdit{lineNumber=14, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
//this is a comment
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401433683","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:53 GMT 2019","72","[InsertLineEdit{lineNumber=11, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
//this is a comment
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401433729","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:53 GMT 2019","73","[InsertLineEdit{lineNumber=42, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

//this is a comment
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401433776","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:53 GMT 2019","74","[InsertLineEdit{lineNumber=30, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
//this is a comment
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401433823","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:53 GMT 2019","75","[InsertLineEdit{lineNumber=26, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
//this is a comment
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401433932","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:53 GMT 2019","76","[InsertLineEdit{lineNumber=43, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
//this is a comment
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401433979","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","77","[InsertLineEdit{lineNumber=16, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
//this is a comment
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401434026","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","78","[InsertLineEdit{lineNumber=52, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
//this is a comment
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401434104","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","79","[InsertLineEdit{lineNumber=33, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
//this is a comment
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401434167","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","80","[InsertLineEdit{lineNumber=37, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
//this is a comment
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401434214","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","81","[InsertLineEdit{lineNumber=10, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
//this is a comment
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401434261","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","82","[InsertLineEdit{lineNumber=66, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);
//this is a comment

        out.close();
    }


}","1547401434307","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","83","[InsertLineEdit{lineNumber=41, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
//this is a comment

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401434370","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","84","[InsertLineEdit{lineNumber=59, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }
//this is a comment

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401434417","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","85","[InsertLineEdit{lineNumber=8, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
//this is a comment
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401434448","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","86","[InsertLineEdit{lineNumber=4, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
//this is a comment
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401434510","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","87","[InsertLineEdit{lineNumber=50, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
//this is a comment
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401434573","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","88","[InsertLineEdit{lineNumber=10, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
//this is a comment
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401434620","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","89","[InsertLineEdit{lineNumber=24, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
//this is a comment
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401434667","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","90","[InsertLineEdit{lineNumber=37, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
//this is a comment
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401434745","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","91","[InsertLineEdit{lineNumber=51, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
//this is a comment
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401434870","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:54 GMT 2019","92","[InsertLineEdit{lineNumber=51, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
//this is a comment
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401434932","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:55 GMT 2019","93","[InsertLineEdit{lineNumber=38, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
//this is a comment
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401435042","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:55 GMT 2019","94","[InsertLineEdit{lineNumber=28, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
//this is a comment
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401435151","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:55 GMT 2019","95","[InsertLineEdit{lineNumber=11, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
//this is a comment
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401435229","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:55 GMT 2019","96","[InsertLineEdit{lineNumber=51, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
//this is a comment
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401435276","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:55 GMT 2019","97","[InsertLineEdit{lineNumber=71, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


//this is a comment
}","1547401435338","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:55 GMT 2019","98","[InsertLineEdit{lineNumber=38, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
//this is a comment
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401435385","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:55 GMT 2019","99","[InsertLineEdit{lineNumber=19, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
//this is a comment
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401435448","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:43:55 GMT 2019","100","[InsertLineEdit{lineNumber=47, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

//this is a comment
        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401435510","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:41 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401541255","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:41 GMT 2019","2","[InsertLineEdit{lineNumber=71, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


//this is a comment
}","1547401541443","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:41 GMT 2019","3","[InsertLineEdit{lineNumber=14, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
//this is a comment
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401541521","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:41 GMT 2019","4","[InsertLineEdit{lineNumber=68, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
//this is a comment
    }


}","1547401541599","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:41 GMT 2019","5","[InsertLineEdit{lineNumber=39, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
//this is a comment
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401541677","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:41 GMT 2019","6","[InsertLineEdit{lineNumber=0, lineContents='//this is a comment'}]","//this is a comment

public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401541739","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:41 GMT 2019","7","[InsertLineEdit{lineNumber=35, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
//this is a comment
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401541802","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:41 GMT 2019","8","[InsertLineEdit{lineNumber=40, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
//this is a comment
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401541880","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:41 GMT 2019","9","[InsertLineEdit{lineNumber=57, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

//this is a comment
        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401541943","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:42 GMT 2019","10","[InsertLineEdit{lineNumber=55, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
//this is a comment
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401542036","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:42 GMT 2019","11","[InsertLineEdit{lineNumber=64, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);
//this is a comment

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401542114","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:42 GMT 2019","12","[InsertLineEdit{lineNumber=1, lineContents='//this is a comment'}]","
//this is a comment
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401542177","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:42 GMT 2019","13","[InsertLineEdit{lineNumber=25, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
//this is a comment
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401542255","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:42 GMT 2019","14","[InsertLineEdit{lineNumber=34, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
//this is a comment
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401542302","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:42 GMT 2019","15","[InsertLineEdit{lineNumber=37, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
//this is a comment
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401542364","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:42 GMT 2019","16","[InsertLineEdit{lineNumber=8, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
//this is a comment
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401542411","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:42 GMT 2019","17","[InsertLineEdit{lineNumber=54, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
//this is a comment
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401542474","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:42 GMT 2019","18","[InsertLineEdit{lineNumber=22, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
//this is a comment
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401542583","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:42 GMT 2019","19","[InsertLineEdit{lineNumber=52, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
//this is a comment
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401542755","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:42 GMT 2019","20","[InsertLineEdit{lineNumber=20, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
//this is a comment
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401542833","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:42 GMT 2019","21","[InsertLineEdit{lineNumber=53, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
//this is a comment
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401542911","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:42 GMT 2019","22","[InsertLineEdit{lineNumber=40, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
//this is a comment
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401542974","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:43 GMT 2019","23","[InsertLineEdit{lineNumber=62, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
//this is a comment

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401543067","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:43 GMT 2019","24","[InsertLineEdit{lineNumber=28, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
//this is a comment
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401543161","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:43 GMT 2019","25","[InsertLineEdit{lineNumber=42, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

//this is a comment
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401543223","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:43 GMT 2019","26","[InsertLineEdit{lineNumber=0, lineContents='//this is a comment'}]","//this is a comment

public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401543286","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:43 GMT 2019","27","[InsertLineEdit{lineNumber=11, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
//this is a comment
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401543348","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:43 GMT 2019","28","[InsertLineEdit{lineNumber=57, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

//this is a comment
        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401543411","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:43 GMT 2019","29","[InsertLineEdit{lineNumber=59, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }
//this is a comment

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401543473","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:43 GMT 2019","30","[InsertLineEdit{lineNumber=70, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }

//this is a comment

}","1547401543536","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:45:43 GMT 2019","31","[InsertLineEdit{lineNumber=39, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
//this is a comment
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401543614","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:46:06 GMT 2019","1","[InsertLineEdit{lineNumber=53, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
//this is a comment
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401566839","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:46:07 GMT 2019","2","[InsertLineEdit{lineNumber=4, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
//this is a comment
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401567073","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:48:25 GMT 2019","1","[InsertLineEdit{lineNumber=41, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
//this is a comment


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547401703345","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:48:27 GMT 2019","2","[InsertLineEdit{lineNumber=28, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
//this is a comment
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }


    public static void main(String[] args) {
        classifyTriangle(1,1,1);

    }


}","1547401705577","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:49:39 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401779666","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:49:39 GMT 2019","2","[InsertLineEdit{lineNumber=12, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
//this is a comment
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401779822","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:50:25 GMT 2019","1","[InsertLineEdit{lineNumber=37, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
//this is a comment
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401825889","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:50:26 GMT 2019","2","[InsertLineEdit{lineNumber=63, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

//this is a comment
        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401826014","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:50:46 GMT 2019","1","[InsertLineEdit{lineNumber=15, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
//this is a comment
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401846713","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:50:46 GMT 2019","2","[InsertLineEdit{lineNumber=33, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
//this is a comment
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }


}","1547401846822","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:52:11 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
//this is a comment
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }





}","1547401931726","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:52:11 GMT 2019","2","[InsertLineEdit{lineNumber=37, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
//this is a comment
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }





}","1547401931929","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:52:29 GMT 2019","1","[InsertLineEdit{lineNumber=47, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

//this is a comment
        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }





}","1547401949180","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:52:29 GMT 2019","2","[InsertLineEdit{lineNumber=45, lineContents='//this is a comment'}]","
public class TriangleCPU {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

//this is a comment
        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }





}","1547401949383","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:54:23 GMT 2019","1","[InsertLineEdit{lineNumber=58, lineContents='//this is a comment'}]","import java.io.PrintStream;
public class Triangle{
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
//this is a comment
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }





}","1547402063364","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:54:23 GMT 2019","2","[InsertLineEdit{lineNumber=48, lineContents='//this is a comment'}]","import java.io.PrintStream;
public class Triangle{
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
//this is a comment
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }





}","1547402063567","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:55:10 GMT 2019","1","[InsertLineEdit{lineNumber=40, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle{
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
//this is a comment
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }





}","1547402110615","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:55:10 GMT 2019","2","[InsertLineEdit{lineNumber=71, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle{
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }
//this is a comment





}","1547402110802","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:55:45 GMT 2019","1","[InsertLineEdit{lineNumber=5, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle{
    static final int INVALID = 0;
//this is a comment
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }





}","1547402145468","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:55:45 GMT 2019","2","[InsertLineEdit{lineNumber=52, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle{
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
//this is a comment
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }





}","1547402145624","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:57:09 GMT 2019","1","[InsertLineEdit{lineNumber=1, lineContents='//this is a comment'}]","
//this is a comment
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1547402226249","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:57:11 GMT 2019","2","[InsertLineEdit{lineNumber=17, lineContents='//this is a comment'}]","
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
//this is a comment
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
    }
}","1547402229564","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:58:29 GMT 2019","1","[InsertLineEdit{lineNumber=0, lineContents='//this is a comment'}]","//this is a comment
import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }
}","1547402309420","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:58:29 GMT 2019","2","[InsertLineEdit{lineNumber=63, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) {
        classifyTriangle(1,1,1);
//this is a comment

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }
}","1547402309561","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:59:17 GMT 2019","1","[InsertLineEdit{lineNumber=22, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
//this is a comment
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }
}","1547402354890","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 17:59:19 GMT 2019","2","[InsertLineEdit{lineNumber=11, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
//this is a comment
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{
        classifyTriangle(1,1,1);

        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();
    }
}","1547402357331","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 18:00:36 GMT 2019","1","[InsertLineEdit{lineNumber=32, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
//this is a comment
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();

        classifyTriangle(1,1,1);
    }
}","1547402434306","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 18:00:39 GMT 2019","2","[InsertLineEdit{lineNumber=13, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
//this is a comment
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 500, 500);

        out.close();

        classifyTriangle(1,1,1);
    }
}","1547402436975","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 18:01:33 GMT 2019","1","[InsertLineEdit{lineNumber=50, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
//this is a comment
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);

        out.close();

        classifyTriangle(1,1,1);
    }
}","1547402491021","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 18:01:35 GMT 2019","2","[InsertLineEdit{lineNumber=45, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1
//this is a comment

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);

        out.close();

        classifyTriangle(1,1,1);
    }
}","1547402493500","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 18:02:14 GMT 2019","1","[InsertLineEdit{lineNumber=69, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);


//this is a comment

        classifyTriangle(1,1,1);

        out.close();
    }
}","1547402532188","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 13 18:02:17 GMT 2019","2","[InsertLineEdit{lineNumber=28, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
//this is a comment
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);



        classifyTriangle(1,1,1);

        out.close();
    }
}","1547402535076","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Mon Jan 14 13:11:41 GMT 2019","1","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);
        
        classifyTriangle(1,1,1);

        out.close();
    }
}","1547471495434","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Mon Jan 14 13:11:44 GMT 2019","2","[InsertLineEdit{lineNumber=22, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
//this is a comment
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);
        
        classifyTriangle(1,1,1);

        out.close();
    }
}","1547471501735","true","false","1171.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Mon Jan 14 13:12:20 GMT 2019","1","[RemoveLineEdit{lineNumber=28}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
null
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);

        classifyTriangle(1,1,1);

        out.close();
    }
}","1547471540154","false","false","0.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Mon Jan 14 13:12:25 GMT 2019","2","[InsertLineEdit{lineNumber=31, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
//this is a comment
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);

        classifyTriangle(1,1,1);

        out.close();
    }
}","1547471540927","true","true","1171.0","0.0"
"Mon Jan 14 13:17:35 GMT 2019","1","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);

        classifyTriangle(1,1,1);

        out.close();
    }
}","1547471851235","true","true","1171.0","0.0"
"Mon Jan 14 13:17:35 GMT 2019","2","[SwapBlockEdit{blockOneStartNo=66, blockOneEndNo=62, blockTwoStartNo=24, blockTwoEndNo=23}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
        wasteCPU(out, 1000, 1000);
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

            c = tmp;

        classifyTriangle(1,1,1);

        out.close();
    }
}","1547471855552","false","false","0.0","0.0"
"Mon Jan 14 13:18:17 GMT 2019","1","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);

        classifyTriangle(1,1,1);

        out.close();
    }
}","1547471893572","true","true","1171.0","0.0"
"Mon Jan 14 13:18:22 GMT 2019","2","[SwapBlockEdit{blockOneStartNo=16, blockOneEndNo=72, blockTwoStartNo=26, blockTwoEndNo=23}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);

        classifyTriangle(1,1,1);

        out.close();
    }
}","1547471898159","true","true","1171.0","0.0"
"Mon Jan 14 13:18:33 GMT 2019","1","[RemoveLineEdit{lineNumber=45}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1
null
        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);

        classifyTriangle(1,1,1);

        out.close();
    }
}","1547471913164","false","false","0.0","0.0"
"Mon Jan 14 13:18:38 GMT 2019","2","[InsertLineEdit{lineNumber=56, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
//this is a comment
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);

        classifyTriangle(1,1,1);

        out.close();
    }
}","1547471913712","true","true","1171.0","0.0"
"Mon Jan 14 13:18:49 GMT 2019","1","[MoveBlockEdit{startBlockInt=72, endBlockInt=53, newLocation=44}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);

        classifyTriangle(1,1,1);

        out.close();
    }
}","1547471924960","true","true","1171.0","0.0"
"Mon Jan 14 13:18:49 GMT 2019","2","[InsertBreakEdit{lineNumber=65, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);
break;

        wasteCPU(out, 1000, 1000);

        classifyTriangle(1,1,1);

        out.close();
    }
}","1547471929466","false","false","0.0","0.0"
"Mon Jan 14 13:19:04 GMT 2019","1","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);

        classifyTriangle(1,1,1);

        out.close();
    }
}","1547471939752","true","true","1171.0","0.0"
"Mon Jan 14 13:19:08 GMT 2019","2","[SwapBlockEdit{blockOneStartNo=21, blockOneEndNo=63, blockTwoStartNo=45, blockTwoEndNo=8}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);

        classifyTriangle(1,1,1);

        out.close();
    }
}","1547471944135","true","true","1171.0","0.0"
"Mon Jan 14 13:24:14 GMT 2019","1","[IfStatementEdit{lineIndex=23, annaPath=AnnaPath{packages=[], className='Triangle'}}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);

        classifyTriangle(1,1,1);

        out.close();
    }
}","1547472250127","true","true","1171.0","0.0"
"Mon Jan 14 13:24:14 GMT 2019","2","[RemoveLineEdit{lineNumber=44}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
null

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{


        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);

        classifyTriangle(1,1,1);

        out.close();
    }
}","1547472254326","false","false","0.0","0.0"
"Mon Jan 14 13:26:08 GMT 2019","1","[SwapLineEdit{firstLineIndex=9, secondLineIndex=1}]","        delay();
import java.io.PrintStream;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
import java.util.Random;
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);



        out.close();
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547472368185","false","false","0.0","0.0"
"Mon Jan 14 13:26:08 GMT 2019","2","[SwapLineEdit{firstLineIndex=71, secondLineIndex=20}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        PrintStream out = new PrintStream(System.out);

        wasteCPU(out, 1000, 1000);



        out.close();
        if (a > b) {

            int tmp = a;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU(PrintStream out, final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            out.print(i + "", "");
            if (i % 100 == 0) {
                out.println();
            }
            d *= random.nextDouble();
            out.println(""Result: "" + d);
        }

        out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

            a = b;
        classifyTriangle(1,1,1);
    }
}","1547472368659","false","false","0.0","0.0"
"Mon Jan 14 13:30:10 GMT 2019","1","[IfStatementEdit{lineIndex=53, annaPath=AnnaPath{packages=[], className='Triangle'}}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 500, 500);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            System.out.print(i + "", "");
            if (i % 100 == 0) {
                System.out.println();
            }
            d *= random.nextDouble();
            System.out.println(""Result: "" + d);
        }

        System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547472597096","true","true","1171.0","0.0"
"Mon Jan 14 13:30:23 GMT 2019","2","[MoveLineEdit{sourceLineIndex=64, destinationLineIndex=9}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {

        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 500, 500);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            System.out.print(i + "", "");
            if (i % 100 == 0) {
                System.out.println();
            }
            d *= random.nextDouble();
            System.out.println(""Result: "" + d);
        }

        System.out.println(""Finished"");
    }
    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547472610773","true","true","1171.0","0.0"
"Mon Jan 14 13:30:43 GMT 2019","1","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 500, 500);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547472631578","true","true","1171.0","0.0"
"Mon Jan 14 13:30:56 GMT 2019","2","[InsertLineEdit{lineNumber=44, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 500, 500);

        } catch (InterruptedException e) {
//this is a comment
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547472644083","true","true","1171.0","0.0"
"Mon Jan 14 13:31:23 GMT 2019","1","[MoveBlockEdit{startBlockInt=20, endBlockInt=33, newLocation=37}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
        }
            int tmp = b;
            c = tmp;
        if (a + b <= c) {
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
        } else {
        }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);
            return INVALID;

            return EQUALATERAL;
        } catch (InterruptedException e) {
            return ISOCELES;
            // do nothing
            return SCALENE;
        }
    }
    }
            c = tmp;
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        if (b > c) {
        Random random = new Random(1); // seed 1
            b = c;

        }
        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;","1547472683967","false","false","0.0","0.0"
"Mon Jan 14 13:31:23 GMT 2019","2","[MoveLineEdit{sourceLineIndex=65, destinationLineIndex=48}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
    public static void main(String[] args) throws Exception{
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }


        classifyTriangle(1,1,1);

    }
}","1547472683995","false","false","0.0","0.0"
"Mon Jan 14 13:34:27 GMT 2019","1","[SwapLineEdit{firstLineIndex=5, secondLineIndex=3}]","import java.io.PrintStream;
import java.util.Random;
    static final int SCALENE = 1;

public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547472867251","false","false","0.0","0.0"
"Mon Jan 14 13:34:27 GMT 2019","2","[SwapBlockEdit{blockOneStartNo=66, blockOneEndNo=13, blockTwoStartNo=47, blockTwoEndNo=34}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }

        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        classifyTriangle(1,1,1);

    }
}","1547472867281","false","false","0.0","0.0"
"Mon Jan 14 13:37:12 GMT 2019","1","[IfStatementEdit{lineIndex=60, annaPath=AnnaPath{packages=[], className='Triangle'}}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547473011333","true","true","1171.0","0.0"
"Mon Jan 14 13:37:12 GMT 2019","2","[RemoveLineEdit{lineNumber=56}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
null
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547473032143","false","false","0.0","0.0"
"Tue Jan 15 13:24:12 GMT 2019","0","[MoveLineEdit{sourceLineIndex=0, destinationLineIndex=57}]","import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
import java.io.PrintStream;
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558652001","false","false","0.0","0.0"
"Tue Jan 15 13:24:33 GMT 2019","1","[InsertLineEdit{lineNumber=48, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
//this is a comment
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558652844","true","true","1171.0","0.0"
"Tue Jan 15 13:24:54 GMT 2019","2","[InsertLineEdit{lineNumber=26, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
//this is a comment
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558673993","true","true","1171.0","0.0"
"Tue Jan 15 13:24:54 GMT 2019","3","[SwapLineEdit{firstLineIndex=43, secondLineIndex=38}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
        } catch (InterruptedException e) {
    private static void delay() {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);
        try {

            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558694361","false","false","0.0","0.0"
"Tue Jan 15 13:24:54 GMT 2019","4","[MoveLineEdit{sourceLineIndex=12, destinationLineIndex=39}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
        if (a > b) {

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558694392","false","false","0.0","0.0"
"Tue Jan 15 13:24:54 GMT 2019","5","[SwapLineEdit{firstLineIndex=11, secondLineIndex=20}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        }
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;

            c = tmp;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558694517","false","false","0.0","0.0"
"Tue Jan 15 13:24:54 GMT 2019","6","[MoveLineEdit{sourceLineIndex=38, destinationLineIndex=20}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
        try {
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558694564","false","false","0.0","0.0"
"Tue Jan 15 13:24:54 GMT 2019","7","[MoveBlockEdit{startBlockInt=11, endBlockInt=14, newLocation=45}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c
        if (a > b) {
            a = b;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }

    }
            int tmp = a;
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
            b = tmp;
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}

        if (a > b) {
            int tmp = a;","1547558694736","false","false","0.0","0.0"
"Tue Jan 15 13:25:16 GMT 2019","8","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558695220","true","true","1171.0","0.0"
"Tue Jan 15 13:25:36 GMT 2019","9","[InsertLineEdit{lineNumber=52, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

//this is a comment
        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558716139","true","true","1171.0","0.0"
"Tue Jan 15 13:25:36 GMT 2019","10","[SwapLineEdit{firstLineIndex=40, secondLineIndex=56}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            }
            Thread.sleep(100);
            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {

                //System.out.println();
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558736144","false","false","0.0","0.0"
"Tue Jan 15 13:25:56 GMT 2019","11","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558736253","true","true","1171.0","0.0"
"Tue Jan 15 13:25:56 GMT 2019","12","[SwapLineEdit{firstLineIndex=18, secondLineIndex=39}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }

        if (a > c) {
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            int tmp = a;
            Thread.sleep(100);
            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558756422","false","false","0.0","0.0"
"Tue Jan 15 13:25:56 GMT 2019","13","[MoveLineEdit{sourceLineIndex=69, destinationLineIndex=55}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
    }
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

}","1547558756438","false","false","0.0","0.0"
"Tue Jan 15 13:26:17 GMT 2019","14","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558756516","true","true","1171.0","0.0"
"Tue Jan 15 13:26:37 GMT 2019","15","[MoveBlockEdit{startBlockInt=12, endBlockInt=8, newLocation=27}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558777176","true","true","1171.0","0.0"
"Tue Jan 15 13:26:37 GMT 2019","16","[RemoveBlockEdit{startBlockInt=21, endBlockInt=45}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        if (b > c) {
            b = c;
        }
            return INVALID;
            return EQUALATERAL;
            return ISOCELES;
            return SCALENE;
    }
        try {


            // do nothing
    }
        Random random = new Random(1); // seed 1
        Thread.sleep(startDelayMS);
        double d = 1;
            //System.out.print(i + "", "");
                //System.out.println();
            d *= random.nextDouble();
        }
       // System.out.println(""Finished"");



    }
}","1547558797335","false","false","0.0","0.0"
"Tue Jan 15 13:26:58 GMT 2019","17","[SwapBlockEdit{blockOneStartNo=52, blockOneEndNo=42, blockTwoStartNo=45, blockTwoEndNo=68}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558797451","true","true","1171.0","0.0"
"Tue Jan 15 13:27:18 GMT 2019","18","[RemoveBlockEdit{startBlockInt=66, endBlockInt=14}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558818208","true","true","1171.0","0.0"
"Tue Jan 15 13:27:38 GMT 2019","19","[SwapBlockEdit{blockOneStartNo=24, blockOneEndNo=23, blockTwoStartNo=30, blockTwoEndNo=42}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558838267","true","true","1171.0","0.0"
"Tue Jan 15 13:27:58 GMT 2019","20","[MoveLineEdit{sourceLineIndex=10, destinationLineIndex=50}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);
        // Sort the sides so that a <= b <= c

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558858267","true","true","1171.0","0.0"
"Tue Jan 15 13:27:58 GMT 2019","21","[SwapLineEdit{firstLineIndex=30, secondLineIndex=24}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            return EQUALATERAL;
            int tmp = b;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
            b = c;
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558878332","false","false","0.0","0.0"
"Tue Jan 15 13:27:58 GMT 2019","22","[InsertBreakEdit{lineNumber=23, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
break;
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558878425","false","false","0.0","0.0"
"Tue Jan 15 13:28:18 GMT 2019","23","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558878519","true","true","1171.0","0.0"
"Tue Jan 15 13:28:18 GMT 2019","24","[SwapLineEdit{firstLineIndex=66, secondLineIndex=21}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;

            c = tmp;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

        }
    public static void main(String[] args) throws Exception{
        classifyTriangle(1,1,1);

    }
}","1547558898525","false","false","0.0","0.0"
"Tue Jan 15 13:28:18 GMT 2019","25","[MoveLineEdit{sourceLineIndex=20, destinationLineIndex=48}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1
            c = tmp;

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558898619","false","false","0.0","0.0"
"Tue Jan 15 13:28:38 GMT 2019","26","[MoveLineEdit{sourceLineIndex=51, destinationLineIndex=51}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558898697","true","true","1171.0","0.0"
"Tue Jan 15 13:28:58 GMT 2019","27","[RemoveBlockEdit{startBlockInt=20, endBlockInt=13}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558918832","true","true","1171.0","0.0"
"Tue Jan 15 13:28:58 GMT 2019","28","[InsertBreakEdit{lineNumber=7, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
break;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558938891","false","false","0.0","0.0"
"Tue Jan 15 13:28:58 GMT 2019","29","[MoveLineEdit{sourceLineIndex=22, destinationLineIndex=19}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
        if (b > c) {
            a = c;
            c = tmp;
        }
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558938985","false","false","0.0","0.0"
"Tue Jan 15 13:29:19 GMT 2019","30","[RemoveBlockEdit{startBlockInt=33, endBlockInt=13}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547558939063","true","true","1171.0","0.0"
"Tue Jan 15 13:30:01 GMT 2019","31","[SwapLineEdit{firstLineIndex=59, secondLineIndex=66}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
        classifyTriangle(1,1,1);
            d *= random.nextDouble();
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{
           // System.out.println(""Result: "" + d);


    }
}","1547558959131","true","false","1171.0","0.0"
"Tue Jan 15 13:30:01 GMT 2019","32","[InsertBreakEdit{lineNumber=30, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
break;
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559001262","false","false","0.0","0.0"
"Tue Jan 15 13:30:01 GMT 2019","33","[SwapLineEdit{firstLineIndex=21, secondLineIndex=4}]","import java.io.PrintStream;
import java.util.Random;

        }
public class Triangle {
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
    static final int INVALID = 0;
            c = tmp;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559001278","false","false","0.0","0.0"
"Tue Jan 15 13:30:01 GMT 2019","34","[MoveLineEdit{sourceLineIndex=25, destinationLineIndex=34}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
            c = tmp;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559001340","false","false","0.0","0.0"
"Tue Jan 15 13:30:21 GMT 2019","35","[IfStatementEdit{lineIndex=53, annaPath=AnnaPath{packages=[], className='Triangle'}}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559001450","true","true","1171.0","0.0"
"Tue Jan 15 13:30:41 GMT 2019","36","[InsertLineEdit{lineNumber=47, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
//this is a comment
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559021450","true","true","1171.0","0.0"
"Tue Jan 15 13:31:01 GMT 2019","37","[IfStatementEdit{lineIndex=42, annaPath=AnnaPath{packages=[], className='Triangle'}}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559041532","true","true","1171.0","0.0"
"Tue Jan 15 13:31:01 GMT 2019","38","[MoveBlockEdit{startBlockInt=36, endBlockInt=61, newLocation=29}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }","1547559061482","false","false","0.0","0.0"
"Tue Jan 15 13:31:01 GMT 2019","39","[InsertBreakEdit{lineNumber=17, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
break;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559061544","false","false","0.0","0.0"
"Tue Jan 15 13:31:21 GMT 2019","40","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559061607","true","true","1171.0","0.0"
"Tue Jan 15 13:31:41 GMT 2019","41","[MoveBlockEdit{startBlockInt=60, endBlockInt=50, newLocation=8}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559081572","true","true","1171.0","0.0"
"Tue Jan 15 13:31:41 GMT 2019","42","[MoveLineEdit{sourceLineIndex=57, destinationLineIndex=52}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

            }
        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559101498","false","false","0.0","0.0"
"Tue Jan 15 13:32:01 GMT 2019","43","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559101560","true","true","1171.0","0.0"
"Tue Jan 15 13:32:01 GMT 2019","44","[InsertBreakEdit{lineNumber=32, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
break;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559121657","false","false","0.0","0.0"
"Tue Jan 15 13:32:21 GMT 2019","45","[MoveBlockEdit{startBlockInt=66, endBlockInt=7, newLocation=37}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559121720","true","true","1171.0","0.0"
"Tue Jan 15 13:32:41 GMT 2019","46","[RemoveBlockEdit{startBlockInt=22, endBlockInt=6}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559141699","true","true","1171.0","0.0"
"Tue Jan 15 13:33:02 GMT 2019","47","[MoveBlockEdit{startBlockInt=65, endBlockInt=59, newLocation=21}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559161898","true","true","1171.0","0.0"
"Tue Jan 15 13:33:23 GMT 2019","48","[MoveBlockEdit{startBlockInt=50, endBlockInt=14, newLocation=63}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559182665","true","true","1171.0","0.0"
"Tue Jan 15 13:33:43 GMT 2019","49","[SwapBlockEdit{blockOneStartNo=57, blockOneEndNo=43, blockTwoStartNo=7, blockTwoEndNo=29}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559203260","true","true","1171.0","0.0"
"Tue Jan 15 13:34:04 GMT 2019","50","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559223789","true","true","1171.0","0.0"
"Tue Jan 15 13:34:04 GMT 2019","51","[MoveBlockEdit{startBlockInt=24, endBlockInt=38, newLocation=22}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        if (b > c) {
            int tmp = b;
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {","1547559244194","false","false","0.0","0.0"
"Tue Jan 15 13:34:24 GMT 2019","52","[IfStatementEdit{lineIndex=29, annaPath=AnnaPath{packages=[], className='Triangle'}}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559244319","true","true","1171.0","0.0"
"Tue Jan 15 13:34:24 GMT 2019","53","[RemoveLineEdit{lineNumber=53}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
null
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559264941","false","false","0.0","0.0"
"Tue Jan 15 13:34:50 GMT 2019","54","[IfStatementEdit{lineIndex=27, annaPath=AnnaPath{packages=[], className='Triangle'}}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559265003","true","true","1171.0","0.0"
"Tue Jan 15 13:34:50 GMT 2019","55","[SwapLineEdit{firstLineIndex=11, secondLineIndex=59}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        }
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();

           // System.out.println(""Result: "" + d);

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559290783","false","false","0.0","0.0"
"Tue Jan 15 13:35:11 GMT 2019","56","[MoveLineEdit{sourceLineIndex=40, destinationLineIndex=7}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;

    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559290908","true","true","1171.0","0.0"
"Tue Jan 15 13:35:31 GMT 2019","57","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559311541","true","true","1171.0","0.0"
"Tue Jan 15 13:35:52 GMT 2019","58","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559331936","true","true","1171.0","0.0"
"Tue Jan 15 13:36:12 GMT 2019","59","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559352321","true","true","1171.0","0.0"
"Tue Jan 15 13:36:12 GMT 2019","60","[MoveBlockEdit{startBlockInt=21, endBlockInt=54, newLocation=64}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        if (b > c) {
            b = c;
        }
            return INVALID;
            return EQUALATERAL;
            return ISOCELES;
            return SCALENE;
    }
        try {


            // do nothing
    }
        Random random = new Random(1); // seed 1
        Thread.sleep(startDelayMS);
        double d = 1;
            //System.out.print(i + "", "");
                //System.out.println();
            d *= random.nextDouble();
        }
       // System.out.println(""Finished"");

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        } catch (InterruptedException e) {
        }
        }
        if (a + b <= c) {
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
            return INVALID;

        } else if (a == b && b == c) {

            return EQUALATERAL;
        for (int i = 0; i < iterations; ++i) {
        } else if (a == b || b == c) {
            if (i % 100 == 0) {
            return ISOCELES;
            }
        } else {
           // System.out.println(""Result: "" + d);
            return SCALENE;

        }
    }
    }
        }
    private static void delay() {
            int tmp = b;
        try {
            c = tmp;
            Thread.sleep(100);
        if (a + b <= c) {

        } else if (a == b && b == c) {
            wasteCPU( 1000, 1000);
        } else if (a == b || b == c) {

        } else {
        } catch (InterruptedException e) {
        }
            // do nothing
    private static void delay() {
        }
            Thread.sleep(100);
    }
            wasteCPU( 1000, 1000);
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {","1547559372954","false","false","0.0","0.0"
"Tue Jan 15 13:36:12 GMT 2019","61","[SwapBlockEdit{blockOneStartNo=63, blockOneEndNo=12, blockTwoStartNo=37, blockTwoEndNo=7}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    }
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    private static void delay() {

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559372969","false","false","0.0","0.0"
"Tue Jan 15 13:36:33 GMT 2019","62","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559373157","true","true","1171.0","0.0"
"Tue Jan 15 13:36:33 GMT 2019","63","[InsertBreakEdit{lineNumber=31, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
break;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559393392","false","false","0.0","0.0"
"Tue Jan 15 13:36:53 GMT 2019","64","[InsertBreakEdit{lineNumber=60, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
break;
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559393454","true","true","1171.0","0.0"
"Tue Jan 15 13:36:53 GMT 2019","65","[InsertBreakEdit{lineNumber=47, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
break;
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559413894","false","false","0.0","0.0"
"Tue Jan 15 13:37:15 GMT 2019","66","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559414004","true","true","1171.0","0.0"
"Tue Jan 15 13:37:35 GMT 2019","67","[InsertLineEdit{lineNumber=7, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
//this is a comment
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559435218","true","true","1171.0","0.0"
"Tue Jan 15 13:37:56 GMT 2019","68","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559455866","true","true","1171.0","0.0"
"Tue Jan 15 13:37:56 GMT 2019","69","[SwapLineEdit{firstLineIndex=41, secondLineIndex=56}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);
            }


        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
            wasteCPU( 1000, 1000);
                //System.out.println();
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559476769","false","false","0.0","0.0"
"Tue Jan 15 13:38:18 GMT 2019","70","[InsertLineEdit{lineNumber=70, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
//this is a comment
}","1547559476832","true","true","1171.0","0.0"
"Tue Jan 15 13:38:19 GMT 2019","71","[InsertBreakEdit{lineNumber=15, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
break;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559499082","false","false","0.0","0.0"
"Tue Jan 15 13:38:39 GMT 2019","72","[InsertLineEdit{lineNumber=19, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
//this is a comment
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559499161","true","true","1171.0","0.0"
"Tue Jan 15 13:38:59 GMT 2019","73","[InsertLineEdit{lineNumber=2, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;
//this is a comment

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559519373","true","true","1171.0","0.0"
"Tue Jan 15 13:38:59 GMT 2019","74","[MoveLineEdit{sourceLineIndex=27, destinationLineIndex=1}]","import java.io.PrintStream;
        if (a + b <= c) {
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559539499","false","false","0.0","0.0"
"Tue Jan 15 13:38:59 GMT 2019","75","[MoveLineEdit{sourceLineIndex=31, destinationLineIndex=4}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
        } else if (a == b || b == c) {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559539514","false","false","0.0","0.0"
"Tue Jan 15 13:38:59 GMT 2019","76","[InsertBreakEdit{lineNumber=9, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
break;
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559539608","false","false","0.0","0.0"
"Tue Jan 15 13:39:20 GMT 2019","77","[SwapBlockEdit{blockOneStartNo=49, blockOneEndNo=21, blockTwoStartNo=26, blockTwoEndNo=54}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559539655","true","true","1171.0","0.0"
"Tue Jan 15 13:39:40 GMT 2019","78","[MoveBlockEdit{startBlockInt=24, endBlockInt=12, newLocation=24}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559560175","true","true","1171.0","0.0"
"Tue Jan 15 13:40:00 GMT 2019","79","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559580384","true","true","1171.0","0.0"
"Tue Jan 15 13:40:00 GMT 2019","80","[InsertBreakEdit{lineNumber=58, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
break;
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559600478","false","false","0.0","0.0"
"Tue Jan 15 13:40:00 GMT 2019","81","[MoveBlockEdit{startBlockInt=1, endBlockInt=67, newLocation=0}]","import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

import java.io.PrintStream;
        classifyTriangle(1,1,1);

    }
}
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{
","1547559600494","false","false","0.0","0.0"
"Tue Jan 15 13:40:20 GMT 2019","82","[MoveBlockEdit{startBlockInt=68, endBlockInt=20, newLocation=52}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559600556","true","true","1171.0","0.0"
"Tue Jan 15 13:40:41 GMT 2019","83","[MoveBlockEdit{startBlockInt=64, endBlockInt=24, newLocation=68}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559620857","true","true","1171.0","0.0"
"Tue Jan 15 13:41:02 GMT 2019","84","[MoveBlockEdit{startBlockInt=61, endBlockInt=26, newLocation=54}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559641211","true","true","1171.0","0.0"
"Tue Jan 15 13:41:02 GMT 2019","85","[MoveLineEdit{sourceLineIndex=5, destinationLineIndex=1}]","import java.io.PrintStream;
    static final int SCALENE = 1;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559662013","false","false","0.0","0.0"
"Tue Jan 15 13:41:02 GMT 2019","86","[SwapLineEdit{firstLineIndex=65, secondLineIndex=50}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1
    public static void main(String[] args) throws Exception{


        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }
        Thread.sleep(startDelayMS);


        classifyTriangle(1,1,1);

    }
}","1547559662029","false","false","0.0","0.0"
"Tue Jan 15 13:41:22 GMT 2019","87","[InsertLineEdit{lineNumber=67, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

//this is a comment
        classifyTriangle(1,1,1);

    }
}","1547559662138","true","true","1171.0","0.0"
"Tue Jan 15 13:41:42 GMT 2019","88","[InsertLineEdit{lineNumber=9, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
//this is a comment
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559682561","true","true","1171.0","0.0"
"Tue Jan 15 13:42:03 GMT 2019","89","[MoveBlockEdit{startBlockInt=70, endBlockInt=21, newLocation=7}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559702701","true","true","1171.0","0.0"
"Tue Jan 15 13:42:03 GMT 2019","90","[MoveLineEdit{sourceLineIndex=38, destinationLineIndex=44}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        try {
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559723541","false","false","0.0","0.0"
"Tue Jan 15 13:42:24 GMT 2019","91","[IfStatementEdit{lineIndex=11, annaPath=AnnaPath{packages=[], className='Triangle'}}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559723666","true","true","1171.0","0.0"
"Tue Jan 15 13:42:24 GMT 2019","92","[SwapLineEdit{firstLineIndex=31, secondLineIndex=15}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
        } else if (a == b || b == c) {
            a = b;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            b = tmp;
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559744874","false","false","0.0","0.0"
"Tue Jan 15 13:42:45 GMT 2019","93","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559745077","true","true","1171.0","0.0"
"Tue Jan 15 13:43:05 GMT 2019","94","[SwapBlockEdit{blockOneStartNo=8, blockOneEndNo=36, blockTwoStartNo=43, blockTwoEndNo=19}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559765763","true","true","1171.0","0.0"
"Tue Jan 15 13:43:05 GMT 2019","95","[MoveLineEdit{sourceLineIndex=28, destinationLineIndex=46}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
            return INVALID;
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559785745","false","false","0.0","0.0"
"Tue Jan 15 13:43:26 GMT 2019","96","[SwapBlockEdit{blockOneStartNo=53, blockOneEndNo=23, blockTwoStartNo=20, blockTwoEndNo=63}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559785845","true","true","1171.0","0.0"
"Tue Jan 15 13:43:47 GMT 2019","97","[InsertLineEdit{lineNumber=31, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
//this is a comment
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559806789","true","true","1171.0","0.0"
"Tue Jan 15 13:44:09 GMT 2019","98","[InsertBreakEdit{lineNumber=59, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
break;
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547559827783","true","true","1171.0","0.0"
"Wed Jan 16 18:59:30 GMT 2019","0","[MoveLineEdit{sourceLineIndex=33, destinationLineIndex=55}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
        } else {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665170045","false","false","0.0","0.0"
"Wed Jan 16 18:59:53 GMT 2019","1","[MoveBlockEdit{startBlockInt=41, endBlockInt=8, newLocation=20}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665170592","true","true","1171.0","0.0"
"Wed Jan 16 19:00:13 GMT 2019","2","[IfStatementEdit{lineIndex=38, annaPath=AnnaPath{packages=[], className='Triangle'}}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665193418","true","true","1171.0","0.0"
"Wed Jan 16 19:00:13 GMT 2019","3","[SwapLineEdit{firstLineIndex=60, secondLineIndex=11}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        }
        // Sort the sides so that a <= b <= c
        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();

           // System.out.println(""Result: "" + d);

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665213581","false","false","0.0","0.0"
"Wed Jan 16 19:00:13 GMT 2019","4","[SwapLineEdit{firstLineIndex=54, secondLineIndex=23}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
            //System.out.print(i + "", "");
        if (b > c) {
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
            int tmp = b;
        for (int i = 0; i < iterations; ++i) {
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665213721","false","false","0.0","0.0"
"Wed Jan 16 19:00:13 GMT 2019","5","[SwapLineEdit{firstLineIndex=55, secondLineIndex=38}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
            if (i % 100 == 0) {
    private static void delay() {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
        try {
            //System.out.print(i + "", "");
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665213799","false","false","0.0","0.0"
"Wed Jan 16 19:00:13 GMT 2019","6","[RemoveLineEdit{lineNumber=30}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
null
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665213846","false","false","0.0","0.0"
"Wed Jan 16 19:00:13 GMT 2019","7","[SwapLineEdit{firstLineIndex=41, secondLineIndex=37}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
            wasteCPU( 1000, 1000);
    }
        try {
            Thread.sleep(100);
    private static void delay() {


        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665213862","false","false","0.0","0.0"
"Wed Jan 16 19:00:13 GMT 2019","8","[InsertBreakEdit{lineNumber=70, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
break;
}","1547665213909","false","false","0.0","0.0"
"Wed Jan 16 19:00:34 GMT 2019","9","[MoveLineEdit{sourceLineIndex=15, destinationLineIndex=15}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665214128","true","true","1171.0","0.0"
"Wed Jan 16 19:00:54 GMT 2019","10","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665234244","true","true","1171.0","0.0"
"Wed Jan 16 19:02:01 GMT 2019","0","[MoveLineEdit{sourceLineIndex=61, destinationLineIndex=18}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {

            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }
       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665300869","true","true","1171.0","0.0"
"Wed Jan 16 19:02:01 GMT 2019","1","[InsertBreakEdit{lineNumber=55, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
break;
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665321120","false","false","0.0","0.0"
"Wed Jan 16 19:02:21 GMT 2019","2","[IfStatementEdit{lineIndex=32, annaPath=AnnaPath{packages=[], className='Triangle'}}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665321323","true","true","1171.0","0.0"
"Wed Jan 16 19:02:21 GMT 2019","3","[InsertBreakEdit{lineNumber=41, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

break;
            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665341513","false","false","0.0","0.0"
"Wed Jan 16 19:02:21 GMT 2019","4","[SwapLineEdit{firstLineIndex=52, secondLineIndex=54}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);
            if (i % 100 == 0) {

        for (int i = 0; i < iterations; ++i) {
        double d = 1;
            //System.out.print(i + "", "");
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665341575","false","false","0.0","0.0"
"Wed Jan 16 19:02:21 GMT 2019","5","[RemoveLineEdit{lineNumber=46}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
null
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665341591","false","false","0.0","0.0"
"Wed Jan 16 19:02:41 GMT 2019","6","[SwapBlockEdit{blockOneStartNo=17, blockOneEndNo=27, blockTwoStartNo=39, blockTwoEndNo=4}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665341794","true","true","1171.0","0.0"
"Wed Jan 16 19:54:45 GMT 2019","7","[InsertBreakEdit{lineNumber=60, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
break;
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547665361803","true","true","1171.0","0.0"
"Wed Jan 16 19:55:06 GMT 2019","8","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668486114","true","true","1171.0","0.0"
"Wed Jan 16 19:55:06 GMT 2019","9","[SwapLineEdit{firstLineIndex=50, secondLineIndex=34}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        Thread.sleep(startDelayMS);
        } else {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1
            return SCALENE;


        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668506972","false","false","0.0","0.0"
"Wed Jan 16 19:55:53 GMT 2019","0","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668533614","true","true","1171.0","0.0"
"Wed Jan 16 19:55:53 GMT 2019","1","[SwapLineEdit{firstLineIndex=20, secondLineIndex=36}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
    private static void delay() {
            a = c;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
            c = tmp;
    }
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668553802","false","false","0.0","0.0"
"Wed Jan 16 19:55:53 GMT 2019","2","[RemoveLineEdit{lineNumber=32}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
null
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668553818","false","false","0.0","0.0"
"Wed Jan 16 19:57:40 GMT 2019","0","[SwapBlockEdit{blockOneStartNo=24, blockOneEndNo=57, blockTwoStartNo=43, blockTwoEndNo=66}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668640182","true","true","1171.0","0.0"
"Wed Jan 16 19:57:40 GMT 2019","1","[InsertBreakEdit{lineNumber=23, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
break;
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668660501","false","false","0.0","0.0"
"Wed Jan 16 19:57:40 GMT 2019","2","[RemoveLineEdit{lineNumber=53}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
null
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668660516","false","false","0.0","0.0"
"Wed Jan 16 19:58:00 GMT 2019","3","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668660751","true","true","1171.0","0.0"
"Wed Jan 16 19:58:00 GMT 2019","4","[MoveLineEdit{sourceLineIndex=3, destinationLineIndex=57}]","import java.io.PrintStream;
import java.util.Random;

    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
public class Triangle {
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668680888","false","false","0.0","0.0"
"Wed Jan 16 19:58:00 GMT 2019","5","[SwapLineEdit{firstLineIndex=43, secondLineIndex=51}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);
        double d = 1;

            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);
        } catch (InterruptedException e) {

        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668680904","false","false","0.0","0.0"
"Wed Jan 16 19:58:21 GMT 2019","6","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668681028","true","true","1171.0","0.0"
"Wed Jan 16 19:58:21 GMT 2019","7","[InsertBreakEdit{lineNumber=8, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
break;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668701110","false","false","0.0","0.0"
"Wed Jan 16 19:58:41 GMT 2019","8","[MoveBlockEdit{startBlockInt=33, endBlockInt=27, newLocation=21}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668701189","true","true","1171.0","0.0"
"Wed Jan 16 19:59:01 GMT 2019","9","[SwapBlockEdit{blockOneStartNo=5, blockOneEndNo=10, blockTwoStartNo=52, blockTwoEndNo=31}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668721543","true","true","1171.0","0.0"
"Wed Jan 16 19:59:21 GMT 2019","10","[MoveBlockEdit{startBlockInt=38, endBlockInt=10, newLocation=18}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547668741697","true","true","1171.0","0.0"
"Wed Jan 16 19:59:41 GMT 2019","11","[InsertLineEdit{lineNumber=68, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);
//this is a comment

    }
}","1547668761698","true","true","1171.0","0.0"
"Sat Jan 19 17:31:51 GMT 2019","0","[InsertBreakEdit{lineNumber=22, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
break;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547919111274","false","false","0.0","0.0"
"Sat Jan 19 17:56:22 GMT 2019","0","[SwapLineEdit{firstLineIndex=18, secondLineIndex=23}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
            b = c;
        if (a > c) {
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = a;
            int tmp = b;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547920582100","false","false","0.0","0.0"
"Sat Jan 19 17:56:22 GMT 2019","1","[MoveLineEdit{sourceLineIndex=7, destinationLineIndex=30}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
    static final int ISOCELES = 3;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547920582210","false","false","0.0","0.0"
"Sat Jan 19 18:27:15 GMT 2019","0","[InsertBreakEdit{lineNumber=38, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
break;
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547922435077","false","false","0.0","0.0"
"Sat Jan 19 18:44:37 GMT 2019","0","[MoveBlockEdit{startBlockInt=24, endBlockInt=61, newLocation=32}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            c = tmp;
        if (a + b <= c) {
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
            b = c;
        }
            return INVALID;
            return EQUALATERAL;
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }
    public static void main(String[] args) throws Exception{


       // System.out.println(""Finished"");
        classifyTriangle(1,1,1);
    }


    }
}
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }","1547923477726","false","false","0.0","0.0"
"Sat Jan 19 18:48:48 GMT 2019","0","[MoveLineEdit{sourceLineIndex=65, destinationLineIndex=39}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
    public static void main(String[] args) throws Exception{
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }


        classifyTriangle(1,1,1);

    }
}","1547923728041","false","false","0.0","0.0"
"Sat Jan 19 19:00:39 GMT 2019","0","[InsertBreakEdit{lineNumber=51, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);
break;

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547924439121","false","false","0.0","0.0"
"Sat Jan 19 19:08:15 GMT 2019","0","[InsertBreakEdit{lineNumber=55, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
break;
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547924895430","false","false","0.0","0.0"
"Sat Jan 19 19:08:15 GMT 2019","1","[MoveBlockEdit{startBlockInt=14, endBlockInt=46, newLocation=34}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            b = tmp;
        if (a > c) {
            a = c;
        }
            int tmp = b;
            c = tmp;
        if (a + b <= c) {
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
        } else {
            a = b;
        }
            int tmp = a;
            c = tmp;
        if (b > c) {
            b = c;
        }
            return INVALID;
            return EQUALATERAL;
            return ISOCELES;
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
                //System.out.println();
    }
            }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
            d *= random.nextDouble();
        Random random = new Random(1); // seed 1
           // System.out.println(""Result: "" + d);

        }
        Thread.sleep(startDelayMS);


       // System.out.println(""Finished"");
        double d = 1;
    }
        for (int i = 0; i < iterations; ++i) {

            //System.out.print(i + "", "");
    public static void main(String[] args) throws Exception{
            if (i % 100 == 0) {

        classifyTriangle(1,1,1);

    }
}
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }","1547924895477","false","false","0.0","0.0"
"Sat Jan 19 19:08:15 GMT 2019","2","[SwapLineEdit{firstLineIndex=21, secondLineIndex=29}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            return EQUALATERAL;
            c = tmp;
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        }
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547924895617","false","false","0.0","0.0"
"Sat Jan 19 19:08:15 GMT 2019","3","[MoveLineEdit{sourceLineIndex=47, destinationLineIndex=35}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547924895633","false","false","0.0","0.0"
"Sun Jan 20 11:25:05 GMT 2019","0","[InsertLineEdit{lineNumber=70, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
//this is a comment
}","1547983484793","true","true","31.083618737499997","0.0"
"Sun Jan 20 11:25:05 GMT 2019","1","[SwapLineEdit{firstLineIndex=4, secondLineIndex=52}]","import java.io.PrintStream;
import java.util.Random;

        for (int i = 0; i < iterations; ++i) {
public class Triangle {
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

    static final int INVALID = 0;
        double d = 1;
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547983505993","false","false","0.0","0.0"
"Sun Jan 20 11:25:26 GMT 2019","2","[MoveBlockEdit{startBlockInt=48, endBlockInt=9, newLocation=10}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547983506149","true","true","26.803531475","0.0"
"Sun Jan 20 11:25:44 GMT 2019","3","[MoveLineEdit{sourceLineIndex=19, destinationLineIndex=18}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            a = c;
            int tmp = a;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547983527095","true","false","31.851397375","0.0"
"Sun Jan 20 11:26:05 GMT 2019","4","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547983544752","true","true","32.23854095","0.0"
"Sun Jan 20 11:26:26 GMT 2019","5","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547983565795","true","true","30.975418162499995","0.0"
"Sun Jan 20 11:26:47 GMT 2019","6","[SwapBlockEdit{blockOneStartNo=18, blockOneEndNo=21, blockTwoStartNo=10, blockTwoEndNo=70}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547983586743","true","true","32.0757940125","0.0"
"Sun Jan 20 11:27:08 GMT 2019","7","[RemoveBlockEdit{startBlockInt=19, endBlockInt=1}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547983607678","true","true","30.785744849999997","0.0"
"Sun Jan 20 11:27:29 GMT 2019","8","[InsertLineEdit{lineNumber=56, lineContents='//this is a comment'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
//this is a comment
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547983628839","true","true","29.8173903125","0.0"
"Sun Jan 20 11:27:43 GMT 2019","0","[RemoveLineEdit{lineNumber=16}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
null
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547983663977","false","false","0.0","0.0"
"Sun Jan 20 11:27:43 GMT 2019","1","[RemoveLineEdit{lineNumber=29}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
null
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547983663992","false","false","0.0","0.0"
"Sun Jan 20 11:43:30 GMT 2019","0","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984589605","true","true","30.5948822375","0.0"
"Sun Jan 20 11:43:30 GMT 2019","1","[SwapLineEdit{firstLineIndex=36, secondLineIndex=33}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
    }
            return ISOCELES;
            return SCALENE;
        } else {
        }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984610822","false","false","0.0","0.0"
"Sun Jan 20 11:43:30 GMT 2019","2","[InsertBreakEdit{lineNumber=49, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1
break;

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984610962","false","false","0.0","0.0"
"Sun Jan 20 11:43:51 GMT 2019","3","[MoveLineEdit{sourceLineIndex=10, destinationLineIndex=62}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
        // Sort the sides so that a <= b <= c
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984611134","true","true","30.102114962499996","0.0"
"Sun Jan 20 11:44:12 GMT 2019","4","[SwapBlockEdit{blockOneStartNo=1, blockOneEndNo=34, blockTwoStartNo=48, blockTwoEndNo=58}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984631917","true","true","29.939103687499998","0.0"
"Sun Jan 20 11:44:12 GMT 2019","5","[InsertBreakEdit{lineNumber=17, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
break;
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984652887","false","false","0.0","0.0"
"Sun Jan 20 11:44:12 GMT 2019","6","[InsertBreakEdit{lineNumber=41, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

break;
            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984652965","false","false","0.0","0.0"
"Sun Jan 20 11:44:12 GMT 2019","7","[MoveBlockEdit{startBlockInt=8, endBlockInt=34, newLocation=48}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
        delay();

            int tmp = a;
            b = tmp;
        if (a > c) {
            a = c;
        }
            int tmp = b;
            c = tmp;
        if (a + b <= c) {
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
        } else {
        }
    private static void delay() {
            Thread.sleep(100);
            wasteCPU( 1000, 1000);
        } catch (InterruptedException e) {
        }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
    public static int classifyTriangle(int a, int b, int c) {
        // Sort the sides so that a <= b <= c
        if (a > b) {
            a = b;
        }
            int tmp = a;
            //System.out.print(i + "", "");
            c = tmp;
            if (i % 100 == 0) {
        if (b > c) {
                //System.out.println();
            b = c;
            }
        }
            d *= random.nextDouble();
            return INVALID;
           // System.out.println(""Result: "" + d);
            return EQUALATERAL;
        }
            return ISOCELES;

            return SCALENE;
       // System.out.println(""Finished"");
    }
    }
        try {


    public static void main(String[] args) throws Exception{


            // do nothing
        classifyTriangle(1,1,1);
    }

        Random random = new Random(1); // seed 1
    }

}
        Thread.sleep(startDelayMS);
    public static int classifyTriangle(int a, int b, int c) {

        delay();
        double d = 1;
        // Sort the sides so that a <= b <= c
        for (int i = 0; i < iterations; ++i) {

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {","1547984652981","false","false","0.0","0.0"
"Sun Jan 20 11:44:12 GMT 2019","8","[MoveBlockEdit{startBlockInt=22, endBlockInt=70, newLocation=38}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
            int tmp = b;
            c = tmp;
        if (a + b <= c) {
        } else if (a == b && b == c) {
        } else if (a == b || b == c) {
        } else {
        }
    private static void delay() {
        if (b > c) {
            b = c;
        }
            return INVALID;
            return EQUALATERAL;
            return ISOCELES;
            return SCALENE;
    }
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
        } else if (a == b && b == c) {
}
            return EQUALATERAL;
        if (b > c) {
        } else if (a == b || b == c) {
            int tmp = b;
            return ISOCELES;
            b = c;
        } else {
            c = tmp;
            return SCALENE;
        }
        }
        if (a + b <= c) {
    }
            return INVALID;
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }","1547984652996","false","false","0.0","0.0"
"Sun Jan 20 11:44:33 GMT 2019","9","[RemoveBlockEdit{startBlockInt=68, endBlockInt=66}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984653121","true","true","27.668178475","0.0"
"Sun Jan 20 11:44:33 GMT 2019","10","[MoveLineEdit{sourceLineIndex=65, destinationLineIndex=60}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
    public static void main(String[] args) throws Exception{
        }

       // System.out.println(""Finished"");
    }


        classifyTriangle(1,1,1);

    }
}","1547984673707","false","false","0.0","0.0"
"Sun Jan 20 11:44:33 GMT 2019","11","[InsertBreakEdit{lineNumber=20, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
break;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984673832","false","false","0.0","0.0"
"Sun Jan 20 11:44:54 GMT 2019","12","[IfStatementEdit{lineIndex=17, annaPath=AnnaPath{packages=[], className='Triangle'}}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984673957","true","true","31.272499125","0.0"
"Sun Jan 20 11:45:15 GMT 2019","13","[MoveBlockEdit{startBlockInt=51, endBlockInt=16, newLocation=5}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984694574","true","true","30.718974299999996","0.0"
"Sun Jan 20 11:45:15 GMT 2019","14","[RemoveLineEdit{lineNumber=61}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }
null
       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984715162","false","false","0.0","0.0"
"Sun Jan 20 11:45:15 GMT 2019","15","[InsertBreakEdit{lineNumber=20, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
break;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984715255","false","false","0.0","0.0"
"Sun Jan 20 11:45:36 GMT 2019","16","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984715365","true","true","26.6515218375","0.0"
"Sun Jan 20 11:46:19 GMT 2019","0","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984758714","true","true","29.038444749999996","0.0"
"Sun Jan 20 11:46:40 GMT 2019","1","[MoveLineEdit{sourceLineIndex=2, destinationLineIndex=40}]","import java.io.PrintStream;
import java.util.Random;
public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);


            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984779577","true","true","27.37321195","0.0"
"Sun Jan 20 11:46:40 GMT 2019","2","[InsertBreakEdit{lineNumber=6, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
break;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984800169","false","false","0.0","0.0"
"Sun Jan 20 11:47:00 GMT 2019","3","[IfStatementEdit{lineIndex=30, annaPath=AnnaPath{packages=[], className='Triangle'}}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984800310","true","true","28.232638962499998","0.0"
"Sun Jan 20 11:47:00 GMT 2019","4","[RemoveLineEdit{lineNumber=61}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }
null
       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984820844","false","false","0.0","0.0"
"Sun Jan 20 11:47:00 GMT 2019","5","[SwapLineEdit{firstLineIndex=57, secondLineIndex=64}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
    public static void main(String[] args) throws Exception{
                //System.out.println();
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }
            }


        classifyTriangle(1,1,1);

    }
}","1547984820859","false","false","0.0","0.0"
"Sun Jan 20 11:47:21 GMT 2019","6","[MoveBlockEdit{startBlockInt=31, endBlockInt=14, newLocation=18}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984820937","true","true","27.700324837500002","0.0"
"Sun Jan 20 11:47:21 GMT 2019","7","[InsertBreakEdit{lineNumber=8, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
break;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984841485","false","false","0.0","0.0"
"Sun Jan 20 11:47:42 GMT 2019","8","[IfStatementEdit{lineIndex=36, annaPath=AnnaPath{packages=[], className='Triangle'}}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984841594","true","true","32.015631112499996","0.0"
"Sun Jan 20 11:47:42 GMT 2019","9","[InsertBreakEdit{lineNumber=45, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
break;
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1547984862289","false","false","0.0","0.0"
"Tue Jan 22 18:08:29 GMT 2019","0","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548180488789","true","false","1148.0","0.0"
"Tue Jan 22 18:08:49 GMT 2019","1","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548180509201","true","false","1148.0","0.0"
"Tue Jan 22 18:09:52 GMT 2019","0","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548180573073","true","false","1148.0","0.0"
"Tue Jan 22 18:10:12 GMT 2019","1","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548180593040","true","false","1148.0","0.0"
"Tue Jan 22 18:10:50 GMT 2019","0","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548180631039","true","false","1148.0","0.0"
"Tue Jan 22 18:11:10 GMT 2019","1","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548180650984","true","false","1148.0","0.0"
"Tue Jan 22 18:11:30 GMT 2019","2","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548180670843","true","false","1148.0","0.0"
"Tue Jan 22 18:13:31 GMT 2019","0","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548180749531","true","false","2.3115575150194516","0.0"
"Tue Jan 22 18:13:55 GMT 2019","1","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548180811303","true","false","2.3115575150194516","0.0"
"Tue Jan 22 18:14:16 GMT 2019","2","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548180835503","true","false","2.3115553331159484","0.0"
"Tue Jan 22 18:14:37 GMT 2019","3","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548180856816","true","false","2.3115575150194516","0.0"
"Tue Jan 22 18:15:39 GMT 2019","0","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548180918324","true","false","2.3115575150194516","0.0"
"Tue Jan 22 18:15:59 GMT 2019","1","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548180939123","true","false","2.3115575150194516","0.0"
"Tue Jan 22 18:17:24 GMT 2019","0","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181023698","true","false","2.3115575150194516","0.0"
"Tue Jan 22 18:17:45 GMT 2019","1","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181044600","true","false","2.3115575150194516","0.0"
"Tue Jan 22 18:18:26 GMT 2019","0","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181087952","true","false","0.0","0.0"
"Tue Jan 22 18:18:44 GMT 2019","1","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181106303","true","false","0.0","0.0"
"Tue Jan 22 18:19:03 GMT 2019","2","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181125015","true","false","0.0","0.0"
"Tue Jan 22 18:19:21 GMT 2019","3","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181143144","true","false","0.0","0.0"
"Tue Jan 22 18:19:39 GMT 2019","4","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181161177","true","false","0.0","0.0"
"Tue Jan 22 18:19:56 GMT 2019","5","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181179111","true","false","0.0","0.0"
"Tue Jan 22 18:20:14 GMT 2019","6","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181197097","true","false","0.0","0.0"
"Tue Jan 22 18:20:32 GMT 2019","7","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181215033","true","false","0.0","0.0"
"Tue Jan 22 18:20:50 GMT 2019","8","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181232966","true","false","0.0","0.0"
"Tue Jan 22 18:21:08 GMT 2019","9","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181250904","true","false","0.0","0.0"
"Tue Jan 22 18:21:26 GMT 2019","10","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181268895","true","false","0.0","0.0"
"Tue Jan 22 18:21:44 GMT 2019","11","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181286864","true","false","0.0","0.0"
"Tue Jan 22 18:22:02 GMT 2019","12","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181304810","true","false","0.0","0.0"
"Tue Jan 22 18:22:20 GMT 2019","13","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181322703","true","false","0.0","0.0"
"Tue Jan 22 18:22:38 GMT 2019","14","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181340636","true","false","0.0","0.0"
"Tue Jan 22 18:22:56 GMT 2019","15","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181358539","true","false","0.0","0.0"
"Tue Jan 22 18:23:14 GMT 2019","16","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181376464","true","false","0.0","0.0"
"Tue Jan 22 18:23:32 GMT 2019","17","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181394344","true","false","0.0","0.0"
"Tue Jan 22 18:23:50 GMT 2019","18","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181412302","true","false","0.0","0.0"
"Tue Jan 22 18:24:07 GMT 2019","19","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","1548181430178","true","false","0.0","0.0"
"Wed Jan 23 13:52:01 GMT 2019","0","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","0","false","false","2.3115575150194516","0.0"
"Wed Jan 23 14:01:29 GMT 2019","0","[NoEditEdit{}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","0","false","false","2.3115575150194516","0.0"
"Wed Jan 23 14:04:23 GMT 2019","0","[IfStatementEdit{lineIndex=19, annaPath=AnnaPath{packages=[], className='Triangle'}}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","0","false","false","-1.0","0.0"
"Wed Jan 23 14:05:47 GMT 2019","0","[InsertBreakEdit{lineNumber=61, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","0","false","false","-1.0","0.0"
"Wed Jan 23 14:06:08 GMT 2019","1","[InsertBreakEdit{lineNumber=55, lineContents='break;'}]","import java.io.PrintStream;
import java.util.Random;

public class Triangle {
    static final int INVALID = 0;
    static final int SCALENE = 1;
    static final int EQUALATERAL = 2;
    static final int ISOCELES = 3;
    public static int classifyTriangle(int a, int b, int c) {
        delay();
        // Sort the sides so that a <= b <= c

        if (a > b) {
            int tmp = a;
            a = b;
            b = tmp;
        }
        if (a > c) {
            int tmp = a;
            a = c;
            c = tmp;
        }
        if (b > c) {
            int tmp = b;
            b = c;
            c = tmp;
        }
        if (a + b <= c) {
            return INVALID;
        } else if (a == b && b == c) {
            return EQUALATERAL;
        } else if (a == b || b == c) {
            return ISOCELES;
        } else {
            return SCALENE;
        }
    }
    private static void delay() {
        try {
            Thread.sleep(100);

            wasteCPU( 1000, 1000);

        } catch (InterruptedException e) {
            // do nothing
        }
    }
    private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {
        Random random = new Random(1); // seed 1

        Thread.sleep(startDelayMS);

        double d = 1;
        for (int i = 0; i < iterations; ++i) {
            //System.out.print(i + "", "");
            if (i % 100 == 0) {
                //System.out.println();
            }
            d *= random.nextDouble();
           // System.out.println(""Result: "" + d);
        }

       // System.out.println(""Finished"");
    }

    public static void main(String[] args) throws Exception{

        classifyTriangle(1,1,1);

    }
}","0","false","false","-1.0","0.0"
