"2019-02-05T13:51:01.222","0","2"
"Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[NoEditEdit{}], outputSource=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, fitnessScore=25.048131537499998, compileTime=1549374598754, unitTestScore=1.0, opacitorMeasurement1=24.048131537499998, opacitorMeasurement2=0.0, compiled=true}","Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[NoEditEdit{}], outputSource=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, fitnessScore=24.556983275, compileTime=1549374619683, unitTestScore=1.0, opacitorMeasurement1=23.556983275, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent="Date:2019-02-05T14:06:52.827","Iteration: 0","Population Size2"
"Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[InsertLineEdit{lineNumber=18, lineContents='//this is a comment'}], outputSource=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {, //this is a comment,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, fitnessScore=22.993442449999996, compileTime=1549375532142, unitTestScore=1.0, opacitorMeasurement1=21.993442449999996, opacitorMeasurement2=0.0, compiled=true}","Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[MoveLineEdit{sourceLineIndex=59, destinationLineIndex=47}], outputSource=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },            // System.out.println(""Result: "" + d);,     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, fitnessScore=22.4769867375, compileTime=1549375552485, unitTestScore=1.0, opacitorMeasurement1=21.4769867375, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:08:13.138","Iteration: 1","Population Size2"
"Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[MoveLineEdit{sourceLineIndex=51, destinationLineIndex=12}], outputSource=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, , ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, fitnessScore=24.1810397, compileTime=1549375612912, unitTestScore=1.0, opacitorMeasurement1=23.1810397, opacitorMeasurement2=0.0, compiled=true}","Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[IfStatementEdit{lineIndex=33, annaPath=AnnaPath{packages=[], className='Triangle'}}], outputSource=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, fitnessScore=23.002164625, compileTime=1549375632987, unitTestScore=1.0, opacitorMeasurement1=22.002164625, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:09:33.610","Iteration: 2","Population Size2"
"Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[MoveLineEdit{sourceLineIndex=11, destinationLineIndex=44}], outputSource=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing, ,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, fitnessScore=23.011977050000002, compileTime=1549375713438, unitTestScore=1.0, opacitorMeasurement1=22.011977050000002, opacitorMeasurement2=0.0, compiled=true}","Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[IfStatementEdit{lineIndex=38, annaPath=AnnaPath{packages=[], className='Triangle'}}], outputSource=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, fitnessScore=23.775262474999995, compileTime=1549375733476, unitTestScore=1.0, opacitorMeasurement1=22.775262474999995, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:10:33.912","Iteration: 3","Population Size2"
"Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[InsertLineEdit{lineNumber=48, lineContents='//this is a comment'}], outputSource=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {, //this is a comment,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, fitnessScore=24.17628215, compileTime=1549375793778, unitTestScore=1.0, opacitorMeasurement1=23.17628215, opacitorMeasurement2=0.0, compiled=true}","Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[IfStatementEdit{lineIndex=1, annaPath=AnnaPath{packages=[], className='Triangle'}}], outputSource=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,  "Date:2019-02-05T14:16:18.066","Iteration: 0","Population Size: 7"
"Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[InsertLineEdit{lineNumber=62, lineContents='//this is a comment'}], fitnessScore=24.293832625, compileTime=1549376117406, unitTestScore=1.0, opacitorMeasurement1=23.293832625, opacitorMeasurement2=0.0, compiled=true}","Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[InsertLineEdit{lineNumber=45, lineContents='//this is a comment'}], fitnessScore=24.166800125, compileTime=1549376157893, unitTestScore=1.0, opacitorMeasurement1=23.166800125, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:17:58.575","Iteration: 1","Population Size: 7"
"Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[IfStatementEdit{lineIndex=13, annaPath=AnnaPath{packages=[], className='Triangle'}}], fitnessScore=22.925879150000004, compileTime=1549376218406, unitTestScore=1.0, opacitorMeasurement1=21.925879150000004, opacitorMeasurement2=0.0, compiled=true}","Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[SwapLineEdit{firstLineIndex=2, secondLineIndex=65}], fitnessScore=22.8321823125, compileTime=1549376178135, unitTestScore=1.0, opacitorMeasurement1=21.8321823125, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:18:19.015","Iteration: 2","Population Size: 7"
"Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[InsertBreakEdit{lineNumber=30, lineContents='break;'}], fitnessScore=24690.0, compileTime=1549376278759, unitTestScore=12345.0, opacitorMeasurement1=12345.0, opacitorMeasurement2=0.0, compiled=false}","Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[IfStatementEdit{lineIndex=8, annaPath=AnnaPath{packages=[], className='Triangle'}}], fitnessScore=22.4509855875, compileTime=1549376278835, unitTestScore=1.0, opacitorMeasurement1=21.4509855875, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:20:00.039","Iteration: 3","Population Size: 7"
"Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[NoEditEdit{}], fitnessScore=22.9247557375, compileTime=1549376299068, unitTestScore=1.0, opacitorMeasurement1=21.9247557375, opacitorMeasurement2=0.0, compiled=true}","Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[MoveLineEdit{sourceLineIndex=50, destinationLineIndex=57}], fitnessScore=10000.0, compileTime=1549376359781, unitTestScore=0.0, opacitorMeasurement1=10000.0, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:21:00.634","Iteration: 4","Population Size: 7"
"Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[InsertBreakEdit{lineNumber=16, lineContents='break;'}], fitnessScore=24690.0, compileTime=1549376400308, unitTestScore=12345.0, opacitorMeasurement1=12345.0, opacitorMeasurement2=0.0, compiled=false}","Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[SwapLineEdit{firstLineIndex=42, secondLineIndex=65}], fitnessScore=23.186419674999996, compileTime=1549376400361, unitTestScore=1.0, opacitorMeasurement1=22.186419674999996, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:22:00.869","Iteration: 5","Population Size: 7"
"Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[IfStatementEdit{lineIndex=63, annaPath=AnnaPath{packages=[], className='Triangle'}}], fitnessScore=23.035335262499995, compileTime=1549376460711, unitTestScore=1.0, opacitorMeasurement1=22.035335262499995, opacitorMeasurement2=0.0, compiled=true}","Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[IfStatementEdit{lineIndex=14, annaPath=AnnaPath{packages=[], className='Triangle'}}], fitnessScore=22.437406812499997, compileTime=1549376500800, unitTestScore=1.0, opacitorMeasurement1=21.437406812499997, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:22:43.476","Iteration: 6","Population Size: 7"
"Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[IfStatementEdit{lineIndex=33, annaPath=AnnaPath{packages=[], className='Triangle'}}], fitnessScore=24.194255, compileTime=1549376523452, unitTestScore=1.0, opacitorMeasurement1=23.194255, opacitorMeasurement2=0.0, compiled=true}","Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[MoveLineEdit{sourceLineIndex=30, destinationLineIndex=28}], fitnessScore=24690.0, compileTime=1549376543430, unitTestScore=12345.0, opacitorMeasurement1=12345.0, opacitorMeasurement2=0.0, compiled=false}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:23:43.758","Iteration: 7","Population Size: 7"
"Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[InsertLineEdit{lineNumber=33, lineContents='//this is a comment'}], fitnessScore=23.046502099999998, compileTime=1549376583600, unitTestScore=1.0, opacitorMeasurement1=22.046502099999998, opacitorMeasurement2=0.0, compiled=true}","Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[InsertLineEdit{lineNumber=37, lineContents='//this is a comment'}], fitnessScore=22.905857837499997, compileTime=1549376563576, unitTestScore=1.0, opacitorMeasurement1=21.905857837499997, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:24:44.046","Iteration: 8","Population Size: 7"
"Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"");,     }, ,     public static void main(String[] args) throws Exception{, ,         classifyTriangle(1,1,1);, ,     }, }]}, edits=[NoEditEdit{}], fitnessScore=22.8006306, compileTime=1549376643878, unitTestScore=1.0, opacitorMeasurement1=21.8006306, opacitorMeasurement2=0.0, compiled=true}","Patch{source=AnnaClass{className=AnnaPath{packages=[], className='Triangle'}, lines=[import java.io.PrintStream;, import java.util.Random;, , public class Triangle {,     static final int INVALID = 0;,     static final int SCALENE = 1;,     static final int EQUALATERAL = 2;,     static final int ISOCELES = 3;,     public static int classifyTriangle(int a, int b, int c) {,         delay();,         // Sort the sides so that a <= b <= c, ,         if (a > b) {,             int tmp = a;,             a = b;,             b = tmp;,         },         if (a > c) {,             int tmp = a;,             a = c;,             c = tmp;,         },         if (b > c) {,             int tmp = b;,             b = c;,             c = tmp;,         },         if (a + b <= c) {,             return INVALID;,         } else if (a == b && b == c) {,             return EQUALATERAL;,         } else if (a == b || b == c) {,             return ISOCELES;,         } else {,             return SCALENE;,         },     },     private static void delay() {,         try {,             Thread.sleep(100);, ,             wasteCPU( 1000, 1000);, ,         } catch (InterruptedException e) {,             // do nothing,         },     },     private static void wasteCPU( final int startDelayMS, final int iterations) throws InterruptedException {,         Random random = new Random(1); // seed 1, ,         Thread.sleep(startDelayMS);, ,         double d = 1;,         for (int i = 0; i < iterations; ++i) {,             //System.out.print(i + "", "");,             if (i % 100 == 0) {,                 //System.out.println();,             },             d *= random.nextDouble();,            // System.out.println(""Result: "" + d);,         }, ,        // System.out.println(""Finished"Date:2019-02-05T14:36:35.479","Iteration: 0","Population Size: 7"
"Patch{, edits=[InsertLineEdit{lineNumber=32, lineContents='//this is a comment'}], fitnessScore=22.75655755, compileTime=1549377334054, unitTestScore=1.0, opacitorMeasurement1=21.75655755, opacitorMeasurement2=0.0, compiled=true}","Patch{, edits=[InsertBreakEdit{lineNumber=50, lineContents='break;'}], fitnessScore=24690.0, compileTime=1549377354570, unitTestScore=12345.0, opacitorMeasurement1=12345.0, opacitorMeasurement2=0.0, compiled=false}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:37:36.664","Iteration: 1","Population Size: 7"
"Patch{, edits=[SwapLineEdit{firstLineIndex=39, secondLineIndex=40}], fitnessScore=24690.0, compileTime=1549377415940, unitTestScore=12345.0, opacitorMeasurement1=12345.0, opacitorMeasurement2=0.0, compiled=false}","Patch{, edits=[NoEditEdit{}], fitnessScore=22.856069025, compileTime=1549377416018, unitTestScore=1.0, opacitorMeasurement1=21.856069025, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:38:40.899","Iteration: 2","Population Size: 7"
"Patch{, edits=[SwapLineEdit{firstLineIndex=70, secondLineIndex=9}], fitnessScore=24690.0, compileTime=1549377497566, unitTestScore=12345.0, opacitorMeasurement1=12345.0, opacitorMeasurement2=0.0, compiled=false}","Patch{, edits=[IfStatementEdit{lineIndex=6, annaPath=AnnaPath{packages=[], className='Triangle'}}], fitnessScore=22.972397124999997, compileTime=1549377456757, unitTestScore=1.0, opacitorMeasurement1=21.972397124999997, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:40:02.642","Iteration: 3","Population Size: 7"
"Patch{, edits=[IfStatementEdit{lineIndex=19, annaPath=AnnaPath{packages=[], className='Triangle'}}], fitnessScore=22.690513775, compileTime=1549377541559, unitTestScore=1.0, opacitorMeasurement1=21.690513775, opacitorMeasurement2=0.0, compiled=true}","Patch{, edits=[InsertLineEdit{lineNumber=59, lineContents='//this is a comment'}], fitnessScore=27.232760574999997, compileTime=1549377520977, unitTestScore=1.0, opacitorMeasurement1=26.232760574999997, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:41:24.302","Iteration: 4","Population Size: 7"
"Patch{, edits=[IfStatementEdit{lineIndex=42, annaPath=AnnaPath{packages=[], className='Triangle'}}], fitnessScore=23.0067239875, compileTime=1549377602689, unitTestScore=1.0, opacitorMeasurement1=22.0067239875, opacitorMeasurement2=0.0, compiled=true}","Patch{, edits=[InsertLineEdit{lineNumber=60, lineContents='//this is a comment'}], fitnessScore=22.957364624999997, compileTime=1549377643596, unitTestScore=1.0, opacitorMeasurement1=21.957364624999997, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:41:45.010","Iteration: 5","Population Size: 7"
"Patch{, edits=[InsertBreakEdit{lineNumber=15, lineContents='break;'}], fitnessScore=24690.0, compileTime=1549377684364, unitTestScore=12345.0, opacitorMeasurement1=12345.0, opacitorMeasurement2=0.0, compiled=false}","Patch{, edits=[NoEditEdit{}], fitnessScore=25.1156621125, compileTime=1549377684411, unitTestScore=1.0, opacitorMeasurement1=24.1156621125, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:42:46.540","Iteration: 6","Population Size: 7"
"Patch{, edits=[InsertLineEdit{lineNumber=28, lineContents='//this is a comment'}], fitnessScore=24.572015775, compileTime=1549377725438, unitTestScore=1.0, opacitorMeasurement1=23.572015775, opacitorMeasurement2=0.0, compiled=true}","Patch{, edits=[InsertLineEdit{lineNumber=55, lineContents='//this is a comment'}], fitnessScore=23.182752462499998, compileTime=1549377745928, unitTestScore=1.0, opacitorMeasurement1=22.182752462499998, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:43:47.826","Iteration: 7","Population Size: 7"
"Patch{, edits=[MoveLineEdit{sourceLineIndex=51, destinationLineIndex=49}], fitnessScore=23.2892019875, compileTime=1549377787086, unitTestScore=1.0, opacitorMeasurement1=22.2892019875, opacitorMeasurement2=0.0, compiled=true}","Patch{, edits=[InsertBreakEdit{lineNumber=42, lineContents='break;'}], fitnessScore=24690.0, compileTime=1549377807348, unitTestScore=12345.0, opacitorMeasurement1=12345.0, opacitorMeasurement2=0.0, compiled=false}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:45:30.017","Iteration: 8","Population Size: 7"
"Patch{, edits=[NoEditEdit{}], fitnessScore=22.922905637499998, compileTime=1549377827966, unitTestScore=1.0, opacitorMeasurement1=21.922905637499998, opacitorMeasurement2=0.0, compiled=true}","Patch{, edits=[InsertBreakEdit{lineNumber=69, lineContents='break;'}], fitnessScore=24690.0, compileTime=1549377889195, unitTestScore=12345.0, opacitorMeasurement1=12345.0, opacitorMeasurement2=0.0, compiled=false}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
"Neighbour{parent=Offspring{origin='All of P2, bit of P1'}}","Neighbour{parent=Offspring{origin='All of P1, bit of P2'}}","Neighbour{parent=Offspring{origin='All of P2, All of P1'}}"
""
"Date:2019-02-05T14:46:52.839","Iteration: 9","Population Size: 7"
"Patch{, edits=[IfStatementEdit{lineIndex=30, annaPath=AnnaPath{packages=[], className='Triangle'}}], fitnessScore=22.9278283, compileTime=1549377992511, unitTestScore=1.0, opacitorMeasurement1=21.9278283, opacitorMeasurement2=0.0, compiled=true}","Patch{, edits=[IfStatementEdit{lineIndex=6, annaPath=AnnaPath{packages=[], className='Triangle'}}], fitnessScore=134.3419563875, compileTime=1549377930079, unitTestScore=1.0, opacitorMeasurement1=133.3419563875, opacitorMeasurement2=0.0, compiled=true}"
"Offspring{origin='All of P2, bit of P1'}","Offspring{origin='All of P1, bit of P2'}","Offspring{origin='All of P2, All of P1'}"
