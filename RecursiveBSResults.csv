"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:11 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959428430","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:13 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959431241","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:15 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959433634","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:18 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959435845","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:20 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959438123","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:22 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959440186","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:24 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959442464","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:26 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959444688","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:29 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959446975","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:31 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959449211","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:34 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959451445","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:37 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959454860","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:39 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959457087","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:41 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959459400","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:43 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959461730","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:46 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959463894","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:48 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959466119","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:50 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959468358","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:52 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959470574","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:55 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959472833","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:57 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959475171","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:57:59 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959477397","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:58:01 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959479619","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:58:03 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959481822","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:58:06 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959484029","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:58:08 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959486249","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:58:10 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959488386","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:58:12 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959490843","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:58:15 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959493001","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:58:17 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};

        bubbleSort(array, array.length);



    }
}","1546959495199","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:58:54 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959532660","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:58:57 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959535111","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:00 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959537746","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:02 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959540257","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:04 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959542526","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:06 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959544614","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:09 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959546948","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:11 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959549456","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:13 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959551735","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:15 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959553809","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:17 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959555863","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:19 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959557938","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:21 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959559984","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:24 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959562026","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:26 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959564141","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:28 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959566230","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:30 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959568290","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:32 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959570409","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:34 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959572502","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:36 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959574602","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:39 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959576990","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:41 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959579202","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:45 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959582030","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:49 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959585925","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:52 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959589225","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:56 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959592931","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 14:59:59 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959596942","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:00:02 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959599654","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:00:04 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959602504","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:00:06 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1,2,3,4,5,6,7,8,9,10};

        bubbleSort(array, array.length);



    }
}","1546959604756","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:00:43 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959641727","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:00:46 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959643940","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:00:48 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959646400","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:00:50 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959648637","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:00:53 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959651074","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:00:55 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959653549","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:00:58 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959655823","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:02 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959658669","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:06 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959662901","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:09 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959666155","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:12 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959669923","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:15 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959672759","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:17 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959675428","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:20 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959678030","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:22 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959680536","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:25 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959682857","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:28 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959686013","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:32 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959689023","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:36 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959692354","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:39 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959696668","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:42 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959699623","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:44 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959702285","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:46 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959704538","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:49 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959706881","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:52 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959709619","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:01:56 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959713145","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:02:00 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959716801","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:02:02 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959720259","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:02:04 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959722634","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:02:06 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,20,30,40,50,60,70,80,90,100};

        bubbleSort(array, array.length);



    }
}","1546959724639","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:02:39 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959757517","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:02:42 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959759976","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:02:44 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959762381","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:02:46 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959764703","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:02:49 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959767071","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:02:52 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959769436","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:02:55 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959772442","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:02:58 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959775629","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:01 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959778301","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:03 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959781108","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:06 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959783990","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:09 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959786623","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:12 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959789716","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:15 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959792586","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:18 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959795638","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:20 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959798206","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:23 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959800934","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:26 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959803933","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:29 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959806236","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:32 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959809094","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:35 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959812128","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:37 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959815211","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:39 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959817676","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:42 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959820016","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:44 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959822231","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:46 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959824280","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:48 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959826452","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:50 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959828518","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:52 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959830649","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:03:54 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,200,300,400,500,600,700,800,900,1000};

        bubbleSort(array, array.length);



    }
}","1546959832788","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:17 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959855656","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:20 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959858090","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:22 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959860459","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:25 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959862799","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:27 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959865400","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:29 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959867622","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:32 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959870064","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:35 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959872646","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:37 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959875169","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:40 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959878090","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:42 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959880397","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:45 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959882766","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:47 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959885360","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:50 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959887681","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:52 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959890467","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:54 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959892785","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:57 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959895048","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:04:59 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959897241","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:01 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959899426","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:03 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959901629","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:06 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959903822","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:08 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959906248","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:11 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959908473","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:13 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959911080","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:16 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959913889","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:18 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959916580","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:21 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959918818","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:24 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959921784","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:27 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959924375","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:29 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,2000,3000,4000,5000,6000,7000,8000,9000,10000};

        bubbleSort(array, array.length);



    }
}","1546959927170","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:46 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959944027","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:49 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959946591","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:51 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959949144","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:54 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959951921","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:56 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959954488","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:05:59 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959956978","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:01 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959959486","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:04 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959961781","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:06 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959964270","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:09 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959966974","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:11 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959969409","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:13 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959971471","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:16 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959973790","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:18 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959976140","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:20 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959978531","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:23 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959980846","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:25 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959983353","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:27 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959985473","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:29 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959987676","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:31 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959989785","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:33 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959991840","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:36 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959994064","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:38 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959996474","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:40 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546959998798","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:42 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546960000931","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:45 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546960003019","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:47 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546960005171","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:49 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546960007243","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:51 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546960009462","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:06:53 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {63,64,65,66,67};

        bubbleSort(array, array.length);



    }
}","1546960011538","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:07:19 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960036996","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:07:22 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960039692","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:07:24 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960042132","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:07:27 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960044398","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:07:32 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960047872","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:07:37 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960052283","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:07:40 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960057294","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:07:43 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960060999","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:07:45 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960063443","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:07:48 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960065823","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:07:50 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960068663","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:07:53 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960071039","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:07:55 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960073390","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:07:58 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960075720","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:00 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960078089","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:02 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960080531","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:05 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960083063","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:07 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960085623","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:09 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960087712","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:12 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960090063","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:14 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960092623","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:17 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960094990","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:20 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960097628","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:22 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960100398","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:25 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960102821","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:27 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960105361","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:29 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960107728","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:32 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960110062","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:34 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960112490","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:08:37 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8001,8002,8003,8004,8005};

        bubbleSort(array, array.length);



    }
}","1546960114951","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:09:15 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960152488","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:09:17 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960155451","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:09:20 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960158102","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:09:23 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960160988","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:09:28 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960163908","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:09:33 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960169002","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:09:35 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960173398","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:09:39 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960175978","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:09:43 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960179772","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:09:48 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960184098","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:09:51 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960188279","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:09:54 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960191853","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:09:57 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960194655","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:09:59 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960197539","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:02 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960199929","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:05 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960202388","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:08 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960205448","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:12 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960208733","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:15 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960212186","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:18 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960215655","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:22 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960219043","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:25 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960222331","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:28 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960225423","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:31 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960228762","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:33 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960231440","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:36 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960233935","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:38 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960236341","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:40 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960238699","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:43 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960240983","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:10:45 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,17,19,21,23,25,27,29};

        bubbleSort(array, array.length);



    }
}","1546960243426","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:08 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960265540","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:10 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960268280","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:13 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960270752","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:15 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960273257","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:18 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960275748","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:20 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960278231","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:23 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960280821","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:25 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960283265","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:28 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960285655","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:31 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960288160","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:34 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960291117","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:39 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960294642","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:43 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960299305","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:46 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960303558","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:49 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960306696","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:52 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960309849","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:55 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960312609","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:11:58 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960315809","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:01 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960318685","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:03 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960321322","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:06 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960323935","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:08 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960326256","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:11 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960328693","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:13 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960331183","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:15 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960333557","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:17 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960335724","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:20 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960337958","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:22 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960340133","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:24 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960342337","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:26 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204};

        bubbleSort(array, array.length);



    }
}","1546960344473","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:49 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960367480","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:52 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960370186","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:55 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960372677","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:12:57 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960375226","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:00 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960377912","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:02 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960380381","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:05 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960382767","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:08 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960385495","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:11 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960388345","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:14 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960391505","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:16 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960394428","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:19 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960396756","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:22 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960399674","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:25 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960402527","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:28 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960405111","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:32 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960408436","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:36 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960412618","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:40 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960416396","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:43 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960420424","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:45 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960423450","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:48 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960425991","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:51 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960428700","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:54 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960431831","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:56 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960434532","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:13:58 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960436852","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:01 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960438972","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:03 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960441278","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:05 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960443567","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:08 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960445904","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:10 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35};

        bubbleSort(array, array.length);



    }
}","1546960448093","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:35 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960472812","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:37 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960475117","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:39 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960477342","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:41 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960479470","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:43 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960481755","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:45 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960483860","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:47 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960485868","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:50 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960487973","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:52 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960490118","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:54 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960492224","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:56 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960494338","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:14:58 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960496412","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:00 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960498617","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:03 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960500916","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:05 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960503190","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:07 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960505480","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:09 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960507685","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:11 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960509743","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:13 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960511848","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:16 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960514000","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:18 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960516089","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:20 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960518110","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:22 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960520268","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:24 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960522551","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:27 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960524880","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:29 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960527073","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:31 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960529394","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:33 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960531568","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:35 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960533662","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:37 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218};

        bubbleSort(array, array.length);



    }
}","1546960535786","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:56 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960554167","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:15:58 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960556594","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:00 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960558868","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:02 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960560949","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:04 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960563038","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:07 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960565058","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:09 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960567126","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:11 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960569169","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:13 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960571251","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:15 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960573289","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:17 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960575278","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:19 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960577384","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:21 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960579396","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:23 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960581485","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:25 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960583606","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:27 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960585695","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:29 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960587738","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:31 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960589758","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:33 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960591826","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:36 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960594048","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:38 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960596090","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:40 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960598156","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:42 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960600199","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:44 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960602250","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:46 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960604258","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:48 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960606333","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:50 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960608338","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:52 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960610350","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:54 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960612370","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:16:56 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10,9,8,7,6,5,4,3,2,1};

        bubbleSort(array, array.length);



    }
}","1546960614575","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:17:31 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960649103","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:17:33 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960651555","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:17:35 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960653882","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:17:38 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960656050","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:17:41 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960658271","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:17:44 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960662003","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:17:46 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960664365","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:17:48 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960666719","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:17:51 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960669043","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:17:53 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960671391","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:17:56 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960673681","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:17:58 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960676095","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:00 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960678521","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:03 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960680835","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:05 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960683101","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:07 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960685431","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:09 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960687741","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:12 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960690035","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:14 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960692431","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:17 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960694815","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:19 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960697291","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:22 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960700115","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:25 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960702543","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:27 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960705132","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:30 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960707783","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:33 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960710430","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:36 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960713294","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:38 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960716232","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:40 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960718758","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:18:43 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {100,90,80,70,60,50,40,30,20,10};

        bubbleSort(array, array.length);



    }
}","1546960721002","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:02 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960739801","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:04 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960742238","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:06 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960744575","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:09 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960746915","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:12 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960749289","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:15 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960752485","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:17 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960755110","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:19 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960757524","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:22 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960759891","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:24 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960762284","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:26 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960764670","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:29 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960767104","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:31 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960769451","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:34 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960771850","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:36 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960774270","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:39 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960776834","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:41 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960779259","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:44 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960781694","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:46 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960784235","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:49 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960786771","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:51 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960789154","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:53 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960791440","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:56 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960793832","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:19:58 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960796230","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:01 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960798971","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:04 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960801971","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:07 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960805011","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:09 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960807524","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:11 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960809745","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:14 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {1000,900,800,700,600,500,400,300,200,100};

        bubbleSort(array, array.length);



    }
}","1546960812051","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:32 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960829932","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:35 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960833023","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:38 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960835793","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:40 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960838248","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:43 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960840688","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:45 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960843128","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:47 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960845648","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:50 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960847991","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:52 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960850558","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:55 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960853042","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:20:58 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960855528","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:00 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960858308","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:03 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960860692","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:05 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960863079","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:07 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960865478","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:10 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960867842","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:12 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960870218","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:14 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960872558","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:17 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960875033","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:19 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960877412","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:22 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960879748","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:24 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960882362","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:27 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960884939","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:29 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960887318","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:32 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960889768","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:34 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960892132","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:36 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960894452","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:38 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960896763","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:41 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960899019","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:21:43 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {10000,9000,8000,7000,6000,5000,4000,3000,2000,1000};

        bubbleSort(array, array.length);



    }
}","1546960901348","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:22 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960940469","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:25 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960943062","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:27 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960945413","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:29 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960947677","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:31 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960949737","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:33 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960951773","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:35 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960953885","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:37 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960955954","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:40 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960958042","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:42 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960960169","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:44 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960962343","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:46 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960964466","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:48 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960966507","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:50 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960968634","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:52 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960970758","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:55 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960972871","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:22:57 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960975397","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:00 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960977757","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:02 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960980141","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:04 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960982295","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:06 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960984354","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:08 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960986455","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:10 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960988521","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:12 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960990588","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:14 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960992656","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:16 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960994834","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:18 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960996904","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:20 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546960998967","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:23 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546961001030","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:25 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {67,66,65,64,63};

        bubbleSort(array, array.length);



    }
}","1546961003099","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:43 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961020631","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:45 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961023613","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:48 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961025905","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:50 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961028211","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:52 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961030499","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:54 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961032699","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:57 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961035044","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:23:59 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961037320","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:01 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961039431","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:03 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961041564","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:05 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961043647","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:07 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961045742","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:09 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961047843","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:11 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961049911","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:13 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961052044","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:16 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961054061","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:18 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961056110","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:20 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961058231","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:22 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961060311","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:24 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961062373","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:26 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961064434","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:28 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961066526","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:31 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961068719","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:33 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961071201","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:35 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961073278","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:37 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961075335","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:39 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961077550","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:41 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961079674","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:44 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961081801","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:24:46 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {8005,8004,8003,8002,8001};

        bubbleSort(array, array.length);



    }
}","1546961084100","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:08 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961105713","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:10 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961108167","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:13 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961110609","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:15 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961113139","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:17 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961115579","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:20 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961117924","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:22 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961120253","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:24 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961122397","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:26 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961124430","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:28 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961126459","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:30 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961128503","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:32 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961130575","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:34 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961132728","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:37 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961134809","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:39 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961137130","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:41 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961139196","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:43 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961141184","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:45 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961143280","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:47 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961145299","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:49 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961147346","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:51 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961149420","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:53 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961151497","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:55 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961153553","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:57 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961155615","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:25:59 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961157650","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:01 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961159747","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:03 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961161810","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:05 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961163855","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:08 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961165967","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:10 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {29, 27, 25,23,21,19,17,15};

        bubbleSort(array, array.length);



    }
}","1546961168444","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:35 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961192953","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:37 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961195185","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:39 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961197319","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:41 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961199414","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:43 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961201513","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:45 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961203557","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:47 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961205612","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:49 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961207648","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:51 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961209710","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:53 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961211750","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:55 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961213798","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:26:58 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961215868","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:00 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961218068","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:02 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961220355","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:04 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961222454","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:06 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961224489","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:08 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961226552","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:11 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961228718","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:13 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961231066","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:15 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961233356","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:17 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961235509","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:19 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961237628","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:21 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961239690","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:23 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961241729","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:25 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961243758","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:27 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961245817","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:29 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961247888","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:31 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961249889","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:34 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961252074","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:36 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961254238","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:55 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961273394","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:27:58 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961275989","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:01 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961278886","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:03 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961281146","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:05 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961283240","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:07 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961285301","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:09 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961287300","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:11 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961289723","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:13 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961291753","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:15 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961293777","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:17 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961295838","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:19 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961297898","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:21 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961299915","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:23 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961301963","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:26 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961304021","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:28 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961306099","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:30 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961308121","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:32 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961310188","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:34 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961312216","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:36 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961314227","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:38 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961316253","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:40 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961318246","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:42 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961320429","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:44 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961322446","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:46 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961324507","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:48 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961326546","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:50 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961328557","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:52 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961330565","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:54 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961332666","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:28:56 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15};

        bubbleSort(array, array.length);



    }
}","1546961334700","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:19 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961357443","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:21 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961359890","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:24 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961361984","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:26 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961364157","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:28 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961366270","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:30 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961368369","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:32 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961370431","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:35 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961372541","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:37 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961375067","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:39 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961377532","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:43 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961379964","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:45 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961383288","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:49 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961386010","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:52 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961389563","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:54 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961392185","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:56 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961394387","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:29:58 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961396525","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:01 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961399011","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:03 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961401307","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:05 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961403546","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:07 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961405759","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:09 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961407872","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:11 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961409959","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:14 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961411954","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:16 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961414119","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:18 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961416181","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:20 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961418188","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:22 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961420147","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:24 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961422250","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:26 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198};

        bubbleSort(array, array.length);



    }
}","1546961424261","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:47 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961445035","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:49 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961447448","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:51 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961449943","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:54 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961452044","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:56 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961454109","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:30:58 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961456184","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:00 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961458438","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:02 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961460540","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:04 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961462561","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:06 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961464579","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:08 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961466836","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:10 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961468903","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:12 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961470914","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:15 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961472993","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:18 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961475569","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:20 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961478357","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:23 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961481003","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:26 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961483267","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:29 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961486648","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:31 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961489377","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:33 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961491606","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:36 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961493891","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:38 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961496088","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:40 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961498252","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:42 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961500291","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:44 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961502422","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:46 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961504486","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:48 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961506601","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:50 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961508693","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:31:52 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {3, 6, 8, 9, 1, 2, 7, 10, 4, 5};

        bubbleSort(array, array.length);



    }
}","1546961510681","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:11 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961528813","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:13 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961531386","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:16 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961533744","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:18 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961536144","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:20 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961538513","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:23 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961540860","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:25 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961543103","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:27 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961545190","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:29 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961547279","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:31 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961549321","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:33 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961551323","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:35 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961553417","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:37 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961555455","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:39 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961557499","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:41 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961559547","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:43 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961561565","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:45 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961563584","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:47 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961565629","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:50 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961567653","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:52 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961570239","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:54 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961572277","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:56 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961574352","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:32:58 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961576383","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:00 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961578444","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:02 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961580486","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:04 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961582530","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:06 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961584552","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:08 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961586574","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:10 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961588706","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:12 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {20, 7, 6, 12, 13, 14, 17, 5, 19, 2};

        bubbleSort(array, array.length);



    }
}","1546961590823","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:29 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961607409","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:31 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961609642","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:33 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961611709","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:35 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961613775","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:37 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961615903","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:40 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961618060","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:42 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961620105","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:44 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961622207","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:46 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961624260","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:48 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961626308","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:50 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961628347","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:52 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961630417","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:54 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961632443","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:56 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961634531","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:33:58 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961636553","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:00 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961638636","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:02 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961640670","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:04 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961642706","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:06 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961644704","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:08 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961646637","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:11 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961648692","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:13 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961651227","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:15 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961653300","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:17 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961655341","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:19 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961657458","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:22 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961659758","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:24 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961662139","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:26 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961664167","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:28 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961666352","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:30 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {69, 54, 98, 41, 32, 96, 59, 48, 84, 85};

        bubbleSort(array, array.length);



    }
}","1546961668403","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:49 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961687401","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:52 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961689866","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:54 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961692181","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:56 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961694377","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:34:58 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961696530","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:00 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961698595","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:02 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961700583","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:04 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961702571","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:06 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961704595","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:08 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961706675","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:10 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961708786","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:13 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961710876","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:15 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961713132","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:17 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961715194","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:19 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961717256","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:21 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961719739","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:24 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961722012","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:27 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961724435","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:29 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961727795","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:31 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961729858","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:34 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961731973","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:36 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961734133","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:38 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961736257","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:40 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961738347","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:42 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961740905","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:44 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961742965","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:46 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961745018","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:49 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961747068","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:51 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961749086","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:35:53 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {864, 497, 995, 31, 491, 111, 613, 235, 971, 100};

        bubbleSort(array, array.length);



    }
}","1546961751129","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:15 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961772943","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:17 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961775395","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:19 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961777853","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:22 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961780055","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:24 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961782273","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:26 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961784365","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:28 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961786352","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:30 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961788368","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:32 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961790394","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:34 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961792383","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:36 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961794394","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:38 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961796632","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:40 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961798694","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:42 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961800737","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:44 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961802818","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:46 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961804823","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:49 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961806980","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:51 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961809090","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:53 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961811094","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:55 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961813169","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:57 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961815146","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:36:59 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961817195","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:01 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961819217","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:03 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961821277","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:05 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961823251","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:07 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961825239","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:09 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961827339","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:11 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961829350","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:13 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961831377","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:16 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {763, 19, 737, 861, 808};

        bubbleSort(array, array.length);



    }
}","1546961833542","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:35 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961853196","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:37 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961855363","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:39 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961857445","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:41 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961859580","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:43 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961861683","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:45 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961863734","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:47 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961865797","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:49 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961867832","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:51 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961869907","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:54 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961871979","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:56 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961874265","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:37:58 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961876292","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:00 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961878490","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:02 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961880491","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:04 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961882525","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:06 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961884519","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:08 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961886511","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:10 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961888528","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:12 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961890508","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:14 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961892501","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:16 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961894584","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:18 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961896644","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:20 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961898699","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:22 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961900726","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:24 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961902788","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:26 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961904812","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:28 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961906854","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:30 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961908853","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:32 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961910876","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:38:34 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {179, 886, 924, 822, 614};

        bubbleSort(array, array.length);



    }
}","1546961912927","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:15 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961953696","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:17 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961955831","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:20 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961957986","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:22 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961960187","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:24 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961962337","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:26 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961964935","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:28 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961967006","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:31 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961969062","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:33 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961971122","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:35 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961973164","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:37 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961975195","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:39 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961977234","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:41 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961979257","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:43 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961981272","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:45 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961983333","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:47 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961985441","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:49 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961987490","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:51 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961989552","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:53 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961991579","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:55 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961993634","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:57 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961995620","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:39:59 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961997618","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:01 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546961999613","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:03 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546962001621","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:05 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546962003723","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:08 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546962005837","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:10 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546962008075","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:12 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546962010278","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:14 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546962012371","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:16 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

        bubbleSort(array, array.length);



    }
}","1546962014413","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:42 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962039962","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:44 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962042466","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:46 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962044677","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:48 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962046736","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:50 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962048859","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:52 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962050910","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:54 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962053018","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:57 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962055069","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:40:59 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962057117","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:01 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962059606","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:03 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962061619","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:05 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962063662","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:07 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962065657","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:09 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962067695","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:11 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962069730","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:13 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962071803","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:15 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962073803","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:17 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962075898","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:19 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962077940","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:21 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962080022","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:23 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962082044","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:25 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962084033","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:27 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962086055","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:29 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962088040","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:31 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962090008","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:33 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962092028","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:35 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962094003","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:38 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962096030","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:40 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962098123","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:41:42 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {133804, 196534, 138806, 208428, 611667, 342419, 478838, 75229, 280039, 674374, 670343, 758173, 409699, 816659, 159993, 911837, 400574, 463094, 110565, 210569, 165900, 484651, 232579, 383987, 994762, 813584, 424048, 729979, 457528, 51667, 878147, 480615, 763111, 222084, 635850, 603455, 379188, 448805, 3, 377884, 782504, 394375, 569650, 98900, 824251, 140359, 922860, 968251, 853139, 926611};
        bubbleSort(array, array.length);



    }
}","1546962100156","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:00 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962118222","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:02 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962120496","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:04 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962122568","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:06 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962124717","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:09 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962126962","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:11 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962129087","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:13 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962131156","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:15 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962133164","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:17 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962135250","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:19 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962137297","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:21 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962139388","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:23 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962141388","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:25 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962143498","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:28 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962146084","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:30 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962148302","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:32 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962150298","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:34 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962152271","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:36 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962154301","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:38 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962156293","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:40 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962158636","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:42 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962160800","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:44 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962162863","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:47 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962164988","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:49 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962167087","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:51 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962169144","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:53 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962171143","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:55 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962173143","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:57 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962175254","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:42:59 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962177853","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:01 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {4184, 2036, 2435, 9234, 8251, 9648, 5359, 6866, 1916, 9941, 3611, 5807, 6872, 8561, 1051, 5310, 9152, 5309, 5916, 7836, 3057, 4313, 6501, 6812, 5797, 8098, 3176, 2698, 2451, 6600, 1007, 5564, 8135, 164, 6906, 7273, 2365, 882, 7374, 7717, 4717, 4825, 2980, 4603, 4181, 6737, 4607, 9588, 5381, 7004, 5070, 9313, 3946, 1081, 9179, 4842, 6781, 6064, 934, 1139, 4692, 7448, 797, 1693, 791, 343, 5000, 5583, 2066, 4416, 2082, 2144, 1101, 8835, 4865, 5957, 7933, 7151, 206, 8943, 4814, 4376, 972, 8217, 4362, 771, 2685, 5023, 8242, 3716, 137, 7824, 5119, 392, 2060, 4858, 4617, 2574, 243, 8959};
        bubbleSort(array, array.length);



    }
}","1546962179891","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:19 GMT 2019","1","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962197007","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:21 GMT 2019","2","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962199257","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:23 GMT 2019","3","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962201519","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:25 GMT 2019","4","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962203634","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:28 GMT 2019","5","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962205859","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:30 GMT 2019","6","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962208253","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:32 GMT 2019","7","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962210560","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:34 GMT 2019","8","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962212813","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:37 GMT 2019","9","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962215074","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:39 GMT 2019","10","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962217260","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:41 GMT 2019","11","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962219460","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:44 GMT 2019","12","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962221755","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:46 GMT 2019","13","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962224289","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:48 GMT 2019","14","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962226627","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:50 GMT 2019","15","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962228872","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:52 GMT 2019","16","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962230890","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:54 GMT 2019","17","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962232939","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:57 GMT 2019","18","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962235048","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:43:59 GMT 2019","19","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962237169","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:44:01 GMT 2019","20","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962239805","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:44:03 GMT 2019","21","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962241905","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:44:05 GMT 2019","22","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962243907","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:44:07 GMT 2019","23","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962245967","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:44:09 GMT 2019","24","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962247991","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:44:11 GMT 2019","25","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962250046","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:44:14 GMT 2019","26","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962252066","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:44:16 GMT 2019","27","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962254102","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:44:18 GMT 2019","28","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962256208","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:44:20 GMT 2019","29","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962258187","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Tue Jan 08 15:44:22 GMT 2019","30","[InsertLineEdit{lineNumber=6, lineContents='//this is a comment'}]","import java.util.Arrays;

public class RecursiveBubbleSort {

    static void bubbleSort(int array[], int n){
        if (n==1){
//this is a comment
            return;
        }


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
                if (array[j-1] > array[j]) {
                    int temp = array[j-1];
                    array[j-1] = array[j];
                    array[j] = temp;
                }
               // bubbleSort(array);


            }

        }
        if (n-1 >1){
            bubbleSort(array, n-1);
        }
        System.out.println(""Recursive - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());
    }

    public static void main(String[] args) {
        int array[] = {264927, 465614, 755728, 832555, 703286, 152740, 869784, 258392, 103780, 523126, 317835, 493282, 586911, 545903, 476398, 746145, 387014, 219268, 299823, 504949, 911528, 849526, 937581, 516828, 884449, 306787, 326538, 164593, 360180, 937030, 357445, 678795, 504645, 105247, 946133, 56077, 496146, 816781, 374011, 682316, 811639, 678995, 865684, 179648, 572942, 194966, 567720, 867774, 536330, 24505, 708963, 516697, 987747, 708422, 103116, 20747, 13542, 421158, 376547, 264878, 770256, 739192, 259637, 776026, 704086, 852352, 934579, 182350, 63158, 385953, 94855, 105336, 607985, 584312, 273358, 510039, 960108, 594281, 979101, 334262, 674684, 249954, 697148, 504633, 18231, 878818, 394520, 58112, 232462, 394473, 485355, 272823, 997811, 13613, 711652, 118787, 201485, 148330, 507328, 854119, 293896, 966516, 112982, 95827, 32122, 796642, 361196, 877582, 848617, 580711, 245802, 192702, 145430, 702127, 603695, 685319, 842888, 338847, 21184, 748598, 599073, 954081, 13126, 789959, 940916, 535246, 914755, 122451, 294164, 103327, 60291, 928731, 27214, 518025, 712183, 122023, 130824, 218321, 770100, 319585, 152292, 747831, 948692, 671032, 306528, 891946, 992151, 470689, 192979, 237001, 925636, 933650, 616165, 19524, 800914, 794184, 878743, 187198, 63958, 615063, 754142, 919426, 11917, 622104, 571309, 925518, 886942, 610300, 452582, 862475, 14300, 237366, 993060, 749627, 51894, 511468, 488999, 562369, 121746, 536011, 691081, 373952, 74900, 406782, 618190, 230425, 984989, 184776, 486659, 19402, 183596, 844283, 373964, 348993, 613707, 543620, 77391, 817082, 105984, 962447, 192234, 988547, 104580, 571384, 673722, 72328, 881813, 643666, 790722, 938537, 976466, 261181, 194582, 909378, 907459, 178862, 256462, 905688, 603111, 643673, 110018, 205459, 847156, 850836, 545983, 354075, 820165, 737626, 598419, 930156, 953371, 883264, 500771, 279638, 917731, 120252, 817288, 296848, 551706, 919637, 102207, 980348, 19899, 552151, 430918, 506039, 252722, 152263, 423830, 460107, 752803, 683537, 446403, 476554, 347456, 60839, 750012, 344778, 998323, 76315, 189917, 773248, 246772, 947788, 253761, 961304, 140860, 345395, 793017, 556492, 194124, 656623, 153770, 78280, 226406, 183095, 257767, 221093, 368967, 764358, 137147, 376054, 971984, 283939, 844160, 948132, 640663, 953789, 839824, 313451, 403702, 744255, 280957, 360978, 234046, 229052, 788841, 221275, 639296, 413827, 938102, 498336, 904340, 920505, 575423, 264418, 298089, 159192, 287216, 631589, 916777, 85502, 53402, 400934, 553737, 387239, 976725, 378716, 488998, 736561, 645828, 59588, 650259, 715271, 647635, 484307, 406248, 564634, 312477, 287267, 197525, 588499, 268645, 272930, 301624, 99494, 511499, 52179, 152627, 919998, 738410, 580833, 408449, 881839, 290304, 289593, 199049, 77378, 426257, 304591, 766808, 582091, 776246, 240835, 396310, 652709, 347298, 222379, 770056, 604024, 852263, 642185, 213052, 80789, 723652, 238214, 556298, 790173, 365607, 413920, 573647, 838240, 467294, 619420, 558350, 45498, 996493, 472938, 158403, 903408, 293288, 149757, 625398, 603983, 860766, 190765, 940889, 300983, 943698, 291448, 644090, 489172, 652963, 824771, 419698, 595464, 36595, 547573, 743735, 663788, 984365, 663430, 178985, 182156, 152260, 446604, 404929, 465085, 594096, 975381, 72391, 570946, 758695, 336765, 718942, 438190, 557406, 715779, 352382, 943387, 561088, 562639, 957399, 114704, 997345, 601133, 459008, 282899, 831127, 947256, 632491, 878678, 278250, 631832, 509275, 891495, 21232, 130328, 289876, 166793, 840891, 842612, 487071, 833487, 683466, 823857, 902127, 244534, 475103, 654184, 946696, 74332, 581949, 797977, 187818, 503511, 220163, 62265, 550908, 938932, 13234, 995955, 313435, 366528, 90673, 317281, 773339, 168747, 26154, 172269, 401942, 518870, 415702, 389069, 413027, 711277, 180495, 811737, 51671, 61319, 151527, 974476, 774681, 909883, 14420, 8560, 469263, 320166, 738235, 380437, 380256, 568932, 860544, 859677, 493578, 122689, 635973, 867174, 494447, 897378, 983138, 851943, 682797, 452818, 458252, 385735, 729294, 168609, 561591, 758250, 523625, 943538, 101509, 409956, 162535, 847172, 404658, 411986, 939647, 985194, 355112, 601116, 391784, 170497, 27018, 37953, 689464, 361189, 174630, 280672, 987701, 666592, 666342, 691623, 568586, 525547, 123119, 450609, 52078, 108142, 146439, 343016, 222935, 924025, 904155, 549995, 438062, 719159, 914165, 101514, 34236, 329671, 993952, 963221, 495966, 781906, 482739, 103910, 329599, 929464, 721572, 808726, 423132, 165326, 84076, 675827, 418136, 355772, 806590, 382417, 787934, 579529, 498141, 34635, 682628, 155137, 152382, 33831, 765777, 220584, 697330, 425211, 665637, 188497, 173179, 497980, 212152, 348972, 400854, 351296, 476413, 543779, 860304, 334728, 606639, 468122, 830348, 863132, 249949, 858078, 231471, 696661, 914454, 544152, 783103, 789177, 396472, 821782, 541473, 919291, 247674, 627054, 985311, 480665, 831409, 184033, 78081, 82190, 558309, 834809, 649045, 586997, 342998, 763333, 295768, 722963, 946686, 984704, 138695, 115024, 827334, 292052, 897301, 979947, 900824, 844868, 281573, 432171, 994166, 747646, 891705, 265626, 919608, 152775, 207827, 147392, 996743, 174025, 799650, 889200, 878450, 544637, 63944, 275026, 646708, 299331, 57822, 931873, 794299, 443265, 445420, 20459, 640641, 92417, 296586, 634388, 525568, 97157, 328925, 345454, 397238, 990837, 473013, 710359, 664358, 747322, 747657, 662352, 491676, 727158, 4501, 498041, 901728, 558220, 415017, 355076, 70677, 926753, 974426, 743907, 281213, 989934, 429412, 388688, 755522, 875641, 735721, 752698, 787256, 596674, 613964, 18069, 742562, 780938, 71995, 794076, 537982, 425447, 142144, 427625, 424743, 266825, 132990, 45099, 286518, 206971, 126674, 174405, 542853, 358556, 574742, 468775, 954556, 749880, 672904, 882620, 129507, 413040, 508510, 264968, 445591, 848794, 13246, 60242, 341655, 1821, 921967, 566722, 386621, 243060, 850786, 314126, 175428, 968595, 719602, 804340, 798062, 29600, 235134, 680873, 527665, 152298, 574297, 216052, 432058, 145748, 144500, 632176, 412215, 419099, 16698, 844351, 285310, 325819, 496735, 902870, 72554, 439861, 308072, 933257, 963687, 746896, 254602, 567464, 771881, 61131, 678503, 53742, 303532, 490057, 528939, 803720, 764408, 630032, 560308, 234926, 709751, 811260, 669523, 959199, 443073, 576835, 614414, 464673, 604694, 412304, 794584, 624018, 98536, 777619, 122331, 256269, 335481, 451233, 811961, 78926, 472509, 51789, 820433, 933345, 112420, 755165, 21207, 129762, 67924, 109883, 230725, 234923, 761188, 150272, 44014, 267313, 213545, 97345, 356595, 482249, 937084, 827945, 507392, 607045, 86591, 215967, 235484, 925927, 785504, 129269, 379313, 860461, 285159, 280513, 700868, 508392, 622406, 319818, 610328, 788323, 305955, 2769, 3010, 739692, 161966, 142712, 146752, 822447, 360810, 666495, 717786, 368475, 818503, 948929, 227657, 278912, 277674, 4225, 969739, 550312, 820056, 80895, 575900, 764834, 113924, 845974, 605024, 526084, 184440, 382584, 80383, 51650, 391424, 562431, 276434, 986411, 20183, 396277, 256321, 679244, 263908, 631605, 469629, 147240, 219741, 77191, 849289, 763561, 337277, 272890, 889851, 156602, 211526, 54028, 603470, 976312, 144226, 551382, 890753, 640835, 394114, 786162, 677897, 86299, 625330, 723461, 203568, 488796, 376930, 74157, 812783, 987880, 139819, 8361, 510569, 296124, 958074, 912882, 919395, 339860, 497754, 146676, 363529, 79325, 953332, 371970, 589645, 515838, 207376, 646906, 92815, 114482, 918713, 301705, 179868, 117614, 124966, 2853, 953787, 521193, 118994, 834566, 23827, 568110, 454336, 762130, 245281, 3716, 626603, 842487, 18915, 83385, 250669, 446393, 481347, 140929, 73455, 49182, 557307, 613304, 677644, 139050, 50988, 780840, 158418, 142925, 678481, 950778, 952514, 115866, 9462, 85345, 93861, 761727, 642285, 276761, 234250, 428351, 780205, 231073, 1974, 566600, 466000, 740919, 699849, 244048, 852516, 65536, 710463, 310886, 497782, 370539, 353496, 882870};
        bubbleSort(array, array.length);



    }
}","1546962260219","true","false","695.0","0.0"
"Date","Repetitions","Patch","Output","Time","Compiled","Passed Unit Tests?","Opacitor measurement 1","Opacitor measurement 2"
"Sun Jan 20 11:28:24 GMT 2019","1","[MoveBlockEdit{startBlockInt=3, endBlockInt=29, newLocation=13}]","import java.util.Arrays;

public class IterativeBubbleSort {
    static void bubbleSort(int array[], int n){
            return;

            for (int j =1; j < (n-i); j++){
                int temp = array[j-1];

        if (n==1){
        }
        for (int i=0; i < n; i++){
            if (array[j-1] > array[j]) {
                array[j-1] = array[j];
                array[j] = temp;
            }

            }

        }
        System.out.println(""Iterative - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());

    }

    public static void main(String[] args) {
        //int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};

    static void bubbleSort(int array[], int n){
        bubbleSort(array, array.length);
        if (n==1){

            return;
      }
        }
}


        for (int i=0; i < n; i++){
            for (int j =1; j < (n-i); j++){
            if (array[j-1] > array[j]) {
                int temp = array[j-1];
                array[j-1] = array[j];
                array[j] = temp;
            }

            }

        }
        System.out.println(""Iterative - Sorted array: "" + Arrays.toString(array));
        System.out.println(""time:"" + System.currentTimeMillis());

    }

    public static void main(String[] args) {
        //int array[] = {7, 69, 76, 102, 94, 53, 62 , 101};
        int array[] = {102418, 391041, 979493, 765640, 899906, 832710, 806520, 699731, 63768, 68175, 521103, 122171, 776709, 890837, 644347, 974933, 34, 474389, 963630, 709592, 576313, 623896, 509591, 510928, 213};
","1547983704877","false","false","0.0","0.0"
